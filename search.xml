<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019年目标</title>
      <link href="/2019/12/30/blog/2019/"/>
      <url>/2019/12/30/blog/2019/</url>
      
        <content type="html"><![CDATA[<p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/2019/new-year-3667925_960_720.jpg" alt="2019"></p><a id="more"></a><h1 id="2019年目标"><a href="#2019年目标" class="headerlink" title="2019年目标"></a>2019年目标</h1><table><thead><tr><th>目标</th><th>具体</th><th>完成情况</th></tr></thead><tbody><tr><td>8本技术类书籍</td><td>Docker技术入门与实践(实体书)、<a href="../../../../12/01/读书笔记/《Java并发编程的艺术》/0.0_目录/">Java并发编程的艺术</a>、<a href="../../../../11/30/读书笔记/《高性能MySQL》/0.目录/">高性能MySQL</a></td><td>12.5%</td></tr><tr><td>2本非技术书籍</td><td>献给阿尔吉侬的花束、薇</td><td>100%</td></tr><tr><td>200道LeetCode</td><td>进行中</td><td>3%</td></tr><tr><td>React+AntDesign 后台管理系统</td><td>《React16.4 开发简书项目 从零基础入门到实践》网课、笔记、线上项目</td><td>33%</td></tr><tr><td>SpringBoot2.0 + Kotlin 后台管理系统后端</td><td>《Kotlin入门与实战》、《Kotlin打造完整电商APP》、读书笔记、线上项目</td><td>0%</td></tr><tr><td>MongoDB4.0 版本新特性</td><td>笔记</td><td>0%</td></tr><tr><td>Spring Security Doc</td><td>Spring Security 官方文档笔记</td><td>40%</td></tr></tbody></table><ul><li>2019/3/12 快慢指针算法、贪心算法 1%</li><li>2019/3/13 java fast-fail快速失败策略</li><li>2019/3/14 <a href="https://docs.spring.io/spring-amqp/docs/2.0.4.RELEASE/reference/html/resources.html" target="_blank" rel="noopener">Spring-Rabbit学习</a></li><li>2019/3/14 旋转数组、存在重复、只出现一次的数字、两个数组的交集 II 3%</li><li>2019/3/18 加一、移动零 4%</li><li>2019/5/6  完成《Java并发编程的艺术》书籍的观看 60%</li><li>2019/5/6  完成慕课网《Java并发编程与高并发解决方案》的网课 100%</li><li>2019/5/24 完成慕课网《React16.4 开发简书项目 从零基础入门到实践》的网课 100%</li><li>2019/6/19 完成《<a href="../../../../../12/01/读书笔记/《Java并发编程的艺术》/0.目录/">Java并发编程的艺术</a>》书籍观看 100%，及笔记</li><li>2019/6/24 完成《<a href="../../../../../11/30/读书笔记/《高性能MySQL》/0.目录/">高性能MySQL</a>》观看，及笔记</li><li>2019/7/4 观看《<a href="../../../../../11/29/读书笔记/《Java Design Patterns》/0.目录/">Java Design Patterns</a>》40%</li><li>2019/7/18 《<a href="../../../../../07/19/读书笔记/《SpringSecurity》/0.目录/">Spring Security 官方文档</a>》及笔记</li><li>2019/8/15 《算法图解》、《重构-改善既有代码的设计》</li><li>2019/8/29  复习《JAVA Design Patterns》</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》读书笔记 - 目录</title>
      <link href="/2019/12/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/0.0_%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/12/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/0.0_%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.gitbook.cn/FqT6_h3A4raxz0Sw6-cR9o8TdQIo?imageView2/2/h/500" alt="Java并发编程的艺术"></p><a id="more"></a><h1 id="《Java并发编程的艺术》读书笔记"><a href="#《Java并发编程的艺术》读书笔记" class="headerlink" title="《Java并发编程的艺术》读书笔记"></a>《Java并发编程的艺术》读书笔记</h1><ol><li>第一章 <a href="../../../../../06/03/读书笔记/《Java并发编程的艺术》/1.并发编程的挑战/">并发编程的挑战</a></li><li>第二章 <a href="../../../../../06/04/读书笔记/《Java并发编程的艺术》/2.Java并发机制的底层实现原理/">Java 并发机制的底层实现原理</a></li><li>第三章 <a href="../../../../../06/05/读书笔记/《Java并发编程的艺术》/3.Java内存模型/">Java 内存模型</a></li><li>第四章 <a href="../../../../../06/07/读书笔记/《Java并发编程的艺术》/4.Java并发编程基础/">Java 并发编程基础</a></li><li>第五章 <a href="../../../../../06/08/读书笔记/《Java并发编程的艺术》/5.Java中的锁/">Java 中的锁</a></li><li>第六章 <a href="../../../../../06/09/读书笔记/《Java并发编程的艺术》/6.Java并发容器和框架/">Java 并发容器和框架</a></li><li>第七章 <a href="../../../../../06/10/读书笔记/《Java并发编程的艺术》/7.Java中的13个原子操作类/">Java 中的13个原子操作类</a></li><li>第八章 <a href="../../../../../06/11/读书笔记/《Java并发编程的艺术》/8.Java中的并发工具类/">Java 中的并发工具类</a></li><li>第九章 <a href="../../../../../06/12/读书笔记/《Java并发编程的艺术》/9.Java中的线程池/">Java 中的线程池</a></li><li>第十章 <a href="../../../../../06/13/读书笔记/《Java并发编程的艺术》/10.Executor框架/">Executor 框架</a></li><li>第十一章 <a href="../../../../../06/14/读书笔记/《Java并发编程的艺术》/11.Java并发编程实践/">Java 并发编程实践</a></li></ol><p>本笔记来自于 书籍：<code>Java并发编程的艺术</code></p>]]></content>
      
      
      <categories>
          
          <category> Java并发编程的艺术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JAVA 核心知识点整理》读书笔记 - 目录</title>
      <link href="/2019/12/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/0.%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/12/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/0.%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://luokaiii.oss-cn-shanghai.aliyuncs.com/blog/java-core/java.png" alt="JAVA 核心知识点整理"></p><h1 id="JAVA-核心知识点整理-目录"><a href="#JAVA-核心知识点整理-目录" class="headerlink" title="JAVA 核心知识点整理 - 目录"></a>JAVA 核心知识点整理 - 目录</h1><ol><li>JVM<ol><li>线程</li><li>JVM内存区域<ol><li>程序计数器(线程私有)</li><li>虚拟机栈(线程私有)</li><li>本地方法区(线程私有)</li><li>堆(Heap-线程共享) - 运行时数据区</li><li>方法区/永久代(线程共享)</li></ol></li><li>JVM 运行时内存<ol><li>新生代<ol><li>Eden区</li><li>ServicorFrom</li><li>ServicorTo</li><li>MinorGC 的过程 (复制 &gt; 清空 &gt; 互换)<ol><li>eden、ServicorFrom 复制到 ServicorTo，年龄+1</li><li>清空 Eden、ServicorFrom</li><li>ServicorTo 和 ServicorFrom 互换</li></ol></li></ol></li><li>老年代</li><li>永久代</li></ol></li><li>垃圾回收算法<ol><li>如何确定垃圾<ol><li>引用计数法</li><li>可达性分析</li></ol></li><li>标记清除算法(Mark-Sweep)</li><li>复制算法(Copying)</li><li>标记整理算法(Mark-Compact)</li><li>分代收集算法<ol><li>新生代与复制算法</li><li>老年代与标记复制算法</li></ol></li></ol></li><li>Java的四种引用类型<ol><li>强引用</li><li>软引用</li><li>弱引用</li><li>虚引用</li></ol></li><li>GC分代收集算法 VS 分区收集算法<ol><li>分代收集算法<ol><li>新生代-复制算法</li><li>老年代-标记整理算法</li></ol></li><li>分区收集算法</li></ol></li><li>GC 垃圾收集器<ol><li>Serial垃圾收集器(单线程、复制算法)</li><li>ParNew 垃圾收集器(Serial+多线程)</li><li>Parallel Scavenge 收集器(多线程复制算法、高效)</li><li>Serial Old 收集器（单线程标记整理算法）</li><li>Parallel Old 收集器（多线程标记整理算法）</li><li>CMS 收集器（多线程标记整理算法）<ol><li>初识标记</li><li>并发标记</li><li>重新标记</li><li>并发清除</li></ol></li><li>G1 收集器</li></ol></li><li>JAVA IO/NIO<ol><li>阻塞 IO 模型</li><li>非阻塞 IO 模型</li><li>多路复用 IO 模型</li><li>信号驱动 IO 模型</li><li>异步 IO 模型</li><li>JAVA IO包</li><li>JAVA NIO<ol><li>NIO 的缓冲区</li><li>NIO 的非阻塞</li></ol></li><li>Channel</li><li>Buffer</li><li>Selector</li></ol></li><li>JVM 类加载机制<ol><li>加载</li><li>验证</li><li>准备</li><li>解析</li><li>符号引用</li><li>直接引用</li><li>初始化</li><li>类构造器<client></client></li></ol></li><li>类加载器<ol><li>启动类加载器（Bootstrap ClassLoader）</li><li>扩展类加载器（Extension ClassLoader）</li><li>应用程序类加载器（Application ClassLoader）</li></ol></li><li>双亲委派</li><li>OSGI（动态模型系统）<ol><li>动态改变构造</li><li>模块化编程与热插拔</li></ol></li></ol></li><li>JAVA 集合<ol><li>接口继承关系和实现</li><li>List<ol><li>ArrayList（数组）</li><li>Vector（数组、线程同步）</li><li>LinkedList（链表）</li></ol></li><li>Set<ol><li>HashSet（Hash表）</li><li>TreeSet（二叉树）</li><li>LinkHashSet（HashSet+LinkHashMap）</li></ol></li><li>Map<ol><li>HashMap（数组+链表+红黑树）<ol><li>JAVA7实现</li><li>JAVA8实现</li></ol></li><li>ConcurrentHashMap<ol><li>Segment 段</li><li>线程安全（Segment 继承 ReentrantLock 加锁）</li><li>并行度（默认16）</li><li>Java8实现（引入了红黑树）</li><li>HashTable（线程安全）</li><li>TreeMap（可排序）</li><li>LinkHashMap（记录插入顺序）</li></ol></li></ol></li></ol></li><li>Java 多线程并发<ol><li>Java 并发知识库</li><li>Java线程实现/创建方法<ol><li>继承Thread类</li><li>实现Runnable接口</li><li>ExecutorService、Callable<class>、Future 有返回值线程</class></li><li>基于线程池的方式</li></ol></li><li>四种线程池<ol><li>newCachedThreadPool</li><li>newFixedThreadPool</li><li>newScheduledThreadPool</li><li>newSingleThreadExecutor</li></ol></li><li>线程生命周期<ol><li>新建状态（NEW）</li><li>就绪状态（RUNNABLE）</li><li>运行状态（RUNNING）</li><li>阻塞状态（BLOCKED）<ol><li>等待阻塞（o.wait &gt; 等待队列）</li><li>同步阻塞（lock &gt; 锁池）</li><li>其他阻塞（sleep/join）</li></ol></li><li>线程死亡（DEAD）<ol><li>正常结束</li><li>异常结束</li><li>调用stop</li></ol></li></ol></li><li>终止线程的4中方式<ol><li>正常运行结束</li><li>使用退出标志退出线程</li><li>Interrupt方法结束线程</li><li>stop方法终止线程（线程不安全）</li></ol></li><li>sleep 与 wait 的区别</li><li>start 与 run 的区别</li><li>Java 后台线程</li><li>Java 锁<ol><li>乐观锁</li><li>悲观锁</li><li>自旋锁<ol><li>自旋锁的优缺点</li><li>自旋锁的时间阈值（1.6引入了适应性自旋锁）</li><li>自旋锁的开发</li></ol></li><li>Synchronized同步锁<ol><li>Synchronized 作用范围</li><li>Synchronized 核心组件</li><li>Synchronized 实现</li></ol></li><li>ReentrantLock<ol><li>Lock 接口的主要方法</li><li>非公平锁</li><li>公平锁</li><li>ReentrantLock 与 Synchronized</li><li>ReentrantLock 的实现</li><li>Condition 类与 Object 锁方法的区别</li><li>tryLock 、Lock、lockInterruptibly的区别</li></ol></li><li>Semaphore 信号量<ol><li>实现互斥锁</li><li>代码实现</li><li>Semaphore 与 ReentrantLock</li></ol></li><li>AutomicInteger</li><li>可重入锁（递归锁）</li><li>公平锁与非公平锁<ol><li>公平锁（Fair）</li><li>非公平锁（Nofair）</li></ol></li><li>ReadWriteLock 读写锁<ol><li>读锁</li><li>写锁</li></ol></li><li>共享锁和独占锁<ol><li>独占锁</li><li>共享锁</li></ol></li><li>重量级锁（Mutex Lock）</li><li>轻量级锁<ol><li>锁升级</li></ol></li><li>偏向锁</li><li>分段锁</li><li>锁优化<ol><li>减少锁持有时间</li><li>减小锁粒度</li><li>锁分离</li><li>锁粗化</li><li>锁消除</li></ol></li></ol></li><li>线程的基本方法<ol><li>线程等待（wait）</li><li>线程睡眠（sleep）</li><li>线程让步（yield）</li><li>线程中断（interrupt）</li><li>join 等待其他线程终止</li><li>为什么使用 join() 方法</li><li>线程唤醒 - notify</li><li>其他方法</li></ol></li><li>线程上下文切换<ol><li>进程</li><li>上下文</li><li>寄存器</li><li>程序计数器</li><li>PCB-切换锁</li><li>上下文切换的活动</li><li>引起线程上下文切换的原因</li></ol></li><li>同步锁与死锁<ol><li>同步锁</li><li>死锁</li></ol></li><li>线程池原理<ol><li>线程复用</li><li>线程池的组成</li><li>拒绝策略</li><li>java 线程池工作过程</li></ol></li><li>JAVA 阻塞队列原理<ol><li>阻塞队列的主要方法<ol><li>插入操作</li><li>获取数据操作</li></ol></li><li>Java 中的阻塞队列</li><li>ArrayBlockingQueue（公平、非公平）</li><li>LinkedBlockingQueue（两个独立锁提高并发）</li><li>PriorityBlockingQueue（compareTo 排序实现优先）</li><li>DelayQueue（缓存失效、定时任务）</li><li>SynchronousQueue（不存储数据、可用于传递数据）</li><li>LinkedTransferQueue</li><li>LinkedBlockingQueue</li></ol></li><li>CyclicBarrier、CountDownLatch、Semaphore 的用法<ol><li>CountDownLatch（线程计数器）</li><li>CyclicBarrier（回环栅栏-等待至 barrier 状态再全部同时执行）</li><li>Semaphore（信号量-控制同时访问的线程个数）</li></ol></li><li>volatile 关键字的作用<ol><li>变量可见性</li><li>禁止重排序</li><li>比 Synchronized 更轻量级的同步锁</li><li>适用场景</li></ol></li><li>如何在两个线程之间共享数据<ol><li>将数据抽象成一个类，并将数据的操作作为这个类的方法</li><li>Runnable 对象作为一个类的内部类</li></ol></li><li>ThreadLocal 作用（线程本地存储）<ol><li>ThreadLocalMap（线程的一个属性）</li><li>使用场景</li></ol></li><li>synchronized 和 ReentrantLock 的区别<ol><li>共同点</li><li>不同点</li></ol></li><li>ConcurrentHashMap 并发<ol><li>减小锁粒度</li><li>ConcurrentHashMap 分段锁<ol><li>ConcurrentHashMap 是由Segment 数组结构和 HashEntry数组结构组成</li></ol></li></ol></li><li>Java中用到的线程调度<ol><li>抢占式调度</li><li>协同式调度</li><li>JVM 的线程调度实现（抢占式调度）</li><li>线程让出CPU的情况</li></ol></li><li>进程调度算法<ol><li>优先调度算法</li><li>高优先权优先调度算法</li><li>基于时间片的轮转调度算法</li></ol></li><li>什么是CAS（比较并交换-乐观锁机制-锁自旋）<ol><li>概念及特性</li><li>原子包 java.util.concurrent.atomic（锁自旋）</li><li>ABA 问题</li></ol></li><li>什么是AQS（抽象的队列同步器）<ol><li>Exclusive 独占资源- ReentrantLock</li><li>Share 共享资源 -Semaphore、CountDownLatch</li><li>同步器的实现是 ABS 核心（state资源状态计数）</li><li>ReentrantReadWriteLock 实现独占和共享两种方法</li></ol></li></ol></li><li>JAVA 基础<ol><li>JAVA 异常分类及处理<ol><li>概念</li><li>异常分类<ol><li>Error</li><li>Exception</li></ol></li><li>异常的处理方式<ol><li>不处理，抛出给调用者（throw、throws）</li><li>try catch 捕获异常</li></ol></li><li>throw 和 throws 的区别<ol><li>位置不同</li><li>功能不同</li></ol></li></ol></li><li>Java 反射<ol><li>动态语言</li><li>反射机制概念（运行状态中知道类所有的属性和方法）</li><li>反射的应用场合<ol><li>编译时类型和运行时类型</li><li>编译时类型无法获取具体方法</li></ol></li><li>Java 反射API<ol><li>反射 API 用来生成JVM 中的类、接口或者对象的信息</li></ol></li><li>反射使用步骤（获取Class对象、调用对象方法）</li><li>获取Class对象的3种方法<ol><li>调用某个对象的getClass（）方法</li><li>调用某个类的 class 属性来获取该类对应的 Class 对象</li><li>使用 Class 类中的 forName() 静态方法（最安全、性能最好）</li></ol></li><li>创建对象的两种方法<ol><li>Class 对象的 newInstance()</li><li>调用 Constructor 对象的 newInstance()</li></ol></li></ol></li><li>JAVA 注解<ol><li>概念</li><li>四种标准元注解<ol><li>@Target 修饰的对象范围</li><li>@Rentention 定义被保留的时间长短</li><li>@Document 描述javadoc</li><li>@Inherited 阐述某个被标注的类型是被继承的</li></ol></li><li>注解处理器</li></ol></li><li>JAVA 内部类<ol><li>静态内部类</li><li>成员内部类</li><li>局部内部类（定义在方法中的类）</li><li>匿名内部类（要继承一个父类或者实现一个接口、直接使用new来生成一个对象的引用）</li></ol></li><li>JAVA 泛型<ol><li>泛型方法（<e>）</e></li><li>泛型类 （<t>）</t></li><li>类型通配符 ？</li><li>类型擦除</li></ol></li><li>JAVA 序列化（创建可复用的Java对象）<ol><li>持久化对象及其状态到内存或者硬盘</li><li>序列化对象 以字节数组保存-静态成员不保存</li><li>序列化用户远程对象传输</li><li>Serializable 实现序列化</li><li>ObjectOutputStream 和 ObjectInputStream 对对象进行序列化和反序列化</li><li>writeObject 和 readObject 自定义序列化策略</li><li>序列化ID</li><li>序列化并不保存静态变量</li><li>序列化子父类说明</li><li>Transient 关键字阻止该变量被序列化到文件中</li></ol></li><li>JAVA 复制<ol><li>直接赋值复制</li><li>浅复制（复制引用但不复制引用的对象）</li><li>深复制（复制对象和其应用对象）</li><li>序列化（深 clone 实现）</li></ol></li></ol></li><li>Spring 原理<ol><li>Spring 特性<ol><li>轻量级</li><li>控制反转</li><li>面向切面</li><li>容器</li><li>框架集合</li></ol></li><li>Spring 核心组件</li><li>Spring 常用模块</li><li>Spring 主要包</li><li>Spring 常用注解</li><li>Spring 第三方结合</li><li>Spring IOC 原理<ol><li>概念</li><li>Spring 容器高层视图</li><li>IOC 容器实现<ol><li>BeanFactory-框架基础设施<ol><li>BeanDefinitionRegistry 注册表</li><li>BeanFactory 顶层接口</li><li>ListableBeanFactory</li><li>HibernarchicalBeanFactory 父子级联</li><li>ConfigurableBeanFactory</li><li>AutowireCapableBeanFacotry自动装配</li><li>SingletonBeanRegistry 运行期间注册单例Bean</li><li>依赖日志框架</li></ol></li><li>ApplicationContext 面向开发应用</li><li>WebApplication 体系架构</li></ol></li><li>Spring Bean 作用域<ol><li>singleton ：单例模式（多线程下不安全）</li><li>prototype ：原型模式，每次使用时创建</li><li>request ： 一次request 一个实例</li><li>session </li><li>global session</li></ol></li><li>Spring Bean 生命周期<ol><li>实例化</li><li>IOC 依赖注入</li><li>setBeanName 实现</li><li>BeanFactoryAware 实现</li><li>ApplicationContextAware 实现</li><li>postProcessBeforeInitialization 接口实现-初始化预处理</li><li>init-method</li><li>postProcessAfterInitialization</li><li>Destroy 过期自动清理阶段</li><li>destroy-method 自配置清理</li></ol></li><li>Spirng 依赖注入四种方式<ol><li>构造器注入</li><li>setter 方法注入</li><li>静态工厂注入</li><li>实例工厂</li></ol></li><li>五种不同方式的自动装配</li></ol></li><li>Spring AOP 原理<ol><li>概念</li><li>AOP 核心概念</li><li>AOP 两种代理方式<ol><li>JDK 动态接口代理</li><li>CGLib 动态代理</li></ol></li><li>实现原理</li></ol></li><li>Spring MVC 原理<ol><li>SpringMVC 流程<ol><li>Http 请求到 DispatcherServlet</li><li>HandlerMapping 寻找处理器</li><li>调用处理器 Controller</li><li>Controller 调用业务逻辑处理后，返回ModelAndView</li><li>DispatcherServlet 查询 ModelAndView</li><li>ModelAndView 反馈浏览器 Http</li></ol></li><li>SpringMVC 常用注解</li></ol></li><li>Spring Boot 原理<ol><li>创建独立的 Spring 应用程序</li><li>嵌入的Tomcat，无需部署War文件</li><li>简化Maven 配置</li><li>自动配置 spirng</li><li>提供生产就绪型功能，如指标、健康检查和外部配置</li><li>绝对没有代码生成和对xml没有要求配置</li></ol></li><li>JPA 原理<ol><li>事务</li><li>本地事务</li><li>分布式事务</li><li>两阶段提交<ol><li>准备阶段</li><li>提交阶段</li></ol></li></ol></li><li>Mybatis 缓存<ol><li>Mybatis 的一级缓存原理（sqlsession 级别）</li><li>二级缓存原理（mapper基本）<ol><li>具体使用需要配置</li></ol></li></ol></li><li>Tomcat架构</li></ol></li><li>微服务<ol><li>服务注册与发现<ol><li>客户端注册（zookeeper）</li><li>第三方注册（独立的服务registrar）</li><li>客户端发现</li><li>服务端发现</li><li>consul</li><li>Eureka</li><li>SmartStack</li><li>Etcd</li></ol></li><li>API网关<ol><li>请求转发</li><li>响应合并</li><li>协议转换</li><li>数据转换</li><li>安全认证</li></ol></li><li>配置中心<ol><li>zookeeper 配置中心</li><li>配置中心数据分类</li></ol></li><li>事件调度（kafka）</li><li>服务跟踪（starter-sleuth）</li><li>服务熔断（hystrix）<ol><li>hystrix 断路器机制</li></ol></li><li>API管理</li></ol></li><li>Netty 和 RPC<ol><li>Netty 原理</li><li>Netty 高性能<ol><li>多路复用通讯方式</li><li>异步通讯 NIO</li><li>零拷贝（Direct Buffers 使用堆外直接内存）</li><li>内存池（基于内存池的缓冲区重用机制）</li><li>高校的Reactor线程模型<ol><li>Reactor 单线程模型</li><li>Reactor 多线程模型</li><li>主从 Reactor 多线程模型</li></ol></li><li>无锁设计、线程绑定</li><li>高性能的序列化框架<ol><li>小包封大包，防止网络阻塞</li><li>软中断 hash 值和 cpu 绑定</li></ol></li></ol></li><li>Netty RPC 实现<ol><li>概念</li><li>关键技术</li><li>核心流程</li><li>消息编解码<ol><li>总数据结构（接口名称+方法名+参数类型和参数值+超时时间+requestID）</li><li>序列化</li></ol></li><li>通讯过程<ol><li>核心问题（线程暂停、消息乱序）</li><li>通讯流程</li><li>requestID 生成 AtomicLong</li><li>存放回调对象 callback 到全局 ConcurrentHashMap</li><li>synchronized 获取回调对象 callback 的锁并自旋wait</li><li>监听消息的线程收到消息，找到calllback上的锁并唤醒</li></ol></li></ol></li><li>RMI 实现方式<ol><li>实现步骤</li></ol></li><li>Protoclol Buffer<ol><li>特点</li></ol></li><li>Thrift</li></ol></li><li>网络</li><li>日志</li><li>Zookeeper</li><li>Kafka</li><li>RabbitMQ</li><li>Hbase</li><li>MongoDB</li><li>Cassandra</li><li><a href="../../../../../06/24/读书笔记/《Java核心知识点整理》/16.设计模式/">24种设计模式</a></li><li>负载均衡</li><li>数据库</li><li>一致性算法</li><li>JAVA 算法<ol><li>二分查找</li><li>冒泡排序算法</li><li>插入排序算法</li><li>快速排序算法</li><li>希尔排序算法</li><li>归并排序算法</li><li>桶排序算法</li><li>基数排序算法</li><li>剪枝算法</li><li>回溯算法</li><li>最短路径算法</li><li>最大子数组算法</li><li>最长公共子序算法</li><li>最小生成树算法</li></ol></li><li>数据结构<ol><li>栈（stack）</li><li>队列（queue）</li><li>链表（link）</li><li>散列表（hash table）</li><li>排序二叉树</li><li>红黑树</li><li>B-Tree</li><li>位图</li></ol></li><li>加密算法<ol><li>AES</li><li>RSA</li><li>CRC</li><li>MD5</li></ol></li><li>分布式缓存<ol><li>缓存雪崩</li><li>缓存穿透</li><li>缓存预热</li><li>缓存更新</li><li>缓存降级</li></ol></li><li>Hadoop</li><li>Spark</li><li>Storm</li><li>Yarn</li><li>机器学习</li><li>云计算</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA 核心知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》读书笔记 - 目录</title>
      <link href="/2019/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/0.%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/11/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/0.%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p><img src="https://luokaiii.oss-cn-shanghai.aliyuncs.com/blog/mysql/mysql-cover.png" alt="高性能MySQL"></p><a id="more"></a><h1 id="高性能-MySQL-读书笔记"><a href="#高性能-MySQL-读书笔记" class="headerlink" title="高性能 MySQL 读书笔记"></a>高性能 MySQL 读书笔记</h1><ol><li>第一章 <a href="../../../../../06/20/读书笔记/《高性能MySQL》/1.数据库设计规范/">数据库设计规范</a></li><li>第二章 <a href="../../../../../06/20/读书笔记/《高性能MySQL》/2.数据库字段设计规范/">数据库字段设计规范</a></li><li>第三章 <a href="../../../../../06/20/读书笔记/《高性能MySQL》/3.数据库SQL开发规范/">数据库 SQL 开发规范</a></li><li>第四章 <a href="../../../../../06/20/读书笔记/《高性能MySQL》/4.数据库操作行为规范/">数据库操作行为规范</a></li><li>第五章 <a href="../../../../../06/21/读书笔记/《高性能MySQL》/5.设计数据库分区表/">设计数据库分区表</a></li><li>第六章 <a href="../../../../../06/21/读书笔记/《高性能MySQL》/6.MySQL存储引擎/">MySQL存储引擎</a></li><li>第七章 <a href="../../../../../06/21/读书笔记/《高性能MySQL》/7.MySQL执行计划优化/">MySQL 执行优化</a></li><li>第八章 <a href="../../../../../06/21/读书笔记/《高性能MySQL》/8.MySQL慢查日志/">MySQL 慢查询日志</a></li><li>第九章 <a href="../../../../../06/23/读书笔记/《高性能MySQL》/9.数据库备份/">MySQL 数据库备份与恢复</a></li><li>第十章 <a href="../../../../../06/23/读书笔记/《高性能MySQL》/10.MySQL架构拆分/">MySQL构架拆分</a></li><li>其他：<a href="../../../../../06/23/读书笔记/《高性能MySQL》/20.数据库表结构实践/">MySQL表结构实践sql</a></li></ol><p>本笔记来自于慕课网视频：<a href="https://coding.imooc.com/class/79.html" target="_blank" rel="noopener">高性能可扩展MySQL数据库架构设计与优化</a></p>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈：六、部署Nginx和React</title>
      <link href="/2019/09/24/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/7.Docker-Compose/"/>
      <url>/2019/09/24/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/7.Docker-Compose/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署全栈项目：七、Docker-Compose"><a href="#Docker部署全栈项目：七、Docker-Compose" class="headerlink" title="Docker部署全栈项目：七、Docker-Compose"></a>Docker部署全栈项目：七、Docker-Compose</h1><p>完整的 <code>docker-compose.yml</code> 如下：</p><pre class=" language-yml"><code class="language-yml">version: '3'services:  mongo:    container_name: 'luokaiii-mongo'    image: 'mongo:4.0.12'    volumes:      - mongodata:/data/db    environment:      MONGO_INITDB_ROOT_USERNAME: mongoadmin      MONGO_INITDB_ROOT_PASSWORD: password    restart: always    expose:      - '27017'  mariadb:    container_name: 'luokaiii-mysql'    image: 'mariadb:10.4.8'    volumes:      - './mysql/data/:/var/lib/mysql'      - './mysql/conf/local.cnf:/etc/mysql/conf.d/local.cnf'    environment:      MYSQL_ROOT_PASSWORD: password      MYSQL_DATABASE: db_user    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']    restart: always    expose:      - '3306'  redis:    container_name: 'luokaiii-redis'    image: 'redis:4.0.14'    volumes:      - './redis/data:/data'    command: redis-server --requirepass password    restart: always    expose:      - '6379'  api:    container_name: 'luokaiii-api'    depends_on:      - mongo      - redis      - mariadb    image: 'luokaiii-api:latest'    ports:      - '8080:8080'    restart: always  nginx:    container_name: 'luokaiii-nginx'    depends_on:      - api    image: 'nginx:alpine'    volumes:      - './nginx/conf:/etc/nginx/conf.d'      - './nginx/html:/usr/www/luokaiii/cn/html'    ports:      - '80:80'    restart: alwaysvolumes:  mongodata:</code></pre><p>部署后的效果如下：</p><p><img src="https://i.loli.net/2019/09/24/sGQzv4oBC9cyTN2.png" alt="Docker单机服务"></p><p>至此，整个项目在Docker上的部署已经完成。</p><blockquote><p>如果有需要，您也可以将 MongoDB、Redis、MySQL等服务暴露给宿主机，以供外部连接。</p></blockquote><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈：六、部署Nginx和React</title>
      <link href="/2019/09/24/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/6.Nginx/"/>
      <url>/2019/09/24/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/6.Nginx/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署全栈项目：六、部署Nginx和React"><a href="#Docker部署全栈项目：六、部署Nginx和React" class="headerlink" title="Docker部署全栈项目：六、部署Nginx和React"></a>Docker部署全栈项目：六、部署Nginx和React</h1><p>前端项目不论是 vue 还是 react，编译之后都是 html + css +js 的模板。</p><p>因此这里使用 <code>React Demo</code> 来演示如何部署前端项目至，Nginx的代理中。</p><h2 id="一、创建React项目"><a href="#一、创建React项目" class="headerlink" title="一、创建React项目"></a>一、创建React项目</h2><p>如果你使用的是其它前端语言，或者直接是纯JS写法，都是大同小异。</p><pre class=" language-sh"><code class="language-sh"># 创建React项目$ create-react-app web# 进入前端项目$ cd web# 构建项目(或者使用 npm run build)$ yarn build # 构建完成后，会出现 build/ 目录，存放所有的静态资源文件</code></pre><p>将构建后的数据，放到 nginx/html 目录下。</p><blockquote><p>如果是远程服务器，可以使用 scp、pscp 等命令发送文件。</p></blockquote><h2 id="二、启动Nginx"><a href="#二、启动Nginx" class="headerlink" title="二、启动Nginx"></a>二、启动Nginx</h2><h3 id="1-编写-start-sh"><a href="#1-编写-start-sh" class="headerlink" title="1. 编写 start.sh"></a>1. 编写 start.sh</h3><pre class=" language-sh"><code class="language-sh">#!/bin/bash# 启动前停止容器docker stop luokaiii-nginxdocker rm luokaiii-nginx# 运行容器docker run --name luokaiii-nginx \ # 指定容器名        -p 80:80 \    # 暴露80端口至宿主机        -v /${PWD}/conf:/etc/nginx/conf.d \    # 挂载额外的配置文件        -v /${PWD}/html:/usr/www/luokaiii/cn/html \    # 挂载静态资源        -d nginx:alpine     # 后台运行nginx</code></pre><h3 id="2-编写-conf-nginx-conf"><a href="#2-编写-conf-nginx-conf" class="headerlink" title="2. 编写 conf/nginx.conf"></a>2. 编写 conf/nginx.conf</h3><pre class=" language-sh"><code class="language-sh">server {        listen 80;        root /usr/www/luokaiii/cn/html;        location / {                try_files $uri $uri/ /index.html;        }}</code></pre><h3 id="3-运行脚本"><a href="#3-运行脚本" class="headerlink" title="3. 运行脚本"></a>3. 运行脚本</h3><pre class=" language-sh"><code class="language-sh"># 运行脚本$ ./start.sh</code></pre><h3 id="4-访问端口"><a href="#4-访问端口" class="headerlink" title="4. 访问端口"></a>4. 访问端口</h3><p><img src="https://i.loli.net/2019/09/24/ur4k3zwVv1AYeZX.png" alt="访问80端口"></p><h2 id="三、使用Nginx代理接口服务"><a href="#三、使用Nginx代理接口服务" class="headerlink" title="三、使用Nginx代理接口服务"></a>三、使用Nginx代理接口服务</h2><p>既然我们的接口使用的是容器服务，那么我可以把 <code>luokaiii-api</code> 的外部端口关闭，改为 nginx 的请求转发。</p><p>修改 nginx.conf：</p><pre class=" language-sh"><code class="language-sh">upstream apisupport {        server api:8080;}server {        listen 80;        root /usr/www/luokaiii/cn/html;        location / {                try_files $uri $uri/ /index.html;        }        # 将 /api/ 请求转发至 `luokaiii-api` 服务        location /api/ {                proxy_pass http://apisupport/;        }}</code></pre><p>请求测试：</p><p><img src="https://i.loli.net/2019/09/24/zx2qnsV7OCurgSH.png" alt="请求结果"></p><p>参考资料：</p><ol><li><a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener">Docker Hub</a></li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈：五、Docker-Compose部署SpringBoot</title>
      <link href="/2019/09/24/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/5.SpringBoot/"/>
      <url>/2019/09/24/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/5.SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署全栈项目：五、SpringBoot-Jar"><a href="#Docker部署全栈项目：五、SpringBoot-Jar" class="headerlink" title="Docker部署全栈项目：五、SpringBoot Jar"></a>Docker部署全栈项目：五、SpringBoot Jar</h1><h2 id="一、创建-SpringBoot-项目"><a href="#一、创建-SpringBoot-项目" class="headerlink" title="一、创建 SpringBoot 项目"></a>一、创建 SpringBoot 项目</h2><h3 id="1-创建接口"><a href="#1-创建接口" class="headerlink" title="1. 创建接口"></a>1. 创建接口</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EntityScan</span><span class="token punctuation">(</span><span class="token string">"cn.luokaiii.api.entity"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> UserMongoService mongoService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> UserMySQLService mySQLService<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">ApiApplication</span><span class="token punctuation">(</span>UserMongoService mongoService<span class="token punctuation">,</span>                          UserMySQLService mySQLService<span class="token punctuation">,</span>                          StringRedisTemplate stringRedisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mongoService <span class="token operator">=</span> mongoService<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mySQLService <span class="token operator">=</span> mySQLService<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stringRedisTemplate <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ApiApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">createByMySql</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Person save <span class="token operator">=</span> mySQLService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> User user <span class="token operator">=</span> mongoService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UPDTO</span><span class="token punctuation">(</span>save<span class="token punctuation">,</span> user<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> ResponseEntity <span class="token function">getByMySql</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Person person <span class="token operator">=</span> mySQLService<span class="token punctuation">.</span><span class="token function">findFirstByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> User user <span class="token operator">=</span> mongoService<span class="token punctuation">.</span><span class="token function">findFirstByName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String redis <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UPDTO</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> user<span class="token punctuation">,</span> redis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-配置参数"><a href="#2-配置参数" class="headerlink" title="2. 配置参数"></a>2. 配置参数</h3><p>连上我们之前配置的MongoDB、MySQL、Redis容器。</p><blockquote><p>这里使用配置的 docker-compose 中的服务名称。这样服务会自动连接，而 <code>localhost</code> 或者 <code>127.0.0.1</code> 则表示 <code>luokaiii-api</code> 当前容器内部的端口号，肯定会连接失败的。</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># MongoDB 连接</span><span class="token attr-name">spring.data.mongodb.uri</span><span class="token punctuation">=</span><span class="token attr-value">mongodb://mongoadmin:password@mongo:27017/demo?authSource=admin</span><span class="token comment" spellcheck="true"># MySQL 连接</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://mariadb:3306/db_user?useUnicode=true&amp;characterEncoding=GBK&amp;useSSL=false</span><span class="token comment" spellcheck="true"># Redis 连接</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">redis</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span></code></pre><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><p>执行如下 Post 命令：</p><pre class=" language-sh"><code class="language-sh"># Post 请求$ curl -i -X POST  -H "Content-Type:application/json" -d '{ "id":2, "name":"zhangsan", "sex":1 }' 'http://localhost:8080/'# 返回结果{"mysql":{"id":2,"name":"zhangsan","sex":1},"mongo":{"id":"2","name":"zhangsan","age":22},"redis":null}</code></pre><p>执行如下 Get 命令：</p><pre class=" language-sh"><code class="language-sh"># Get 请求$ curl -i -X GET 'http://localhost:8080?username=zhangsan'# 返回结果{"mysql":{"id":2,"name":"zhangsan","sex":1},"mongo":{"id":"2","name":"zhangsan","age":22},"redis":"1"}</code></pre><h2 id="二、构建-Docker-镜像"><a href="#二、构建-Docker-镜像" class="headerlink" title="二、构建 Docker 镜像"></a>二、构建 Docker 镜像</h2><h3 id="1-pom-xml-中增加-docker-插件"><a href="#1-pom-xml-中增加-docker-插件" class="headerlink" title="1. pom.xml 中增加 docker 插件"></a>1. pom.xml 中增加 docker 插件</h3><p>完整的 <code>pom.xml</code> 如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 当前项目的版本、名称等信息 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.luokaiii<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>java api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- JDK版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring Data JPA --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring Data MongoDB --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Spring Data Redis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- Web 服务器 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- MySQL驱动连接 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 测试 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Maven 插件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- Docker Maven 插件 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.spotify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>docker-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 构建出的镜像名 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>imageName</span><span class="token punctuation">></span></span>luokaiii-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>imageName</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 基础依赖的镜像 --></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>baseImage</span><span class="token punctuation">></span></span>openjdk:8-slim<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>baseImage</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entryPoint</span><span class="token punctuation">></span></span>["java", "-jar", "/${project.build.finalName}.jar"]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entryPoint</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>${project.build.directory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>${project.build.finalName}.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="2-构建镜像"><a href="#2-构建镜像" class="headerlink" title="2. 构建镜像"></a>2. 构建镜像</h3><pre class=" language-sh"><code class="language-sh"># mvn clean package 重新打包， -Dmaven.test.skip 跳过测试，docker:build 构建镜像$ mvn clean package -Dmaven.test.skip=true docker:build</code></pre><blockquote><p>正常的生产环境，应该有严格的单元测试。</p></blockquote><p>查看 Docker Images (<code>$ docker images</code>)，应该有如下几个镜像了：</p><p><img src="https://i.loli.net/2019/09/24/XfK9C25qhBNSERr.png" alt="图：Docker Images"></p><p>带上之前的镜像，一共有如下几个：<code>luokaiii-api</code> ，<code>mongo:4.0.12</code> ，<code>mariadb:10.4.8</code> ，<code>openjdk:8-slim</code>， <code>redis:4.0.14</code></p><h3 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3. 测试"></a>3. 测试</h3><h4 id="a-启动-luokaiii-api-镜像"><a href="#a-启动-luokaiii-api-镜像" class="headerlink" title="a) 启动 luokaiii-api 镜像"></a>a) 启动 <code>luokaiii-api</code> 镜像</h4><p>这里我们直接使用了 Docker-Compose 来启动该镜像，因为 <code>luokaiii-api</code> 依赖了如 <code>mongodb</code>，<code>mariadb</code>，<code>redis</code> 等其他镜像容器。</p><h4 id="a-1-在父级目录下创建-docker-compose-yml-文件"><a href="#a-1-在父级目录下创建-docker-compose-yml-文件" class="headerlink" title="a.1 在父级目录下创建 docker-compose.yml 文件"></a>a.1 在父级目录下创建 docker-compose.yml 文件</h4><blockquote><p> 不再开放mongo、mysql、redis的外部连接，统一改为容器内部通信，只对外提供一个 8080 端口用于访问。</p></blockquote><p><code>docker-compose.yml</code> 文件如下：</p><pre class=" language-yml"><code class="language-yml"># Docker-Compose 的版本version: '3'# 服务声明services:  # MongoDB 服务  mongo:    container_name: 'luokaiii-mongo'    image: 'mongo:4.0.12'    volumes:      - mongodata:/data/db    environment:      MONGO_INITDB_ROOT_USERNAME: mongoadmin      MONGO_INITDB_ROOT_PASSWORD: password    restart: always    expose:    # 暴露端口，但不映射到宿主机      - '27017'  # MariaDB 服务  mariadb:    container_name: 'luokaiii-mysql'    image: 'mariadb:10.4.8'    volumes:      - './mysql/data/:/var/lib/mysql'      - './mysql/conf/local.cnf:/etc/mysql/conf.d/local.cnf'    environment:      MYSQL_ROOT_PASSWORD: password      MYSQL_DATABASE: db_user    command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci']    restart: always    expose:      - '3306'  # Redis 服务  redis:    container_name: 'luokaiii-redis'    image: 'redis:4.0.14'    volumes:      - './redis/data:/data'    command: redis-server --requirepass password    restart: always    expose:      - '6379'  # Java API 服务  api:    container_name: 'luokaiii-api'    depends_on: # 依赖其他容器(如DB连接等)      - mongo      - redis      - mariadb    image: 'luokaiii-api:latest'    ports:    # 对外暴露 8080 端口      - '8080:8080'    restart: always# 容器能够使用的数据卷volumes:  mongodata:</code></pre><h4 id="a-2-修改之前的-application-properties"><a href="#a-2-修改之前的-application-properties" class="headerlink" title="a.2 修改之前的 application.properties"></a>a.2 修改之前的 application.properties</h4><p>将 <code>localhost</code> 全部改为对应 <code>Compose</code> 的服务名称，这样 容器在运行时会动态加载对应的服务及端口。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># MongoDB 连接</span><span class="token attr-name">spring.data.mongodb.uri</span><span class="token punctuation">=</span><span class="token attr-value">mongodb://mongoadmin:password@mongo:27017/demo?authSource=admin</span><span class="token comment" spellcheck="true"># MySQL 连接</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://mariadb:3306/db_user?useUnicode=true&amp;characterEncoding=GBK&amp;useSSL=false</span><span class="token comment" spellcheck="true"># Redis 连接</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">redis</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">password</span></code></pre><h4 id="a-3-运行-docker-compose"><a href="#a-3-运行-docker-compose" class="headerlink" title="a.3 运行 docker-compose"></a>a.3 运行 docker-compose</h4><pre class=" language-sh"><code class="language-sh"># 后台运行所有容器$ docker-compose -d up# 停止所有容器# docker-compose down# 停止单个容器# docker-compose stop luokaiii-api# 运行单个容器(停止状态)# docker-compose start luokaiii-api# 运行单个容器(被删除后)# docker-compose run --name luokaiii-api luokaiii-api</code></pre><h4 id="a-4-依次查看容器的日志"><a href="#a-4-依次查看容器的日志" class="headerlink" title="a.4 依次查看容器的日志"></a>a.4 依次查看容器的日志</h4><p>控制台打印的日志太过混乱，这里我们一个一个的查看：</p><pre class=" language-sh"><code class="language-sh"># 查看 MongoDB 运行情况$ docker logs luokaiii-mongo</code></pre><p><img src="https://i.loli.net/2019/09/24/VDTEhsdHlyFC1Zi.png" alt="MongoDB运行情况"></p><pre class=" language-sh"><code class="language-sh"># 查看 MariaDB 运行情况$ docker logs luokaiii-mysql</code></pre><p><img src="https://i.loli.net/2019/09/24/POFBid9THoQbWNg.png" alt="MariaDB运行情况"></p><pre class=" language-sh"><code class="language-sh"># 查看 Redis 运行情况$ docker logs luokaiii-redis</code></pre><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\1569306056942.png" alt="Redis 运行情况"></p><pre class=" language-sh"><code class="language-sh"># 查看 JAVA Server 运行情况$ docker logs luokaiii-api</code></pre><p><img src="https://i.loli.net/2019/09/24/tUzEfZaIGOLouvP.png" alt="Java运行状况"></p><h3 id="b-生成数据表"><a href="#b-生成数据表" class="headerlink" title="b. 生成数据表"></a>b. 生成数据表</h3><p>进入 <code>luokaiii-mysql</code> 容器，进入 MySQL，生成 person 表。 发送请求即可。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-MongoDB无法挂载data目录"><a href="#1-MongoDB无法挂载data目录" class="headerlink" title="1. MongoDB无法挂载data目录"></a>1. MongoDB无法挂载data目录</h3><p>按照正常来说，<code>mongo</code> 服务的编排应该如下所示：</p><pre class=" language-yml"><code class="language-yml">services:  mongo:    container_name: 'luokaiii-mongo'    image: 'mongo:4.0.12'    volumes:      - ./mongo/db:/data/db    environment:      MONGO_INITDB_ROOT_USERNAME: mongoadmin      MONGO_INITDB_ROOT_PASSWORD: password    restart: always    expose:      - '27017'......</code></pre><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>这样的挂载，却会抛出文件无法打开、无法读取、无法写入的问题。详见 <a href="https://github.com/docker-library/mongo/issues/74" target="_blank" rel="noopener">Github Issue</a>。</p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>Docker 中的 Mongo 容器无法使用部分文件。</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>手动创建一个共享卷，即如下改动：</p><pre class=" language-yml"><code class="language-yml">services:  mongo:    container_name: 'luokaiii-mongo'    image: 'mongo:4.0.12'    volumes:      - mongodata:/data/db   # 这里改为下面声明的卷    environment:      MONGO_INITDB_ROOT_USERNAME: mongoadmin      MONGO_INITDB_ROOT_PASSWORD: password    restart: always    expose:      - '27017'......volumes:  mongodata:</code></pre><blockquote><p><code>$ docker volume list</code> 能够查看所有共享的卷</p><p><code>$ docker volume inspect &lt;name&gt;</code> 能够查看具体的卷信息(如实际地址等)</p></blockquote><h3 id="2-MySQL-初始密码未生效"><a href="#2-MySQL-初始密码未生效" class="headerlink" title="2. MySQL 初始密码未生效"></a>2. MySQL 初始密码未生效</h3><h4 id="问题：-1"><a href="#问题：-1" class="headerlink" title="问题："></a>问题：</h4><p>在使用 <code>docker-compose up</code> 启动完所有程序后，<code>luokaiii-api</code> 项目抛出 “无法连接 MySQL 数据库的异常”。</p><p>而我们在 <code>docker-compose.yml</code> 中已经指定了具体的初始密码:</p><pre class=" language-yml"><code class="language-yml">MYSQL_ROOT_PASSWORD: password</code></pre><h4 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h4><p>经排查发现，是 <code>luokaiii-mysql</code> 容器的密码未初始化。</p><h4 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h4><p>依次运行以下代码：</p><pre class=" language-sh"><code class="language-sh"># 进入 MySQL 容器(Windows需要加上 `winpty`)$ docker exec -it luokaiii-mysql bash# 匹配环境变量root@xx/# env | grep -i passwordMYSQL_ROOT_PASSWORD=password# 尝试无密码登录 - 失败root@xx/# mysql -UrootERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: NO)# 尝试使用密码登录，成功？？？？为什么？？？root@xx/# mysql -Uroot -ppassword</code></pre><p>详见 <a href="https://github.com/docker-library/mysql/issues/557" target="_blank" rel="noopener">Github Issue</a>。</p><blockquote><p>首次操作即可，往后未出现该bug。</p></blockquote><p>参考资料：</p><ol><li><a href="https://github.com/spotify/docker-maven-plugin" target="_blank" rel="noopener">Docker-maven-plugin</a></li><li><a href="https://hub.docker.com/_/openjdk" target="_blank" rel="noopener">Docker Hub OpenJDK</a></li><li><a href="https://stackoverflow.com/questions/45729326/how-to-change-the-default-character-set-of-mysql-using-docker-compose" target="_blank" rel="noopener">https://stackoverflow.com/questions/45729326/how-to-change-the-default-character-set-of-mysql-using-docker-compose</a></li><li><a href="https://www.hi-linux.com/posts/12554.html" target="_blank" rel="noopener">运维之美</a></li><li><a href="https://github.com/docker-library/mysql/issues/557" target="_blank" rel="noopener">https://github.com/docker-library/mysql/issues/557</a></li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈：四、安装MySQL</title>
      <link href="/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/4.MariaDB/"/>
      <url>/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/4.MariaDB/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署全栈项目：四、MySQL-镜像"><a href="#Docker部署全栈项目：四、MySQL-镜像" class="headerlink" title="Docker部署全栈项目：四、MySQL 镜像"></a>Docker部署全栈项目：四、MySQL 镜像</h1><p>这里使用的是 MariaDB 镜像，与 MySQL 一样。</p><h2 id="一、编写启动脚本"><a href="#一、编写启动脚本" class="headerlink" title="一、编写启动脚本"></a>一、编写启动脚本</h2><h2 id="1-start-sh"><a href="#1-start-sh" class="headerlink" title="1. start.sh"></a>1. start.sh</h2><pre class=" language-sh"><code class="language-sh">#!/bin/bash# 启动前先尝试停止该服务docker stop luokaiii-mysqldocker rm luokaiii-mysql# 运行服务docker run --name luokaiii-mysql \ # 指定容器服务名称        -p 3307:3306 \ # 将容器的3306端口映射到宿主机的3307端口        -v /${PWD}/conf/local.cnf:/etc/mysql/conf.d/local.cnf \ # 使用自定义的配置文件(Windows环境下必不可少！)        -v /${PWD}/data:/var/lib/mysql \ # 挂载数据目录        -e MYSQL_ROOT_PASSWORD=password \ # MySQL初始密码        -d mariadb:10.4.8 \ # 后台运行指定版本        --character-set-server=utf8mb4 \ # 指定字符集        --collation-server=utf8mb4_unicode_ci</code></pre><h3 id="2-conf-local-cnf"><a href="#2-conf-local-cnf" class="headerlink" title="2. conf/local.cnf"></a>2. conf/local.cnf</h3><p>指定 InnoDB 的刷新方法，否则会出现数据目录无法挂载的异常。当出现该异常后，请先清空 <code>./data</code> 目录。</p><pre class=" language-cnf"><code class="language-cnf">[mysqld]innodb_flush_method=O_DSYNC</code></pre><p><img src="https://i.loli.net/2019/09/23/6EcOuQZePBIXRvq.png" alt="数据无法挂载，data目录未清空"></p><h2 id="二、执行启动脚本"><a href="#二、执行启动脚本" class="headerlink" title="二、执行启动脚本"></a>二、执行启动脚本</h2><pre class=" language-sh"><code class="language-sh">$ cd /home/luokaiii/images/mysql   # 脚本和DB文件的存放位置$ mkdir data   # 创建存储目录$ vim conf/local.cnf  # 编写配置文件，填入innodb_flush_method=O_DSYNC$ ./start.sh   # 运行刚刚写的脚本994e9e05bb42d1d.....  # 控制台打印这种的，即表示启动成功</code></pre><h2 id="三、测试连接"><a href="#三、测试连接" class="headerlink" title="三、测试连接"></a>三、测试连接</h2><p><img src="https://i.loli.net/2019/09/23/EUrI5Cu6HRN2gSK.png" alt="连接MySQL"></p><h2 id="四、遇到的问题"><a href="#四、遇到的问题" class="headerlink" title="四、遇到的问题"></a>四、遇到的问题</h2><h3 id="1-问题：在-Windows-环境下，无法挂载-数据目录-至容器中。"><a href="#1-问题：在-Windows-环境下，无法挂载-数据目录-至容器中。" class="headerlink" title="1. 问题：在 Windows 环境下，无法挂载 数据目录 至容器中。"></a>1. 问题：在 Windows 环境下，无法挂载 数据目录 至容器中。</h3><p><img src="https://i.loli.net/2019/09/24/dWpOrvMy5eXznNg.png" alt="图：启动失败，无法挂载数据目录"></p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>未指定 <code>innodb_flush_method=O_DSYNC</code>。</p><blockquote><p>Linux 环境下不需要</p></blockquote><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ol><li>编写 <code>/conf/local.cnf</code> 并挂载到 <code>mariadb 容器</code> 中</li><li>删除之前 ./data 下的所有数据</li><li>并重新执行启动脚本</li></ol><p>参考资料：</p><ol><li><a href="https://hub.docker.com/_/mariadb" target="_blank" rel="noopener">Docker Hub</a></li><li><a href="https://github.com/docker-library/mariadb/issues/38" target="_blank" rel="noopener">Github Issue</a></li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈：三、安装Redis</title>
      <link href="/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/3.Redis/"/>
      <url>/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/3.Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署全栈项目：三、Redis-镜像"><a href="#Docker部署全栈项目：三、Redis-镜像" class="headerlink" title="Docker部署全栈项目：三、Redis 镜像"></a>Docker部署全栈项目：三、Redis 镜像</h1><h2 id="一、编写启动脚本"><a href="#一、编写启动脚本" class="headerlink" title="一、编写启动脚本"></a>一、编写启动脚本</h2><pre class=" language-sh"><code class="language-sh">#!/bin/bashcurr=`PWD`# 运行前先停止原有容器docker stop luokaiii-redisdocker rm luokaiii-redis# docker run 运行容器docker run --name luokaiii-redis \ # 指定运行后的容器名称        -p 7481:6379 \    # 将容器的6379端口映射到宿主机的7481端口        -v /${curr}/data/:/data \ # 挂载redis持久化的目录到宿主机        -d redis:4.0.14 \        --requirepass "password" # 指定redis的连接密码</code></pre><blockquote><p>如果需要使用 conf 自定义配置，请参考 <a href="http://download.redis.io/redis-stable/redis.conf" target="_blank" rel="noopener">官网提供的 redis.conf</a> 。</p><p>Redis 的执行速度特别快，能到做到 15W/s 的查询，因此推荐使用较为复杂的密码。</p></blockquote><h2 id="二、启动脚本"><a href="#二、启动脚本" class="headerlink" title="二、启动脚本"></a>二、启动脚本</h2><pre class=" language-sh"><code class="language-sh">$ cd /home/luokaiii/images/redis   # 脚本和DB文件的存放位置$ mkdir data   # 创建存储目录$ ./start.sh   # 运行刚刚写的脚本994e9e05bb42d1d.....  # 控制台打印这种的，即表示启动成功</code></pre><h2 id="三、日志解释"><a href="#三、日志解释" class="headerlink" title="三、日志解释"></a>三、日志解释</h2><pre class=" language-tex"><code class="language-tex"># Redis 启动、配置加载1:C 23 Sep 08:55:24.988 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo1:C 23 Sep 08:55:24.988 # Redis version=4.0.14, bits=64, commit=00000000, modified=0, pid=1, just started1:C 23 Sep 08:55:24.989 # Configuration loaded1:M 23 Sep 08:55:24.992 * Running mode=standalone, port=6379.# Redis 启动成功1:M 23 Sep 08:55:24.993 * Ready to accept connections</code></pre><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p><img src="https://i.loli.net/2019/09/23/YH3OnIpa7G2vieK.png" alt="图：连接测试"></p><h2 id="五、遇到的问题"><a href="#五、遇到的问题" class="headerlink" title="五、遇到的问题"></a>五、遇到的问题</h2><h3 id="1-在-windows-下使用-redis-conf，失败"><a href="#1-在-windows-下使用-redis-conf，失败" class="headerlink" title="1. 在 windows 下使用 redis.conf，失败"></a>1. 在 windows 下使用 redis.conf，失败</h3><p>使用 redis.conf 的 Redis 启动脚本，配置来源于 <a href="http://download.redis.io/redis-stable/redis.conf" target="_blank" rel="noopener">官网提供的 redis.conf</a>，且未做任何修改。</p><pre class=" language-sh"><code class="language-sh">docker run --name luokaiii-redis \ # 指定运行后的容器名称        -p 7481:6379 \    # 将容器的6379端口映射到宿主机的7481端口        -v /${PWD}/data/:/data \ # 挂载redis持久化的目录到宿主机        -v /${PWD}/redis.conf:/usr/local/etc/redis/redis.conf \ # 挂载redis.conf        -d redis:4.0.14 \ # 后台运行容器        redis-server /usr/local/etc/redis/redis.conf</code></pre><p>执行脚本参考自 <a href="https://hub.docker.com/_/redis?tab=description" target="_blank" rel="noopener">Docker Hub</a>。</p><p><img src="https://i.loli.net/2019/09/23/DvtaXPkubZUJL6A.png" alt="图：DockerHub提供的redis启动脚本"></p><h4 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h4><pre class=" language-sh"><code class="language-sh">1:C 23 Sep 08:43:00.482 # Fatal error, can't open config file 'C:/Program Files/Git/usr/local/etc/redis/redis.conf'</code></pre><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>未知。不明白为什么 Docker Container 会提示出 ‘C:/…’ 路径。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>Windows 环境不使用 redis.conf. </p><blockquote><p>Ubuntu 下使用相同配置并无问题。以下是部署流程：</p></blockquote><p><img src="https://i.loli.net/2019/09/23/mXkanxRFu8HIYfi.png" alt="Linux下配置"></p><p>连接验证：</p><p><img src="https://i.loli.net/2019/09/23/i7rZhyLgPHwbnDI.png" alt="连接Linux下的Redis"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈：二、安装MongoDB</title>
      <link href="/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/2.MongoDB/"/>
      <url>/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/2.MongoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署全栈项目：二、MongoDB-镜像"><a href="#Docker部署全栈项目：二、MongoDB-镜像" class="headerlink" title="Docker部署全栈项目：二、MongoDB 镜像"></a>Docker部署全栈项目：二、MongoDB 镜像</h1><h2 id="一、编写启动脚本"><a href="#一、编写启动脚本" class="headerlink" title="一、编写启动脚本"></a>一、编写启动脚本</h2><pre class=" language-sh"><code class="language-sh">#!/bin/bashcur_dir=`pwd`# 停止并删除原有容器docker stop luokaiii-mongodocker rm luokaiii-mongo# docker run 运行镜像docker run --name luokaiii-mongo \ # --name 指定运行后的容器名称        -v /${cur_dir}/data:/data/db \ # -v 挂载本地目录到容器中(也就是将容器中的数据保存到宿主机)        -p 27016:27017 \ # 将容器的27017端口映射到宿主机的27016端口        -e MONGO_INITDB_ROOT_USERNAME=mongoadmin \ # 指定mongo初始账户名称(可以在运行第一次之后，将账号密码这两条删除，以免密码泄露)        -e MONGO_INITDB_ROOT_PASSWORD=password \ # 指定mongo初始账户密码        -d mongo:4.0.12 # -d 后台运行；mongo:xx 运行的mongo版本(如果不加版本则默认为lastest)</code></pre><h2 id="二、运行脚本"><a href="#二、运行脚本" class="headerlink" title="二、运行脚本"></a>二、运行脚本</h2><p>在运行脚本前，需要先将存放数据的目录创建出来：</p><pre class=" language-sh"><code class="language-sh">$ cd /home/luokaiii/images/mongo   # 脚本和DB文件的存放位置$ mkdir data   # 创建存储目录$ ./start.sh   # 运行刚刚写的脚本994e9e05bb42d1d.....  # 控制台打印这种的，即表示启动成功</code></pre><blockquote><p>上述写法，不限于 Windows 还是 Linux。</p><p>但是如果 Windows 无法执行 sh 文件，请将 CMD 命令行换成 Git Bash 命令行。</p></blockquote><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><h3 id="1-浏览器访问27016端口"><a href="#1-浏览器访问27016端口" class="headerlink" title="1. 浏览器访问27016端口"></a>1. 浏览器访问27016端口</h3><p><img src="https://i.loli.net/2019/09/23/CImfovdxUe8MTlF.png" alt="浏览器访问27016端口"></p><h3 id="2-使用-Client-工具连接"><a href="#2-使用-Client-工具连接" class="headerlink" title="2. 使用 Client 工具连接"></a>2. 使用 Client 工具连接</h3><p><img src="https://i.loli.net/2019/09/23/C7erc6XbknyL4PO.png" alt="NoSQL工具连接"></p><h2 id="四、日志解释"><a href="#四、日志解释" class="headerlink" title="四、日志解释"></a>四、日志解释</h2><pre class=" language-tex"><code class="language-tex"># MongoDB 启动进程，端口、数据目录、版本2019-09-23T07:19:56.012+0000 I CONTROL  [initandlisten] MongoDB starting : pid=25 port=27017 dbpath=/data/db 64-bit host=abeb2ca8fece2019-09-23T07:19:56.012+0000 I CONTROL  [initandlisten] db version v4.0.12# 插入用户成功Successfully added user: {        "user" : "mongoadmin",        "roles" : [                {                        "role" : "root",                        "db" : "admin"                }        ]}# MongoDB 显式地留给用户的身份验证/usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*# MongoDB 启动成功MongoDB init process complete; ready for start up.</code></pre><blockquote><p>关于Linux版本如何运行，将放在Docker-Compose集中部署时一起写。</p></blockquote><p>参考资料：</p><ol><li><a href="https://hub.docker.com/_/mongo" target="_blank" rel="noopener">Docker Hub</a></li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈：一、安装Docker环境</title>
      <link href="/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/1.Docker/"/>
      <url>/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/1.Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker部署全栈项目：一、安装Docker-环境"><a href="#Docker部署全栈项目：一、安装Docker-环境" class="headerlink" title="Docker部署全栈项目：一、安装Docker 环境"></a>Docker部署全栈项目：一、安装Docker 环境</h1><h2 id="一、Win-10-环境下安装"><a href="#一、Win-10-环境下安装" class="headerlink" title="一、Win 10 环境下安装"></a>一、Win 10 环境下安装</h2><h3 id="1-安装前提"><a href="#1-安装前提" class="headerlink" title="1. 安装前提"></a>1. 安装前提</h3><ol><li>需要 Windows 10 64位的系统</li><li>在 Windows 功能 中开启 Hyper-V 功能</li><li>下载 <a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">Docker Desktop for windows</a>，双击运行安装即可</li></ol><p><img src="https://i.loli.net/2019/09/23/7LRW5fCIO316Z2v.png" alt="图：开启Hyper-V功能"></p><h3 id="2-国内镜像加速"><a href="#2-国内镜像加速" class="headerlink" title="2. 国内镜像加速"></a>2. 国内镜像加速</h3><p>右键任务栏中的鲸鱼图标，进入 Settings &gt; Daemon，写入如下配置：</p><p><img src="https://i.loli.net/2019/09/23/iX3yz6mGHOgK9Vn.png" alt="图：配置镜像加速源"></p><blockquote><p>建议同时配置多个镜像，避免单个镜像服务宕机。</p></blockquote><h3 id="3-共享磁盘"><a href="#3-共享磁盘" class="headerlink" title="3. 共享磁盘"></a>3. 共享磁盘</h3><p>配置了磁盘共享后，Docker 才能够直接访问共享文件夹中的文件。</p><p><img src="https://i.loli.net/2019/09/23/xyfsne7NE6pj2VZ.png" alt="图：配置共享磁盘"></p><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>打开 <code>Git Bash</code> 或 <code>CMD</code> 命令行，查看 docker 版本：</p><pre class=" language-sh"><code class="language-sh">$ docker --versionDocker version 19.03.1</code></pre><p>至此，Docker 安装成功。</p><p>拉取并运行一个 <code>hello-world</code> 镜像：</p><pre class=" language-sh"><code class="language-sh">$ docker run hello-world</code></pre><p>Docker 会依次进行：查找本地镜像 &gt; 拉取远程镜像 &gt; 运行container容器</p><blockquote><p>如果运行镜像时失败，请先将 Docker 切换至 <code>Linux container 模式</code></p></blockquote><p><img src="https://i.loli.net/2019/09/23/TAfNrB3sb2O641W.png" alt="图：切换Docker模式"></p><h3 id="5-可能存在的问题"><a href="#5-可能存在的问题" class="headerlink" title="5. 可能存在的问题"></a>5. 可能存在的问题</h3><p>如果您的 <code>Docker for Windows</code> 是从 <code>Docker Toolbox</code> 升级来的，那么可能会提示 <code>未找到CA</code> 。</p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><pre class=" language-sh"><code class="language-sh">$ dockercould not read CA certificate "C:\\Users\\user\\.docker\\machine\\machines\\default\\ca.pem": open C:\Users\user\.docker\machine\machines\default\ca.pem: The system cannot find the path specified.</code></pre><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>在卸载之前的 <code>Docker Toolbox</code> 时，并不会删除用户的 env 变量。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li>卸载 Docker Toolbox</li><li>卸载 VirtualBox</li><li>删除 Toolbox env 变量<ol><li>进入系统变量</li><li>从 /yoghurt 中删除所有 “DOCKER_*” 条目(如)</li></ol></li></ol><h2 id="二、Ubuntu-16-4-环境"><a href="#二、Ubuntu-16-4-环境" class="headerlink" title="二、Ubuntu 16.4 环境"></a>二、Ubuntu 16.4 环境</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>安装Docker 分为两种方式：</p><h4 id="使用-APT-安装"><a href="#使用-APT-安装" class="headerlink" title="使用 APT 安装"></a>使用 APT 安装</h4><pre class=" language-sh"><code class="language-sh"># 更新apt源$ sudo apt-get update# 添加HTTPS传输软件包和CA证书$ sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    software-properties-common# 使用国内源，添加 GPG 密钥(官方源：https://download.docker.com/linux/ubuntu/gpg)$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -# 更新 apt 缓存$ sudo apt-get update# 安装Docker CE$ sudo apt-get install docker-ce</code></pre><h4 id="使用-脚本-自动安装"><a href="#使用-脚本-自动安装" class="headerlink" title="使用 脚本 自动安装"></a>使用 脚本 自动安装</h4><p>Docker 官方为了简化安装流程，提供了一个便捷的安装脚本：</p><pre class=" language-sh"><code class="language-sh">$ curl -fsSL get.docker.com -o get-docker.sh$ sudo sh get-docker.sh -mirror Aliyun</code></pre><h4 id="启动-Docker-CE"><a href="#启动-Docker-CE" class="headerlink" title="启动 Docker CE"></a>启动 Docker CE</h4><pre class=" language-sh"><code class="language-sh">$ sudo systemctl enable docker$ sudo systemctl start docker</code></pre><h3 id="2-国内镜像加速-1"><a href="#2-国内镜像加速-1" class="headerlink" title="2. 国内镜像加速"></a>2. 国内镜像加速</h3><p>在 <code>/etc/docker/daemon.json</code> 中(如果不存在，则新建)写入：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">,</span>        <span class="token string">"https://reg-mirror.qiniu.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>之后重启服务：</p><pre class=" language-sh"><code class="language-sh">$ sudo systemctl daemon-reload$ sudo systemctl restart docker</code></pre><h3 id="3-卸载"><a href="#3-卸载" class="headerlink" title="3. 卸载"></a>3. 卸载</h3><pre class=" language-sh"><code class="language-sh">$ sudo apt-get remove docker \    docker-engine \    docker.io</code></pre><h3 id="4-测试-1"><a href="#4-测试-1" class="headerlink" title="4. 测试"></a>4. 测试</h3><p>同 Windows 版测试一样，运行一个 <code>hello-world image</code></p><pre class=" language-sh"><code class="language-sh">$ docker run hello-world</code></pre><h2 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h2><pre class=" language-sh"><code class="language-sh"># Windows 下进入容器的命令$ winpty docker exec -it luokaiii-mongo bash# Linux 下进入容器的命令$ docker exec -it luokaiii-mongo bash</code></pre><p>参考资料：</p><ol><li><a href="https://docs.docker.com/docker-for-windows/" target="_blank" rel="noopener">Docker Docs：https://docs.docker.com/docker-for-windows/</a></li><li>《Docker 技术入门与实践》杨保华版</li><li><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">《Docker 从入门到实践》https://yeasy.gitbooks.io/docker_practice/</a></li></ol><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署全栈(Java+React+Nginx+MongoDB+Jenkins)</title>
      <link href="/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/0.%E5%85%A8%E6%A0%88%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/09/23/docker/%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/0.%E5%85%A8%E6%A0%88%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-下部署全栈项目：目录"><a href="#Docker-下部署全栈项目：目录" class="headerlink" title="Docker 下部署全栈项目：目录"></a>Docker 下部署全栈项目：目录</h1><p><img src="https://i.loli.net/2019/09/24/z12gXNAQaqITFUw.png" alt="compose_swarm.png"></p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="../../../../../09/23/docker/全栈项目部署/1.Docker/">第一章 安装 Docker 环境</a></li><li><a href="../../../../../09/23/docker/全栈项目部署/2.MongoDB/">第二章 构建 MongoDB 容器</a></li><li><a href="../../../../../09/23/docker/全栈项目部署/3.Redis/">第三章 构建 Redis 容器</a></li><li><a href="../../../../../09/23/docker/全栈项目部署/4.MariaDB/">第四章 构建 MariaDB 容器</a></li><li><a href="../../../../../09/24/docker/全栈项目部署/5.SpringBoot/">第五章 部署 SpringBoot Jar 镜像</a></li><li><a href="../../../../../09/24/docker/全栈项目部署/6.Nginx/">第六章 构建 React 并部署至 Nginx 中</a></li><li><a href="../../../../../09/24/docker/全栈项目部署/7.Docker-Compose/">第七章 Docker-Compose 编排所有服务</a></li></ol><h2 id="本文能解决的问题"><a href="#本文能解决的问题" class="headerlink" title="本文能解决的问题"></a>本文能解决的问题</h2><ol><li>在 Windows、Linux 环境下搭建 Docker<ol><li>Docker 安装</li><li>Docker 国内镜像源</li><li>运行Docker镜像</li></ol></li><li>Docker 下安装 MongoDB 服务(数据库服务)</li><li>Docker 下安装 Redis 服务</li><li>Docker 下安装 MySQL(MariaDB) 服务</li><li>Docker 下部署 SpringBoot 服务(后端服务)</li><li>Docker 下部署 静态文件(前端服务)</li><li>Docker 下部署 Jenkins 服务(持续集成服务)</li><li>Docker 下安装 Nginx 容器；并代理以上所有服务</li><li>Docker-Compose 服务编排，集中部署</li></ol><blockquote><p>在本文中，也会适当的提到如何在普通的环境下部署项目。如果有需要，可以重写另一套部署流程。</p></blockquote><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>所有项目部署完成后，大致如下图所示：</p><p><img src="https://i.loli.net/2019/09/24/sGQzv4oBC9cyTN2.png" alt="Docker单机服务"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><ul><li><p><a href="https://github.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="https://gitee.com/luokaiii/luokaiii.docker-images" target="_blank" rel="noopener">Gitee</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker全栈部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/09/19/docker/10.Docker-Compose/"/>
      <url>/2019/09/19/docker/10.Docker-Compose/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><h2 id="一、Compose-简介"><a href="#一、Compose-简介" class="headerlink" title="一、Compose 简介"></a>一、Compose 简介</h2><p>通过创建 <code>Dockerfile</code> 模板文件，可以使用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成任务的情况。</p><p>例如，一个常见的 Web 项目，除了 Web 服务容器本身，往往还需要加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 <code>service</code> ：一个应用的容器，实际上包含若干运行相关镜像的容器</li><li>项目 <code>project</code> ：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose</code> 中定义。</li></ul><h2 id="二、安装与卸载"><a href="#二、安装与卸载" class="headerlink" title="二、安装与卸载"></a>二、安装与卸载</h2><h3 id="使用二进制包安装"><a href="#使用二进制包安装" class="headerlink" title="使用二进制包安装"></a>使用二进制包安装</h3><ol><li><p>从 <a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">官方 GitHub Release</a> 处下载编译好的二进制文件</p><pre><code>1. </code></pre><pre><code>   curl -L https://github.com/docker/compose/releases/download/1.25.0-rc2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose   chmod +x /usr/local/bin/docker-compose</code></pre></li><li><p>查看 Compose 是否安装成功</p><ol><li><code>docker-compose --version</code></li></ol></li></ol><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><h3 id="1-Web应用"><a href="#1-Web应用" class="headerlink" title="1. Web应用"></a>1. Web应用</h3><p>SpringBoot  应用如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-Dockerfile"><a href="#2-Dockerfile" class="headerlink" title="2. Dockerfile"></a>2. Dockerfile</h3><p>在项目根目录下，创建 <code>Dockerfile</code> 文件：</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8-slimEXPOSE 8080ENV TZ Asia/ShanghaiCOPY build/libs/app-1.0.0.jar /opt/app.jarENTRYPOINT ["/opt/app.jar"]</code></pre><h3 id="3-docker-compose-yml"><a href="#3-docker-compose-yml" class="headerlink" title="3. docker-compose.yml"></a>3. docker-compose.yml</h3><p>编写 <code>docker-compose.yml</code> ，这是 Compose 使用的主模板文件：</p><pre class=" language-yml"><code class="language-yml">version: '3'services:    web:        build: .        ports:         - "8080:8080"    redis:        image: "redis:alpine"</code></pre><h3 id="4-运行-Compose-项目"><a href="#4-运行-Compose-项目" class="headerlink" title="4. 运行 Compose 项目"></a>4. 运行 Compose 项目</h3><p><code>docker-compose up</code></p><h2 id="四、Compose-命令"><a href="#四、Compose-命令" class="headerlink" title="四、Compose 命令"></a>四、Compose 命令</h2><h3 id="1-命令对象与格式"><a href="#1-命令对象与格式" class="headerlink" title="1. 命令对象与格式"></a>1. 命令对象与格式</h3><p><code>docker-compose</code> 命令的基本使用格式是：</p><pre class=" language-sh"><code class="language-sh">docker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]</code></pre><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 docker-compose.yml</li><li><code>-p, --project-name</code> NAME 指定项目名称，默认为所在目录</li><li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li><li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为bridge</li><li><code>--verbose</code> 输出更多调试信息</li><li><code>-v, --version</code> 打印版本并退出</li></ul><h3 id="2-命令说明"><a href="#2-命令说明" class="headerlink" title="2. 命令说明"></a>2. 命令说明</h3><h4 id="1-build"><a href="#1-build" class="headerlink" title="1. build"></a>1. build</h4><blockquote><p>构建（重新构建）项目中的服务容器</p></blockquote><h4 id="2-config"><a href="#2-config" class="headerlink" title="2. config"></a>2. config</h4><blockquote><p>验证 Compose 文件格式是否正确</p></blockquote><h4 id="3-down"><a href="#3-down" class="headerlink" title="3. down"></a>3. down</h4><blockquote><p>停止 up 命令所启动的容器，并移除网络</p></blockquote><h4 id="4-exec"><a href="#4-exec" class="headerlink" title="4. exec"></a>4. exec</h4><blockquote><p>进入指定的容器</p></blockquote><h4 id="5-help"><a href="#5-help" class="headerlink" title="5. help"></a>5. help</h4><blockquote><p>获得一个命令的帮助</p></blockquote><h4 id="6-images"><a href="#6-images" class="headerlink" title="6. images"></a>6. images</h4><blockquote><p>列出 Compose 文件中包含的镜像</p></blockquote><h4 id="7-kill"><a href="#7-kill" class="headerlink" title="7. kill"></a>7. kill</h4><blockquote><p>通过发送 SIGKILL<a href="https://blog.csdn.net/DLUTBruceZhang/article/details/8821690" target="_blank" rel="noopener">(Linux 信号列表)</a> 信号来强制停止服务容器。</p></blockquote><h4 id="8-logs"><a href="#8-logs" class="headerlink" title="8. logs"></a>8. logs</h4><blockquote><p>查看服务容器的输出</p></blockquote><h4 id="9-pause"><a href="#9-pause" class="headerlink" title="9. pause"></a>9. pause</h4><blockquote><p>暂停一个服务容器</p></blockquote><h4 id="10-port"><a href="#10-port" class="headerlink" title="10. port"></a>10. port</h4><blockquote><p>打印某个容器端口所映射的公共端口</p></blockquote><h4 id="11-ps"><a href="#11-ps" class="headerlink" title="11. ps"></a>11. ps</h4><blockquote><p>列出项目中目前的所有容器</p></blockquote><h4 id="12-pull"><a href="#12-pull" class="headerlink" title="12. pull"></a>12. pull</h4><blockquote><p>拉取服务依赖的镜像</p></blockquote><h4 id="13-push"><a href="#13-push" class="headerlink" title="13. push"></a>13. push</h4><blockquote><p>推送服务依赖的镜像到 Docker 镜像仓库</p></blockquote><h4 id="14-restart"><a href="#14-restart" class="headerlink" title="14. restart"></a>14. restart</h4><blockquote><p>重启项目中的服务</p></blockquote><h4 id="15-rm"><a href="#15-rm" class="headerlink" title="15. rm"></a>15. rm</h4><blockquote><p>删除所有(停止状态的)服务容器</p></blockquote><h4 id="16-run"><a href="#16-run" class="headerlink" title="16. run"></a>16. run</h4><blockquote><p>在指定服务上执行一个命令</p></blockquote><h4 id="17-scale"><a href="#17-scale" class="headerlink" title="17. scale"></a>17. scale</h4><blockquote><p>设置指定服务运行的容器个数</p></blockquote><h4 id="18-start"><a href="#18-start" class="headerlink" title="18. start"></a>18. start</h4><blockquote><p>启动已经存在的服务容器</p></blockquote><h4 id="19-stop"><a href="#19-stop" class="headerlink" title="19. stop"></a>19. stop</h4><blockquote><p>停止运行中的容器，但不删除它</p></blockquote><h4 id="20-top"><a href="#20-top" class="headerlink" title="20. top"></a>20. top</h4><blockquote><p>查看各个服务容器内运行的进程</p></blockquote><h4 id="21-unpause"><a href="#21-unpause" class="headerlink" title="21. unpause"></a>21. unpause</h4><blockquote><p>恢复暂停状态的服务</p></blockquote><h4 id="22-up"><a href="#22-up" class="headerlink" title="22. up"></a>22. up</h4><blockquote><p>自动完成：构建镜像 &gt; (重新)创建服务 &gt; 启动服务 &gt; 关联服务容器</p></blockquote><h4 id="23-version"><a href="#23-version" class="headerlink" title="23. version"></a>23. version</h4><blockquote><p>打印版本信息</p></blockquote><h2 id="五、Compose-模板文件"><a href="#五、Compose-模板文件" class="headerlink" title="五、Compose 模板文件"></a>五、Compose 模板文件</h2><h2 id="六、实战-Java-Web"><a href="#六、实战-Java-Web" class="headerlink" title="六、实战 Java Web"></a>六、实战 Java Web</h2><pre class=" language-yml"><code class="language-yml">version: '3'services:  jenkins:    container_name: 'jenkins.ci'    image: 'jenkins/jenkins:lts'    #ports:  不对外暴露端口，直接使用nginx容器转到8080      #- '8080:8080'      #- '50000:50000'    volumes:      - '/home/docker-images/jenkins/var/jenkins_home:/var/jenkins_home'      - '/home/docker-images/jenkins/html:/usr/share/jenkins/html' #挂载编译打包后的存放路径  nginx:    container_name: 'nginx'    depends_on:      - jenkins    image: nginx:alpine    volumes:      - '/home/luokaiii/backstage_page/html:/usr/www/luokaiii/cn/html'      - '/home/docker-images/nginx/conf:/etc/nginx/conf.d'      - '/home/docker-images/nginx/cert:/etc/nginx/cert'    ports:      - 80:80 # 对外统一使用80端口      - 443:443    restart: always</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/2_JSX%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/2_JSX%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JSX-简介"><a href="#JSX-简介" class="headerlink" title="JSX 简介"></a>JSX 简介</h2><p>React 认为渲染逻辑本质上与其他 UI 逻辑内在耦合，比如，在 UI 中需要绑定处理事件、在某些时刻状态发生变化时需要通知 UI，以及需要在 UI 中展示准备好的数据。</p><h3 id="JSX-防止注入攻击"><a href="#JSX-防止注入攻击" class="headerlink" title="JSX 防止注入攻击"></a>JSX 防止注入攻击</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> title <span class="token operator">=</span> response<span class="token punctuation">.</span>potentiallyMaliciousInput<span class="token comment" spellcheck="true">// 直接使用是安全的</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre><p>React DOM 在渲染所有输入内容之前，默认会进行转义。它可以确保在你的应用中，永远不会注入那些非自己明确编写的内容。所有内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS 攻击。</p><h3 id="JSX-表示对象"><a href="#JSX-表示对象" class="headerlink" title="JSX 表示对象"></a>JSX 表示对象</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"greeting"</span><span class="token operator">></span>        Hello<span class="token punctuation">,</span>World<span class="token operator">!</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">)</span></code></pre><p>Babel 会把 JSX 转译成一个名为 React.createElement() 的函数调用。React.createElement() 会预先执行一些检查，以帮助你编写无错代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 这是简化的过程，真实的要复杂的多</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'h1'</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        className<span class="token punctuation">:</span> <span class="token string">'greeting'</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token string">'Hello,World!'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这些对象被称为”React元素”，描述了屏幕前看到的内容，React通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《React》官方文档 - 目录</title>
      <link href="/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/HOOK/"/>
      <url>/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/HOOK/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《React》官方文档 - 目录</title>
      <link href="/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/"/>
      <url>/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/%E9%AB%98%E7%BA%A7%E6%8C%87%E5%BC%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《React》官方文档 - 目录</title>
      <link href="/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
      <url>/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《React》官方文档 - 目录</title>
      <link href="/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/0_%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/0_%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《React》官方文档 - 目录</title>
      <link href="/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/1_%E5%88%9B%E5%BB%BAReact%E5%BA%94%E7%94%A8/"/>
      <url>/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/1_%E5%88%9B%E5%BB%BAReact%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>React 推荐的工具链：</p><ol><li>学习 React 或创建一个新的单页应用，可使用 Create React App</li><li>用 Node.js 构建服务端渲染的网站，可使用 Next.js</li><li>构建面向内容的静态网站，可使用 Gatsby</li><li>打造组件库或将 React 集成到现有代码仓库，可尝试更灵活的工具链</li></ol><h2 id="Create-React-App"><a href="#Create-React-App" class="headerlink" title="Create React App"></a>Create React App</h2><p><code>Create React App</code> 是创建 单页应用 的最佳方式。</p><blockquote><p>需要 Node &gt;= 8.10 和 npm &gt;= 5.6</p></blockquote><p>创建项目，可以执行：</p><pre class=" language-sh"><code class="language-sh">npx create-react-app my-appcd my-appnpm start</code></pre><p>Create React App 只是创建一个前端构建流水线，它在内部使用 <code>Babel</code> 和 <code>Webpack</code>。</p><h2 id="Next-js"><a href="#Next-js" class="headerlink" title="Next.js"></a>Next.js</h2><p>Next.js 是一个流行的、轻量级的框架，用于配合 React 打造静态化和服务端渲染应用。包括开箱即用的样式和路由方案。</p><h2 id="Gatsby"><a href="#Gatsby" class="headerlink" title="Gatsby"></a>Gatsby</h2><p>Gatsby 是用 React 创建静态网站的最佳方式。它让你能使用 React 组件，但输出预渲染的 HTML 和 CSS 以保证最快的加载速度。</p><h2 id="更灵活的工具链"><a href="#更灵活的工具链" class="headerlink" title="更灵活的工具链"></a>更灵活的工具链</h2><ul><li>Neutrino 把 webpack 的强大功能和简单预设结合在一起。</li><li>nwb 适合将 React 组件发布到 npm</li><li>Parcel 是一个快速的、零配置的网页应用打包器</li><li>Razzle 是一个无需配置的服务端渲染框架</li></ul><h2 id="从头开始打造工具链"><a href="#从头开始打造工具链" class="headerlink" title="从头开始打造工具链"></a>从头开始打造工具链</h2><ul><li>package 管理器，如 Yarn、npm</li><li>打包器：如 webpack、Parcel</li><li>编译器：如 Babel</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《React》官方文档 - 目录</title>
      <link href="/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/API/"/>
      <url>/2019/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AReact%E3%80%8B%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/API/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/09/10/java/DB-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/09/10/java/DB-MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><pre class=" language-mysql"><code class="language-mysql">/* Windows服务 */-- 启动 MySQL    net start mysql-- 创建Windows 服务    sc create mysql binPath= mysqld_bin_path(等号与值之间有空格)/* 连接与断开服务器 */    mysql -h 地址 -P 端口 -u 用户名 -p 密码-- 显示哪些线程正在运行    SHOW PROCESSLIST-- 显示系统变量信息    SHOW VARIABLES</code></pre><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><pre class=" language-mysql"><code class="language-mysql">/* 数据库操作 */-- 查看当前数据库    SELECT DATABASE();-- 显示当前时间、用户名、数据库版本    SELECT now(), user(), version();-- 创建库    CREATE DATABASE [IF NOT EXISTS] 数据库名 数据库选项    数据库选项：        CHARACTER SET charset_name        COLLATE collation_name-- 查看已有库    SHOW DATABASES [ LIKE 'PATTERN' ]-- 查看当前库信息    SHOW CREATE DATABASE 数据库名-- 修改库的选项信息    ALTER DATABASE 数据库名 选项信息-- 删除库    DROP DATABASE [ IF EXISTS ] 数据库名        同时删除数据库相关的目录及目录内容</code></pre><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><pre class=" language-mysql"><code class="language-mysql">-- 创建表    CREATE [TEMPORARY] TABLE [IF NOT EXISTS] [数据库名.]表名 (        表的结构定义    ) [表选项]        - 每个字段必须有数据类型        - 最后一个字段后不能有都好        - TEMPORARY 临时表，会话结束时表自动消失        - 对于字段的定义：            字段名 数据类型 [NOT NULL|NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | PRIMARY [KEY]] [COMMENT 'string']-- 表选项    -- 字符集        CHARSET = charset_name        - 如果表没有设定，则使用数据库字符集    -- 存储引擎        ENGINE = engine_name        - 表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同        - 常见的引擎：InnoDB、MyISAM、Memory/Heap、BDB、Merge、Example、CSV、MaxDB、Archive        - 不同的引擎在保存表的结构和数据时采用不同的方式            - MyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引            - InnoDB表文件含义：.frm表定义，表空间数据和日志文件        - 显示存储引擎的状态信息            SHOW ENGINES；        - 显示存储引擎的日志或状态信息            SHOW ENGINE 引擎名 {LOGS|STATUS}    -- 自增起始数        AUTO_INCREMENT = 行数    -- 数据文件目录        DATA DIRECTORY = '目录'    -- 索引文件目录        INDEX DIRECTORY = '目录'    -- 表注释        COMMENT = 'string'    -- 分区选项        PARTITION BY ...-- 查看所有表    SHOW TABLES [LIKE 'pattern']    SHOW TABLES FROM 库名-- 查看表结构    SHOW CREATE TABLE 表名    DESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'pattern']    SHOW TABLE STATUS [FROM db_name] [like 'pattern']-- 修改表    -- 修改表本身的选项        ALTER TABLE 表名 表的选项        - eg: ALTER TABLE db_name ENGINE=MYISAM;    -- 对表进行重命名        RENAME TABLE 原表名 TO 新表名        RENAME TABLE 原表名 TO 库名.表名        - RENAME 可以交换两个表名    -- 修改表的字段结构        ALTER TABLE 表名 操作名        -- 操作名            ADD [COLUMN] 字段定义               -- 增加字段            ADD [COLUMN] AFTER 字段名            -- 增加在该字段名后面            ADD [COLUMN] FIRST                   -- 增加在第一个            ADD PRIMARY KEY(字段名)            -- 创建主键            ADD UNIQUE [索引名] (字段名)          -- 创建唯一索引            ADD INDEX [索引名] (字段名)          -- 创建普通索引            DROP [COLUMN] 字段名                 -- 删除字段            MODIFY [COLUMN] 字段名 字段属性     -- 支持对字段属性修改，不支持修改字段名            CHANGE [COLUMN] 原字段名 新字段名 属性 -- 支持对字段名修改            DROP PRIMARY KEY                  -- 删除主键(删除主键前，需要删除其 AUTO_INCREMENT 属性)            DROP INDEX 索引名                    -- 删除索引            DROP FOREIGN KEY 外键                 -- 删除外键-- 删除表    DROP TABLE [IF EXISTS] 表名...-- 清空表数据    TRUNCATE [TABLE] 表名-- 复制表结构    CREATE TABLE 表名 LIKE 复制名-- 复制表结构和数据    CREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名-- 检查表是否有错误    CHECK TABLE tb_name [,tb_name2] ... [option] ...-- 优化表    OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tb_name [,tb_name] ...-- 修复表    REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tb_name [,tb_name] ... [QUICK] [EXTENDED] [USE_FRM]-- 分析表    ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tb_name [,tb_name]...</code></pre><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><pre class=" language-mysql"><code class="language-mysql">-- 增    INSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[,(值列表),...]        - 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表        - 可同时插入多条数据记录        - REPLACE 与 INSERT 完全一样，可互换    INSERT [INTO] 表名 SET 字段名=值[,字段名=值,...]-- 删    DELETE FROM 表名 [删除条件子句]        - 没有条件子句，会删除全部-- 改    UPDATE 表名 SET 字段名=值[,字段名=值,...] [更新条件]-- 查    SELECT 字段列表 FROM 表名 [其他子句]        - 可来自多个表的多个字段        - 其他子句可以不使用        - 字段列表可以用*代替，表示所有字段</code></pre><h2 id="字符集编码"><a href="#字符集编码" class="headerlink" title="字符集编码"></a>字符集编码</h2><pre class=" language-mysql"><code class="language-mysql">-- MySQL、数据库、表、字段均可设置编码-- 数据编码与客户端编码无需一致-- 查看所有字符集编码项SHOW VARIABLES LIKE 'character_set_%'    character_set_client    -- 客户端向服务器发送数据时使用的编码    character_set_results    -- 服务器端将结果返回给客户端所使用的编码    character_set_connection-- 连接层编码SET 变量名 = 变量值    SET character_set_client = gbk;    SET character_set_results = gbk;    SET character_set_connection = gbk;SET NAMES gbk;     -- 以上三个配置-- 校对集    校对集用以排序    -- 查看所有字符集    SHOW CHARACTER SET [LIKE 'pattern'] / SHOW CHARSET [LIKE 'pattern']    -- 查看所欲校对集    SHOW COLLATION [LIKE 'pattern']    -- 设置字符集编码    CHARSET 字符集编码    -- 设置校对集编码    COLLATE 校对集编码</code></pre><h2 id="数据类型（列类型）"><a href="#数据类型（列类型）" class="headerlink" title="数据类型（列类型）"></a>数据类型（列类型）</h2><pre class=" language-mysql"><code class="language-mysql">1. 数值类型-- a.整型    类型            字节        范围    tinyint       1字节     -128~127 无符号位：0~255    smallint      2字节      -32768~32767    mediumint      3字节     -8388608~8388607    int          4字节        bigint         8字节    int(M)         M表示总位数    - 默认存在符号位，unsigned 属性修改    - 显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改        例如：int(5) 插入'123',补填后为'00123'    - 在满足要求的情况下，越小越好    - 1表示bool真，0表示bool假。常用 tinyint(1) 表示布尔型-- b.浮点型    类型            字节        范围    float         4字节    double         8字节    - 浮点型既支持符号位 unsigned，也支持显示宽度 zerofill        - 不同于整型，前后均会补填0    - 定义浮点型时，需指定总位数和小数位数        - float(M,D)    double(M,D)        - M表示总位数，D表示小数位数        - M和D的大小会决定浮点数的范围，不同于整型的固定范围        - M既表示总位数(不包括小数点和正负号)，也表示显示宽度(所有显示符号均包括)        - 支持科学计数法表示        - 浮点数表示近似值-- c.定点数    decimal  -- 可变长度    decimal(M,D)  -- M表示总位数，D表示小数位数    - 保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入    - 将浮点数转换为字符串来保存，每9位数字保存为4个字节2. 字符串类型-- a.char，varchar    char    定长字符串，速度快，但浪费空间    varchar    变长字符串，速度慢，但节省空间    - M表示能存储的最大长度，此长度为字符数，非字节数    - 不同的编码，所占用的空间不同    - char，最多255个字符，与编码无关    - varchar，最多65535个字符，与编码有关    - 一条有效记录最大不能超过 65535 个字节     - utf8 最大为21844个字符，gbk 最大为 32766个字符，latin 最大为65532个字符    - varchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存    - varchar 的最大有效长度由最大行大小和使用的字符集确定。    - 最大有效长度是 65532 字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是 64432-1-2=65532字节     - 例如：表 定义为 CREATE TABLE tb(c1 int,c2 char(30),c3 varchar(N)) charset=utf8；问N的最大值是多少？答：(65535-1-2-4-30*3)/3-- b.blob,text    blob    二进制字符串（字节字符串）        tinyblob,blob,mediumblob,longblob    text    非二进制字符串（字符字符串）        tinytext,text,mediumtext,longtext    - text 在定义时，不需要定义长度，也不会计算总长度    - text 类型在定义时，不可给default值-- c,binary,varbinary    类似于 char 和 varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串    char、varchar、text 对应 binary、varbinary、blob3. 日期时间类型    一般用整型保存时间戳    datetime        8字节    日期及时间        YYYY-MM-DD hh:mm:ss    date            3字节 日期        YYYY-MM-DD        YY-MM-DD        YYYYMMDD        YYMMDD    timestamp        4字节 时间戳        YY-MM-DD hh:mm:ss        YYYYMMDDhhmmss        YYMMDDhhmmss    time            3字节 时间        hh:mm:ss        hhmmss    year            1字节 年份        YYYY        YY4. 枚举和集合-- 枚举    enum(val1,val2,val3...)        - 在已知的值中进行单选，最大数量为65535        - 枚举值在保存时，以2字节的整型保存，每个枚举值，按保存的位置顺序，从1开始逐一递增        - 表现为字符串类型，存储却是整型        - NULL值的索引是NULL        - 空字符串错误值的索引值是0-- 集合    set(val1,val2,val3....)        - CREATE TABLE tb(gener set('男','女','无'))        - INSERT INTO tb values ('男，女')        - 最多可以有64个不同成员，以bigint存储，共8字节，采取位运算的形式        - 当创建表时，SET 成员值的尾部空格将自动删除</code></pre><p>文章摘抄自 <a href="https://juejin.im/post/5d6faf8f6fb9a06b0b1c9535?utm_source=gold_browser_extension" target="_blank" rel="noopener">掘金 - 一千行MySQL命令</a> 。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《MyBatis》读书笔记 - 目录</title>
      <link href="/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/0_%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/0_%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-简介"><a href="#MyBatis-简介" class="headerlink" title="MyBatis 简介"></a>MyBatis 简介</h1><p><img src="https://i.loli.net/2019/09/05/BjHJCbY6luQPnhK.png" alt="mybatis-superbird-small.png"></p><p>MyBatis 是一款优秀的持久层框架，支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><p>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO 为数据库中的记录。</p><blockquote><p>文档版本为：MyBatis 3.5.2</p></blockquote><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="../../../../../09/05/读书笔记/《MyBatis》/1_入门/">第一章 MyBatis 入门</a></li><li><a href="../../../../../09/05/读书笔记/《MyBatis》/2_XML配置/">第二章 XML 配置</a></li><li><a href="../../../../../09/05/读书笔记/《MyBatis》/3_XML映射文件/">第三章 XML 映射文件</a></li><li><a href="../../../../../09/05/读书笔记/《MyBatis》/4_动态SQL/">第四章 动态 SQL</a></li><li>第五章 Java API</li></ol><p>第四章往后的 API 章节没有细看，因为多数情况下需要结合其他框架的 API 使用 MyBatis。</p><p>笔记来源于 <a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">MyBatis 官方文档：http://www.mybatis.org/mybatis-3/zh/index.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MyBatis》读书笔记 - MyBatis 动态SQL</title>
      <link href="/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/4_%E5%8A%A8%E6%80%81SQL/"/>
      <url>/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/4_%E5%8A%A8%E6%80%81SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="四、MyBatis-动态SQL"><a href="#四、MyBatis-动态SQL" class="headerlink" title="四、MyBatis 动态SQL"></a>四、MyBatis 动态SQL</h1><p>MyBatis 提供了可以被用在任意 SQL 映射语句中的动态SQL。动态 SQL 元素和 JSTL 或基于 XML 的文本处理器相似。</p><p>MyBatis 采用基于 OGNL 的表达式来淘汰其他元素。</p><ul><li>if</li><li>choose(when,otherwise)</li><li>trim(where,set)</li><li>foreach</li></ul><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>动态 SQL 通常要做的事情是根据条件包含 where 子句的一部分，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findActive<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from blog    where  state='active'    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and title like #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>需要多个条件，可以使用 and 连接</p><h2 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findActive<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from blog    where state="active"    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title like #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null and author.name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author_name like #{author.name}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            and featured = 1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h2><p>如果上面的 where 语句中，去掉了 “state=active”，当所有条件都不匹配时，sql 就不正常了。此时，可以使用 where 标签来解决</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findActive<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select * from blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>state !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            state = #{state}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title like #{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>where 元素会在至少有一个子元素的条件返回 SQL 子句的情况下才去插入 where 子句。</p><p>若语句开头为 AND 或 OR ，where 元素也会将它们去除。</p><p>和 where 元素等价的自定义 trim 元素：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AND | OR<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span></code></pre><p>set 元素可以用于动态包含需要更新的列，而舍去其他的，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateActive<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update Author    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>username=#{username},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>password=#{password},<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>email=#{email}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span></code></pre><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>动态 SQL 的另一个常用操作是对一个集合进行遍历，通常是在构建 IN 条件语句的时候，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPostIn<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from post p    where id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>             <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{item}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><blockquote><p>foreach 可迭代的对象如 List、Set、Map或数组都可以作为参数。</p></blockquote><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><p>如果要在注解中使用动态SQL，可以使用 script 元素：</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"&lt;script>"</span><span class="token punctuation">,</span>      <span class="token string">"update Author"</span><span class="token punctuation">,</span>      <span class="token string">"  &lt;set>"</span><span class="token punctuation">,</span>      <span class="token string">"    &lt;if test='username != null'>username=#{username},&lt;/if>"</span><span class="token punctuation">,</span>      <span class="token string">"    &lt;if test='password != null'>password=#{password},&lt;/if>"</span><span class="token punctuation">,</span>      <span class="token string">"    &lt;if test='email != null'>email=#{email},&lt;/if>"</span><span class="token punctuation">,</span>      <span class="token string">"    &lt;if test='bio != null'>bio=#{bio}&lt;/if>"</span><span class="token punctuation">,</span>      <span class="token string">"  &lt;/set>"</span><span class="token punctuation">,</span>      <span class="token string">"where id=#{id}"</span><span class="token punctuation">,</span>      <span class="token string">"&lt;/script>"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">updateAuthorValues</span><span class="token punctuation">(</span>Author author<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>bind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文中：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlogs<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span> + _parameter.getTitle() + <span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    select * from blog    where title like #{pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="多数据库支持"><a href="#多数据库支持" class="headerlink" title="多数据库支持"></a>多数据库支持</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>oracle<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select seq_users.nextval from dual    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_databaseId <span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>db2<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select nextval for seq_users from sysibm.sysdummy1"    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span>  insert into users values (#{id}, #{name})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MyBatis》读书笔记 - MyBatis XML 映射文件</title>
      <link href="/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/3_XML%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/"/>
      <url>/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/3_XML%E6%98%A0%E5%B0%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="三、MyBatis-XML-映射文件"><a href="#三、MyBatis-XML-映射文件" class="headerlink" title="三、MyBatis XML 映射文件"></a>三、MyBatis XML 映射文件</h1><p>MyBatis 通过映射 XML 文件的方式，减少了 JDBC 的样板代码，十分的简单。</p><p>SQL 映射文件只有少数几个顶级约束：</p><ul><li>cache - 对给定命名空间的缓存配置</li><li>cache-ref - 对其他命名空间缓存配置的引用</li><li>resultMap - 描述如何从数据库结果集中加载对象</li><li><del>parameterMap - 废弃，参数映射</del></li><li>sql - 可重用语句块</li><li>insert - 插入语句</li><li>update - 更新语句</li><li>delete - 删除语句</li><li>select - 查询语句</li></ul><h2 id="一、select"><a href="#一、select" class="headerlink" title="一、select"></a>一、select</h2><p>查询语句，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPerson<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hashmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    SELECT * FROM PERSON WHERE ID = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>select 元素允许你配置很多属性来配置每条语句的作用细节</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span>          <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPerson<span class="token punctuation">"</span></span>        <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span>        <span class="token attr-name">parameterMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deprecated<span class="token punctuation">"</span></span>        <span class="token attr-name">result</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hashMap<span class="token punctuation">"</span></span>        <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>personResultMap<span class="token punctuation">"</span></span>        <span class="token attr-name">flushCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>        <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span>        <span class="token attr-name">fetchSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>256<span class="token punctuation">"</span></span>        <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PREPARED<span class="token punctuation">"</span></span>        <span class="token attr-name">resultSetType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FORWARD_ONLY<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>命名空间中的唯一标识符，用来引用该语句</td></tr><tr><td>parameterType</td><td>传入的参数的完全限定名，可选。MyBatis会通过类型处理器推断具体传入的参数类型</td></tr><tr><td><del>parameterMap</del></td><td><del>引用外部 parametermap 的方法</del></td></tr><tr><td>resultType</td><td>返回的期望乐行的类的完全限定名或别名。如果结果为集合，则应该设置为集合包含的类型，而不是集合本身。</td></tr><tr><td>resultMap</td><td>外部 resultMap 的命名引用。与resultType不能同时使用</td></tr><tr><td>flushCache</td><td>默认为false。为true时，只要语句被调用，都会导致本地缓存和二级缓存被清空</td></tr><tr><td>useCache</td><td>默认对select元素为true。将本条语句的结果使用二级缓存缓存起来</td></tr><tr><td>timeout</td><td>驱动程序等待数据库返回请求结果的秒数，而后抛出异常</td></tr><tr><td>fetchSize</td><td>尝试让驱动程序每次批量返回的结果行数和设置的值相等</td></tr><tr><td>statementType</td><td>STATEMENT、PREPARED(默认)、CALLABLE中的一个</td></tr><tr><td>resultSetType</td><td>FORWARD_ONLY、SCROLL_SENSITIVE、SCROLL_INSENSITIVE、DEFAULT中的一个</td></tr><tr><td>databaseId</td><td>数据库厂商标识</td></tr><tr><td>resultOrdered</td><td>仅针对嵌套select，如果为true，则假设包含了嵌套结果集或是分组，这样返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。使得在获取嵌套结果集时不至于导致内存不够用</td></tr><tr><td>resultSets</td><td>针对多结果集情况。将列出语句执行后返回的结果集并给每个结果集一个名称</td></tr></tbody></table><h2 id="二、insert、update、delete"><a href="#二、insert、update、delete" class="headerlink" title="二、insert、update、delete"></a>二、insert、update、delete</h2><p>与 select 参数相似，以一个示例来说明：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   insert into  Author(username,password,email) values    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       (#{item.username},#{item.password},#{item.email})   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateAuthor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update Author set     username=#{username},     password=#{password},     email=#{email}    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteAuthor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from Author where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span></code></pre><h2 id="三、sql"><a href="#三、sql" class="headerlink" title="三、sql"></a>三、sql</h2><p>该元素可以被用来定义可重用的 SQL 代码段，这些 SQL 代码可以被包含在其他语句中。它可以在加载的时候被静态地设置参数。在不同的包含语句中可以设置不同的值到参数占位符上，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ${alias}.id,${alias}.username,${alias}.password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includ</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alias<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includ</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includ</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alias<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includ</span><span class="token punctuation">></span></span>    from some_table t1    cross join some_table t2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><blockquote><p>cross join 表示笛卡尔积，t1+t2的所有情况</p></blockquote><p>属性值也可以被用在 include 元素的 refid 属性里或 include 元素的内部语句中，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sometable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ${prefix}Table<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someinclud<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      from     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includ</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${include_target}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select     field1,field2,field3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includ</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someinclud<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Some<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>includ_target<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sometable<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includ</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="四、参数"><a href="#四、参数" class="headerlink" title="四、参数"></a>四、参数</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into users (id,username,password)    values (#{id},#{username},#{password})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre><p>上面的语句中，User 类型的参数对象传递到了语句中，id、username、password 属性会被查找，然后将它们的值传入预处理语句的参数中。</p><p>参数也可以指定一个特殊的数据类型：</p><blockquote><p>#{property,javaType=int,jdbcType=NUMERIC}</p></blockquote><p>也可以指定一个特殊的类型处理器类：</p><blockquote><p>#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}</p></blockquote><p>需要保留小数点的数值类型：</p><blockquote><p>#{height,javaType=double,jdbcType=NUMERIC,numericScale=2}</p></blockquote><p>尽管该选项功能强大，但大多数情况下只需要简单地指定属性名，MyBatis 会自己推断类型，顶多<code>需要为可能为空的列指定 jdbcType</code>。</p><h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><p>默认情况下，使用 <code>#{}</code> 格式的语法会导致 MyBatis 创建 PreparedStatement 参数占位符并安全地设置参数(就像？一样)。不过有时想直接在 SQL 中插入一个不转义的字符串，如：</p><blockquote><p>order by ${columnName}</p></blockquote><p>这样，MyBatis 不会修改或转义字符串。</p><p>有时，替换字符串会非常有用，如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where id=#{id}"</span><span class="token punctuation">)</span>User <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where name=#{name}"</span><span class="token punctuation">)</span>User <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where email=#{email}"</span><span class="token punctuation">)</span>User <span class="token function">findByEmail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以只写一个方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from user where ${column}=#{email}"</span><span class="token punctuation">)</span>User <span class="token function">findByColumn</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"column"</span><span class="token punctuation">)</span> String column<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用的时候，可以如下调用：</p><pre class=" language-java"><code class="language-java">User u1 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByColumn</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>User u2 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByColumn</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User u3 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">findByColumn</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"xx@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="五、结果映射"><a href="#五、结果映射" class="headerlink" title="五、结果映射"></a>五、结果映射</h2><p>resultMap 可以将返回结果映射到JavaBean或POJO上。如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.luokaiii.model.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,username    from tb_user    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>也可以使用类型别名，来代替完全限定名：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.luokaiii.model.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,username    from tb_user    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>如果列名与属性名没有精确匹配，可以在 SELECT 语句中对列使用别名来匹配标签，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.luokaiii.model.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select      id        as "id",     username  as "userName"    from tb_user    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>或者使用外部的 <code>resultMap</code> 来映射：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hashed_password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectUsers<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,username    from tb_user    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h3 id="高级结果映射"><a href="#高级结果映射" class="headerlink" title="高级结果映射"></a>高级结果映射</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 非常复杂的语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlogDetails<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>detailedBlogResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select       B.id as blog_id,       B.title as blog_title,       B.author_id as blog_author_id,       A.id as author_id,       A.username as author_username,       A.password as author_password,       A.email as author_email,       A.bio as author_bio,       A.favourite_section as author_favourite_section,       P.id as post_id,       P.blog_id as post_blog_id,       P.author_id as post_author_id,       P.created_on as post_created_on,       P.section as post_section,       P.subject as post_subject,       P.draft as draft,       P.body as post_body,       C.id as comment_id,       C.post_id as comment_post_id,       C.name as comment_name,       C.comment as comment_text,       T.id as tag_id,       T.name as tag_name  from Blog B       left outer join Author A on B.author_id = A.id       left outer join Post P on B.id = P.blog_id       left outer join Comment C on P.id = C.post_id       left outer join Post_Tag PT on PT.post_id = P.id       left outer join Tag T on PT.tag_id = T.id  where B.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 非常复杂的结果映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>detailedBlogResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idArg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bio<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_bio<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favouriteSection<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_favourite_section<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subject<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_subject<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comment_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Tag<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>draft<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DraftPost<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h3 id="结果映射（resultMap）"><a href="#结果映射（resultMap）" class="headerlink" title="结果映射（resultMap）"></a>结果映射（resultMap）</h3><ul><li>constructor - 用于在实例化类时，注入结果到构造方法中<ul><li>idArg - ID参数，标记出ID，可以帮助提高整体性能</li><li>arg - 将被注入到构造方法的一个普通结果</li></ul></li><li>id - 一个ID结果</li><li>result - 注入到字段或 JavaBean 属性的普通结果</li><li>association - 一个复杂类型的关联；许多结果将包装成这种类型<ul><li>嵌套结果映射 - 集合本身可以是一个 resultMap 元素，或者从别处引用一个</li></ul></li><li>collection - 一个复杂类型的集合<ul><li>嵌套结果映射 - 集合本身可以是一个 resultMap 元素，或者从别处引用一个</li></ul></li><li>discriminator - 使用结果值来决定使用哪个 resultMap<ul><li>case - 基于某些值的结果映射<ul><li>嵌套结果映射 - case 本身可以是一个 resultMap 元素，因此可以具有相同的结构和元素，或者从别处引用一个</li></ul></li></ul></li></ul><h3 id="id-amp-result"><a href="#id-amp-result" class="headerlink" title="id &amp; result"></a>id &amp; result</h3><p>id 和 result 元素都将一个列的值映射到一个简单数据类型的属性或字段。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subject<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_subject<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>有时，需要使用不可变类来接收，即在构造方法中注入允许在初始化时设置的值，而不暴露出公有方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...property</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">,</span> String userName<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...set</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// private setter and getter</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>idArg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_int<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor</span><span class="token punctuation">></span></span></code></pre><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>关联（association）元素处理“有一个”类型的关系。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">cloumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_author_id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span></code></pre><p>MyBatis 有两种方式加载关联：</p><ul><li>嵌套 Select 查询：通过执行另一个 SQL 映射语句来加载期望的复杂类型</li><li>嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集</li></ul><h3 id="关联的嵌套Select查询"><a href="#关联的嵌套Select查询" class="headerlink" title="关联的嵌套Select查询"></a>关联的嵌套Select查询</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAuthor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlog<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from blog where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAuthor<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from Author where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>selectBlog 用来加载博客，selectAuthor 用来加载作者，而 blogResult 结果映射描述了应该使用 selectAuthor 语句加载它的 author 属性。</p><p>这种方式虽然简单，但是<code>在大型数据集或大型数据表上表现不佳</code>。这个问题被称为“N+1查询问题”：</p><ul><li>执行了一个单独的 SQL 语句来获取结果的一个列表（就是+1）</li><li>对列表返回的每条记录，执行一个 select 查询语句来加载详细信息（就是N）</li></ul><p>虽然 MyBatis 能够对这样的查询进行延迟加载，但是如果你在加载完记录表后，立即进行了遍历。此时就会触发所有的延迟加载查询，性能会变得很糟糕。</p><blockquote><p>解决方法：使用联合查询来避免N+1问题</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlog<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select    B.id            as blog_id,    B.title         as blog_title,    B.author_id     as blog_author_id,    A.id            as author_id,    A.username      as author_username,    A.password      as author_password,    A.email         as author_email,    A.bio           as author_bio  from Blog B left outer join Author A on B.author_id = A.id  where B.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_author_id<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authorResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>authorResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_email<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bio<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author_bio<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>集合元素和关联元素几乎是一样的</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog.Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subject<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_subject<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_body<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span></code></pre><h4 id="集合的嵌套-Select-查询"><a href="#集合的嵌套-Select-查询" class="headerlink" title="集合的嵌套 Select 查询"></a>集合的嵌套 Select 查询</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPostsForBlog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlog<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from blog where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectPostsForBlog<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from post where blog_id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><blockquote><p><code>javaType=&quot;ArrayList&quot; ofType=&quot;Post&quot;</code> 等同于结果为：ArrayList<post></post></p></blockquote><h4 id="集合的嵌套结果映射"><a href="#集合的嵌套结果映射" class="headerlink" title="集合的嵌套结果映射"></a>集合的嵌套结果映射</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlog<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select  B.id as blog_id,  B.title as blog_title,  B.author_id as blog_author_id,  P.id as post_id,  P.subject as post_subject,  P.body as post_body,  from Blog B  left outer join Post P on B.id = P.blog_id  where B.id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subject<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_subject<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post_body<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h4 id="集合的多结果集（ResultSet）"><a href="#集合的多结果集（ResultSet）" class="headerlink" title="集合的多结果集（ResultSet）"></a>集合的多结果集（ResultSet）</h4><p>可以通过执行存储过程来实现，存储过程会执行两个查询并返回两个结果集。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> BLOG <span class="token keyword">WHERE</span> ID <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id}</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> POST <span class="token keyword">WHERE</span> BLOG_ID <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id}</span></code></pre><p>在映射时，必须通过 resultSets 属性为每个结果集指定一个名字，使用逗号隔开。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlog<span class="token punctuation">"</span></span> <span class="token attr-name">resultSets</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogs,posts<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {call getBlogsAndPosts(#{id,jdbcType=INTEGER,mode=IN})}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>指定结果集的数据进行填充</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blogResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Post<span class="token punctuation">"</span></span> <span class="token attr-name">resultSet</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">foreignColumn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog_id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subject<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subject<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h3 id="鉴别器（discriminator）"><a href="#鉴别器（discriminator）" class="headerlink" title="鉴别器（discriminator）"></a>鉴别器（discriminator）</h3><p>有时，一个数据库查询可能会返回多个不同的结果集。鉴别器元素就是被设计出来应对这种情况的，也能处理如类的继承层次结构的问题。类似于 java 语言中的 switch 语句。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vehicleResult<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Vehicle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vin<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>year<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>make<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>make<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vehicle_type<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>truckResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vanResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suvResult<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><h3 id="自动映射"><a href="#自动映射" class="headerlink" title="自动映射"></a>自动映射</h3><p>在简单的场景下，MyBatis 可以为你自动映射查询结果。但如果遇到复杂的场景，则需要自行构建一个结果映射。</p><h2 id="六、缓存"><a href="#六、缓存" class="headerlink" title="六、缓存"></a>六、缓存</h2><p>MyBatis 内置了一个强大的事务性查询缓存机制，可以非常方便地配置和定制。</p><p>默认情况下，只启用了本地的会话缓存，仅对一个会话中的数据进行缓存。要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：</p><blockquote><cache></cache></blockquote><p>其效果如下：</p><ul><li>映射语句文件中的所有 select 结果都将被缓存</li><li>映射语句文件中的所有 insert、update、delete 都会刷新缓存</li><li>缓存会使用 最少使用算法 来清除不需要的缓存</li><li>缓存不会定时进行刷新</li><li>缓存会保存列表或对象的1024个引用</li><li>缓存会被视为读/写缓存，意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或县城所做的潜在修改</li></ul><blockquote><p>缓存只作用于 cache 标签所在的映射文件中的语句。混用 API和XML，在共用接口中的语句将不会被默认缓存。 可以修改cache 元素的属性：</p></blockquote><pre class=" language-xml"><code class="language-xml">&lt;cache        eviction="FIFO" // FIFO缓存       flushInerval="60000" // 每隔60秒刷新       size="512"         // 最多可存512个引用       readOnly="true"  // 返回对象只读/></code></pre><p>可用的清除策略：</p><ul><li>LRU - 最近最少使用：移除最长时间不被使用的对象</li><li>FIFO - 先进先出：按对象进入缓存的顺序来移除他们</li><li>SOFT - 软引用：基于垃圾回收器状态和软引用规则移除对象</li><li>WEAK - 弱引用：更积极地基于垃圾回收期状态和弱引用规则移除对象</li></ul><h4 id="使用自定义缓存"><a href="#使用自定义缓存" class="headerlink" title="使用自定义缓存"></a>使用自定义缓存</h4><p>通过实现 Cache 接口或者第三方缓存方案，来完全覆盖缓存行为。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.domain.something.MyCustomCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><blockquote><p>上面说到的缓存配置（如清除策略、可读写等），不适用于自定义缓存</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》自定义权限验证@PreAuthorize</title>
      <link href="/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/23.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/23.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义安全表达式"><a href="#自定义安全表达式" class="headerlink" title="自定义安全表达式"></a>自定义安全表达式</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Base root object for use in Spring Security expression evaluations. * * @author Luke Taylor * @since 3.0 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SecurityExpressionRoot</span> <span class="token keyword">implements</span> <span class="token class-name">SecurityExpressionOperations</span></code></pre><p>SecurityExpressionRoot 是所有安全表达式的基类，我们需要做的就是：</p><ol><li>继承 SecurityExpressionRoot，自定义 MethodSecurity 表达式</li><li>继承 DefaultMethodSecurityExpressionHandler，自定义方法级别的安全校验处理器</li><li>继承 GlobalMethodSecurityConfiguration，添加自定义的表达式处理器</li></ol><h2 id="一、MethodSecurityConfig"><a href="#一、MethodSecurityConfig" class="headerlink" title="一、MethodSecurityConfig"></a>一、MethodSecurityConfig</h2><p>开启方法级别的安全校验，注入登录用户时加载 UserDetails 的DB服务对象，通过 createExpressionHandler 注入自定义的表达式处理器。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 配置 MethodSecurity 表达式 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">GlobalMethodSecurityConfiguration</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> LoginDetailService loginDetailService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MethodSecurityConfig</span><span class="token punctuation">(</span>LoginDetailService loginDetailService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loginDetailService <span class="token operator">=</span> loginDetailService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> MethodSecurityExpressionHandler <span class="token function">createExpressionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResourceMethodSecurityExpressionHandler</span><span class="token punctuation">(</span>loginDetailService<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、ResourceMethodSecurityExpressionHandler"><a href="#二、ResourceMethodSecurityExpressionHandler" class="headerlink" title="二、ResourceMethodSecurityExpressionHandler"></a>二、ResourceMethodSecurityExpressionHandler</h2><p>接收 UserDetailsService，并创建一个处理表达式的操作类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义方法级别的安全校验处理器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceMethodSecurityExpressionHandler</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultMethodSecurityExpressionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> LoginDetailService loginDetailService<span class="token punctuation">;</span>    <span class="token keyword">private</span> AuthenticationTrustResolver trustResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationTrustResolverImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResourceMethodSecurityExpressionHandler</span><span class="token punctuation">(</span>LoginDetailService loginDetailService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loginDetailService <span class="token operator">=</span> loginDetailService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> MethodSecurityExpressionOperations <span class="token function">createSecurityExpressionRoot</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">,</span> MethodInvocation invocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ResourceMethodSecurityExpressionRoot root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceMethodSecurityExpressionRoot</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> loginDetailService<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setPermissionEvaluator</span><span class="token punctuation">(</span><span class="token function">getPermissionEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setTrustResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>trustResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setRoleHierarchy</span><span class="token punctuation">(</span><span class="token function">getRoleHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、ResourceMethodSecurityExpressionRoot"><a href="#三、ResourceMethodSecurityExpressionRoot" class="headerlink" title="三、ResourceMethodSecurityExpressionRoot"></a>三、ResourceMethodSecurityExpressionRoot</h2><p>仿照 hasAuthority，编写一个自己的实现</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 自定义 MethodSecurity 表达式 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResourceMethodSecurityExpressionRoot</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityExpressionRoot</span> <span class="token keyword">implements</span> <span class="token class-name">MethodSecurityExpressionOperations</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> LoginDetailService loginDetailService<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object filterObject<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object returnObject<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ResourceMethodSecurityExpressionRoot</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">,</span> LoginDetailService loginDetailService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loginDetailService <span class="token operator">=</span> loginDetailService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自定义接口，是否允许对该id的访问     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canReadCourse</span><span class="token punctuation">(</span>String courseId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"method params courseId"</span><span class="token punctuation">,</span> courseId<span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"current principal {}"</span><span class="token punctuation">,</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasGlobalAuthority</span><span class="token punctuation">(</span>String authority<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">hasAnyGlobalAuthority</span><span class="token punctuation">(</span>authority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">hasAnyGlobalAuthority</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">hasAnyGlobalAuthorityName</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasAnyGlobalAuthorityName</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> String username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UserDetails<span class="token punctuation">)</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> UserDetails details <span class="token operator">=</span> loginDetailService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>details<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> roleSet <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>GrantedAuthority<span class="token operator">:</span><span class="token operator">:</span>getAuthority<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String role <span class="token operator">:</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String defaultedRole <span class="token operator">=</span> <span class="token function">getRoleWithDefaultPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>roleSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>defaultedRole<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">getRoleWithDefaultPrefix</span><span class="token punctuation">(</span>String defaultRolePrefix<span class="token punctuation">,</span> String role<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>role <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> role<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultRolePrefix <span class="token operator">==</span> null <span class="token operator">||</span> defaultRolePrefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> role<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>role<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>defaultRolePrefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> role<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> defaultRolePrefix <span class="token operator">+</span> role<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFilterObject</span><span class="token punctuation">(</span>Object filterObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>filterObject <span class="token operator">=</span> filterObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getFilterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> filterObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReturnObject</span><span class="token punctuation">(</span>Object returnObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>returnObject <span class="token operator">=</span> returnObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getReturnObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> returnObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoleHierarchy</span><span class="token punctuation">(</span>RoleHierarchy roleHierarchy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setRoleHierarchy</span><span class="token punctuation">(</span>roleHierarchy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MyBatis》读书笔记 - MyBatis 中的 XML 详细配置</title>
      <link href="/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/2_XML%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/2_XML%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="二、MyBatis-中的-XML-详细配置"><a href="#二、MyBatis-中的-XML-详细配置" class="headerlink" title="二、MyBatis 中的 XML 详细配置"></a>二、MyBatis 中的 XML 详细配置</h1><p>MyBatis 的配置文件包含了深深影响 MyBatis 行为的设置和属性信息。配置文档的顶层结构如下：</p><ul><li>configuration(配置)<ul><li>properties(属性)</li><li>settings(设置)</li><li>typealiases(类型别名)</li><li>typeHandlers(类型处理器)</li><li>objectFactory(对象工厂)</li><li>plugins(插件)</li><li>environments(环境配置)<ul><li>environment(环境变量)<ul><li>transactionManager(事务管理器)</li><li>dataSource(数据源)</li></ul></li></ul></li><li>databaseIdProvider(数据库厂商标识)</li><li>mappers(映射器)</li></ul></li></ul><h2 id="一、属性（Properties）"><a href="#一、属性（Properties）" class="headerlink" title="一、属性（Properties）"></a>一、属性（Properties）</h2><p>这些属性都是可外部配置且可动态替换的，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/example/config.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev_user<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12345678<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><p>可替换的动态配置属性值：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre><p>如果属性不值在一个地方进行了配置，那么 MyBatis 的加载顺序如下：</p><ul><li>首先读取在 properties 元素体内属性值</li><li>根据 properties 元素中的 resource 属性读取类路径下的文件或 url 读取属性文件，并覆盖已读取的同名属性</li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性</li></ul><p>因此，方法参数传递的属性优先级最高，其次是 resource/url 指定的配置文件，最后是 properties 中指定的属性。</p><p>在 MyBatis 3.4.2 开始，可以为占位符制定一个默认值，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 如果属性 username 没有配置，那么默认值为 ut_user --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username:ut_user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre><p>这个特性默认是关闭的，应该添加一个指定的属性来开启这个特性，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resoure</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/example/config.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 启用默认值特性 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.ibatis.parsing.PropertyParser.enable-default-value<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h2 id="二、设置（settings）"><a href="#二、设置（settings）" class="headerlink" title="二、设置（settings）"></a>二、设置（settings）</h2><p>MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为，下标描述了设置中各项的意图、默认值等。</p><table><thead><tr><th>设置名</th><th>描述</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局地开关映射器中已经配置的缓存</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关，所有关联对象都会延迟加载，可以通过 fetchType 来覆盖该项</td></tr><tr><td>aggressiveLazyLoading</td><td>开启时，任何方法的调用都会加载该对象的所有属性。否则，每个对象会按需加载</td></tr><tr><td>multipleResultSetsEnabled</td><td>是否允许单一语句返回多结果集（需要驱动支持）</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键</td></tr><tr><td>autoMappingBehavior</td><td>指定MyBatis应如何自动映射列到字段或属性。NONE：取消自动映射；PARTIAL：自动映射没有定义嵌套结果集的；FULL：自动映射任意复杂的结果集</td></tr><tr><td>autoMappingUnknownColumnBehavior</td><td>指定发现自动映射目标未知列（或未知属性）的行为。NONE：不做任何反应；WARNING：输出提醒日志；FAILING：映射失败（抛出SqlSessionException）</td></tr><tr><td>defaultExecutorType</td><td>配置默认的执行器。SIMPLE：普通执行器；REUSE 执行器会重用预处理语句；BATCH：执行器将重用语句并执行批量更新</td></tr><tr><td>defaultStatementTimeout</td><td>设置超时时间，决定驱动等待数据库响应的描述</td></tr><tr><td>defaultFetchSize</td><td>为驱动的结果集获取数量（fetchSize）设置一个提示值</td></tr><tr><td>defaultResultSetType</td><td>指定每个语句的省略滚动策略</td></tr><tr><td>safeRowBoundsEnabled</td><td>允许在嵌套语句中使用分页（RowBounds）。false为允许</td></tr><tr><td>safeResultHandlerEnabled</td><td>允许在嵌套局域中使用分页(RowHandler)。false为允许</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启自动驼峰命名规则映射，即从列名 A_COLUMN 到 Java 属性名 aColumn 的类似映射</td></tr><tr><td>localCacheScope</td><td>MyBatis 利用本地缓存机制防止循环引用和加速重复嵌套查询。SESSION：默认，会缓存一个会话中执行的所有查询；STATEMENT：仅用在局域执行上，对相同的 SqlSession 的不同调用不会共享数据</td></tr><tr><td>jdbcTypeForNull</td><td>当没有参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型</td></tr><tr><td>lazyLoadTriggerMethods</td><td>指定哪个对象的方法触发一次延迟加载</td></tr><tr><td>defaultScriptingLanguage</td><td>指定动态 SQL 生成的默认语言</td></tr><tr><td>defaultEnumTypeHandler</td><td>指定 Enum 使用的默认 TypeHandler(3.4.5)</td></tr><tr><td>callSettersOnNulls</td><td>指定当结果集中值为 null 时，是否调用映射对象的 setter 方法。</td></tr><tr><td>returnInstanceForEmptyRow</td><td>当返回的列都是空时，MyBatis默认返回 null。开启后，会返回一个空实例</td></tr><tr><td>logPrefix</td><td>指定 MyBatis 增加到日志名称的前缀</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找</td></tr><tr><td>proxyFactory</td><td>指定 MyBatis 创建具有延迟加载能力的对象所用到的代理工具</td></tr><tr><td>vfsImpl</td><td>指定 VFS 的实现</td></tr><tr><td>useActualParamName</td><td>允许使用方法签名中的名称作为语句参数名称。需要java 8编译，并加上 -parameters 选项</td></tr><tr><td>configurationFactory</td><td>指定一个提供 Configuration 实例的类。这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。这个类必须包含一个签名为 static Configuration getConfiguration() 的方法(3.2.3)</td></tr></tbody></table><p>一个完整的 settings 元素示例如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipleResultSetEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PARTIAL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingUnknownColumnBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARNING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultExecutorType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EXAMPLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultStatementTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultFetchSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>safeRowBoundsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localCacheScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SESSION<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OTHER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>equals,clone,hashCode,toString<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h2 id="三、类型别名（typeAliases）"><a href="#三、类型别名（typeAliases）" class="headerlink" title="三、类型别名（typeAliases）"></a>三、类型别名（typeAliases）</h2><p>类型别名用来减少类完全限定名的冗余，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Author<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.luokaiii.adminservice.model.Author<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cn.luokaiii.adminservice.model.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>也可以指定一个报名，MyBatis 会在包名下搜索 Java Bean，在没有注解的情况下，会使用Bean 的首字母小写的非限定类名来作为它的别名，如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>domain.blog<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span></code></pre><p>或者使用注解的方式，如：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>Java 类型内建的相应类型别名（不区分大小写）：</p><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashMap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table><h2 id="四、类型处理器（typeHandlers）"><a href="#四、类型处理器（typeHandlers）" class="headerlink" title="四、类型处理器（typeHandlers）"></a>四、类型处理器（typeHandlers）</h2><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时，都会用类型处理器将获取的值以合适的方式转换为 Java 类型。</p><table><thead><tr><th>类型处理器</th><th>Java 类型</th><th>JDBC 类型</th></tr></thead><tbody><tr><td>BooleanTypeHandler</td><td>Java.lang.Boolean,boolean</td><td>BOOLEAN</td></tr><tr><td>ByteTypeHandler</td><td>java.lang.Byte,byte</td><td>NUMERIC,BYTE</td></tr><tr><td>ShortTypeHandler</td><td>java.lang.Short,short</td><td>NUMERIC,SMALLINT</td></tr><tr><td>IntegerTypeHandler</td><td>java.lang.Integer,int</td><td>NUMERIC,INTEGER</td></tr><tr><td>FloatTypeHandler</td><td>java.lang.Float,float</td><td>NUMERIC,FLOAT</td></tr><tr><td>DoubleTypeHandler</td><td>java.lang.Double,double</td><td>NUMERIC,DOUBLE</td></tr><tr><td>BigDecimalTypeHandler</td><td>java.math.BigDecimal</td><td>NUMERIC,DECIMAL</td></tr><tr><td>StringTypeHandler</td><td>java.lang.String</td><td>CHAR,VARCHAR</td></tr><tr><td>ClobReaderTypeHandler</td><td>java.io.Reader</td><td>-</td></tr><tr><td>ClobTypeHandler</td><td>java.lang.String</td><td>CLOB,LONGVARCHAR</td></tr><tr><td>NStringTypeHandler</td><td>java.lang.String</td><td>NVARCHAR,NCHAR</td></tr><tr><td>NClobTypeHandler</td><td>java.lang.String</td><td>NCLOB</td></tr><tr><td>BlobInputStreamTypeHandler</td><td>java.io.InputStream</td><td>-</td></tr><tr><td>ByteArrayTypeHandler</td><td>byte[]</td><td></td></tr><tr><td>DateTypeHandler</td><td>byte[]</td><td>L</td></tr><tr><td>DateOnlyTypeHandler</td><td>java.util.Date</td><td>TIMESTAMP</td></tr><tr><td>TimeOnlyTypeHandler</td><td>java.util.Date</td><td>DATE</td></tr><tr><td>SqlTimestampTypeHandler</td><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr><tr><td>SqlDateTypeHandler</td><td>java.sql.Date</td><td>DATE</td></tr><tr><td>SqlTimeTypeHandler</td><td>java.sql.Time</td><td>TIME</td></tr><tr><td>ObjectTypeHandler</td><td>Any</td><td>OTHER</td></tr><tr><td>EnumTypeHandler</td><td>Enum</td><td>VARCHAR</td></tr><tr><td>EnumOrdinalTypeHandler</td><td>Enum</td><td>NUMERIC,DOUBLE</td></tr><tr><td>SqlxmlTypeHandler</td><td>java.lang.String</td><td>SQLXML</td></tr><tr><td>InstantTypeHandler</td><td>java.time.Instant</td><td>TIMESTAMP</td></tr><tr><td>LocalDateTimeTypeHandler</td><td>java.time.LocalDateTime</td><td>TIMESTAMP</td></tr><tr><td>LocalDateTypeHandler</td><td>java.time.LocalDate</td><td>DATE</td></tr><tr><td>OffsetTimeTypeHandler</td><td>java.time.OffsetDateTime</td><td>TIMESTAMP</td></tr><tr><td>ZonedDateTimeTypeHandler</td><td>java.time.ZonedDateTime</td><td>TIMESTAMP</td></tr><tr><td>YearTypeHandler</td><td>java.time.Year</td><td>INTEGER</td></tr><tr><td>MonthTypeHandler</td><td>java.time.Month</td><td>INTEGER</td></tr><tr><td>YearMonthTypeHandler</td><td>java.time.YearMonth</td><td>VARCHAR,LONGVARCHAR</td></tr><tr><td>JapaneseDateTypeHandler</td><td>java.time.chrono.JapaneseDate</td><td>DATE</td></tr></tbody></table><p>可以通过重写类型处理器或创建自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现 org.apache.ibatis.type.TypeHandler 或集成 org.apache.ibatis.type.BaseTypeHandler，然后将它映射到一个 JDBC 类型：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MappedJdbcTypes</span><span class="token punctuation">(</span>JdbcType<span class="token punctuation">.</span>VARCHAR<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleTypeHandler</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTypeHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNonNullParameter</span><span class="token punctuation">(</span>PreparedStatement ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> String parameter<span class="token punctuation">,</span> JdbcType jdbcType<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> String columnName<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token keyword">return</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">getNullableResult</span><span class="token punctuation">(</span>CallableStatement cs<span class="token punctuation">,</span> <span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token keyword">return</span> cs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandler</span> <span class="token attr-name">handler</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.example.ExampleTypeHandler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeHandlers</span><span class="token punctuation">></span></span></code></pre><h2 id="五、对象工厂（objectFactory）"><a href="#五、对象工厂（objectFactory）" class="headerlink" title="五、对象工厂（objectFactory）"></a>五、对象工厂（objectFactory）</h2><p>MyBatis 每次创建结果对象的新实例时，都会使用一个对象工厂（ObjectFactory）实例来完成。要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。</p><p>如何想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现，如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleObjectFactory</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultObjectFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 包含两个创建方法</span>    <span class="token comment" spellcheck="true">// 处理默认构造方法</span>    <span class="token keyword">public</span> Object <span class="token function">create</span><span class="token punctuation">(</span>Class <span class="token class-name">type</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理带参数的构造方法</span>    <span class="token keyword">public</span> Object <span class="token function">create</span><span class="token punctuation">(</span>Class <span class="token class-name">type</span><span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Class<span class="token operator">></span> constructorArgTypes<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span> constructorArgs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span>constructorArgTypes<span class="token punctuation">,</span>constructorArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 可以被用来配置 ObjectFactory，在初始化ObjectFactory后，objectFactory元素体中定义的属性会被传递给 setProperties 方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">isCollection</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Collection<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectFactory</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.example.ExampleObjectFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someProperty<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>objectFactory</span><span class="token punctuation">></span></span></code></pre><h2 id="六、插件（Plugins）"><a href="#六、插件（Plugins）" class="headerlink" title="六、插件（Plugins）"></a>六、插件（Plugins）</h2><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包含：</p><ul><li>Executor（update、query、flushStatements、commit、rollback、getTransaction、close、isClosed）</li><li>ParameterHandler（getParameterObject、setParameters）</li><li>ResultSetHandler（handleResultSets、handleOutputParameters）</li><li>StatementHandler（prepare、parameterize、batch、update、query）</li></ul><p>这些都是很底层的类和方法，如果在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis的核心模块，因此在使用插件的时候要当心。</p><h2 id="七、环境配置（environments）"><a href="#七、环境配置（environments）" class="headerlink" title="七、环境配置（environments）"></a>七、环境配置（environments）</h2><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中。</p><p>如开发、测试、生产环境需要不同的配置；或者现在相同 Schema 的多个库中使用相同的 SQL 映射。</p><blockquote><p>尽管可以配置多个环境，但是每个 SqlSessionFactory 实例只能选择一种环境</p></blockquote><p>环境元素定义了如何配置环境：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enviroments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enviroment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            ...        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enviroment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enviroments</span><span class="token punctuation">></span></span></code></pre><p>这里的关键：</p><ul><li>默认使用的环境ID（default=”development”）</li><li>每个元素都有一个环境ID</li><li>事务管理器的配置</li><li>数据源的配置</li></ul><h3 id="1-事务管理器（transactionManager）"><a href="#1-事务管理器（transactionManager）" class="headerlink" title="1. 事务管理器（transactionManager）"></a>1. 事务管理器（transactionManager）</h3><p>MyBatis 有两种类型的事务管理器：</p><ol><li>JDBC - 直接使用 JDBC 的提交和回滚设置，依赖于从数据源得到的连接来管理事务作用域</li><li>MANAGED - 让容器来管理事务的整个生命周期。默认会关闭连接，然而一些容器不希望这样，因此需要将 closeConnection 设置为 false 来阻止它默认的关闭行为</li></ol><blockquote><p>如果使用 Spring+MyBatis，则没必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p></blockquote><h3 id="2-数据源（DataSource）"><a href="#2-数据源（DataSource）" class="headerlink" title="2. 数据源（DataSource）"></a>2. 数据源（DataSource）</h3><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p><p>MyBatis 提供了三种内建的数据源类型。</p><h4 id="UNPOOLED"><a href="#UNPOOLED" class="headerlink" title="UNPOOLED"></a>UNPOOLED</h4><p>每次被请求时打开和关闭连接</p><h4 id="POOLED"><a href="#POOLED" class="headerlink" title="POOLED"></a>POOLED</h4><p>使用连接池的方式，避免创建新实例时所需的初始化和认证时间</p><h4 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h4><p>为了能在如 EJB 或应用服务器这类容器汇总使用，容器可以集成或在外部配置数据源</p><h4 id="第三方数据源"><a href="#第三方数据源" class="headerlink" title="第三方数据源"></a>第三方数据源</h4><p>可以通过实现接口 <code>org.apache.ibatis.datasource.DataSourceFactory</code> 来使用第三方数据源。</p><h2 id="八、数据库厂商标识（databaseIdProvider）"><a href="#八、数据库厂商标识（databaseIdProvider）" class="headerlink" title="八、数据库厂商标识（databaseIdProvider）"></a>八、数据库厂商标识（databaseIdProvider）</h2><h2 id="九、映射器（mappers）"><a href="#九、映射器（mappers）" class="headerlink" title="九、映射器（mappers）"></a>九、映射器（mappers）</h2><p>mappers 定义 SQL 映射语句，告诉 MyBatis 去哪里找这些语句。如：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用相对于类路径的资源引用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/builder/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用完全限定资源定位符 URL --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///var/mappers/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用映射器接口实现类的完全限定类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder.AuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MyBatis》读书笔记 - 入门</title>
      <link href="/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/1_%E5%85%A5%E9%97%A8/"/>
      <url>/2019/09/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AMybatis%E3%80%8B/1_%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>构建项目，需要引入如下的 dependency 到 pom.xml 中：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>or.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="2-从XML配置SQLSessionFactory"><a href="#2-从XML配置SQLSessionFactory" class="headerlink" title="2. 从XML配置SQLSessionFactory"></a>2. 从XML配置SQLSessionFactory</h2><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。</p><p>以下 XML 配置文件中包含了对 MyBatis 系统的核心设置，如获取数据源(DataSource)和决定事务作用于和控制方式的事务管理器(TransactionManager)：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/example/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>使用类路径下的资源文件进行配置，构建 SqlSessionFactory 实例：</p><pre class=" language-java"><code class="language-java">String resource <span class="token operator">=</span> <span class="token string">"org/mybatis/example/mybatis-config.xml"</span><span class="token punctuation">;</span>InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>SqlSessionFactory sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="3-从SqlSessionFactory-获取-SqlSession"><a href="#3-从SqlSessionFactory-获取-SqlSession" class="headerlink" title="3. 从SqlSessionFactory 获取 SqlSession"></a>3. 从SqlSessionFactory 获取 SqlSession</h2><p>SqlSession 中完全包含了面向数据库执行 SQL 命令所需的所有方法，例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Blog blog <span class="token operator">=</span> <span class="token punctuation">(</span>Blog<span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"org.mybatis.example.BlogMapper.selectBlog"</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者使用一种更简单的方式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    BlogMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Blog blog <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectBlog</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="提示：命名空间（Namespaces）"><a href="#提示：命名空间（Namespaces）" class="headerlink" title="提示：命名空间（Namespaces）"></a>提示：命名空间（Namespaces）</h3><p>命名空间的作用有两个，一个是利用更长的完全限定名来将不同的语句隔离开来，同时也实现了接口绑定。</p><p>命名解析：为了减少输入量，MyBatis 对所有的命名配置元素（包括语句，结果映射，缓存等）使用了如下的命名解析规则。</p><ol><li>完全限定名，将被直接用于查找和使用</li><li>短名称，如果全局唯一也可作为单独的应用。如果不唯一，那么使用时就会出现错误，此时就需要使用完全限定名</li></ol><h2 id="4-基于-XML-映射语句的示例"><a href="#4-基于-XML-映射语句的示例" class="headerlink" title="4. 基于 XML 映射语句的示例"></a>4. 基于 XML 映射语句的示例</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.example.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectBlog<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from Blog where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h2 id="5-基于注解的示例"><a href="#5-基于注解的示例" class="headerlink" title="5. 基于注解的示例"></a>5. 基于注解的示例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM blog WHERE id = #{id}"</span><span class="token punctuation">)</span>    Blog <span class="token function">selectBlog</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="6-作用域（Scope）和生命周期"><a href="#6-作用域（Scope）和生命周期" class="headerlink" title="6. 作用域（Scope）和生命周期"></a>6. 作用域（Scope）和生命周期</h2><p><code>依赖注入框架</code>可以创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。</p><h3 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h3><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要了。</p><p>因此该实例的最佳作用域为<code>方法作用域</code>，可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory，但是使用后最好不要让其一直存在，以保证 XML 资源可以被释放。</p><h3 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h3><p>一旦创建就应该在应用的运行期间一直存在，尽量不要重复创建该实例。</p><p>因此该实例的最佳作用域为<code>应用作用域</code>。可以使用单例模式或静态单例模式来做到。</p><h3 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h3><p>每个线程都应该由自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此不能被共享。</p><p>因此该实例的最佳作用于为<code>请求或方法作用域</code>。绝不能将 SqlSession 的实例引用放在静态域中，甚至一个类的实例变量也不行，也不能将引用放在任何类型的托管作用域中（如Servlet 的HttpSession）。</p><p>如果您使用的是 Web 框架，那么应该考虑将 SqlSession 放在和 Http 请求对象相似的作用域中。即每次 Http 请求，都打开一个 SqlSession，返回响应后就关闭它。</p><h3 id="映射器实例"><a href="#映射器实例" class="headerlink" title="映射器实例"></a>映射器实例</h3><p>映射器是映射Sql语句的接口，该接口的实例是从 SqlSession 中获得的。</p><p>因此该实例的最佳作用于<code>与 SqlSession 的作用域保持一致</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式环境中的并发问题</title>
      <link href="/2019/09/04/SpringCloud/%E5%88%86%E5%B8%83%E5%BC%8F%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/04/SpringCloud/%E5%88%86%E5%B8%83%E5%BC%8F%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>分布式环境中，处理并发问题没发通过操作系统和 JVM 提供的工具来解决，因为 LOCK 命令、总线锁、缓存所、monitor 对象、锁、等并发工具都无法影响到其他服务器的线程。</p><p>那么在分布式环境中，可以使用一下策略和方式处理：</p><ol><li>避免并发<ol><li>通过某些策略和业务来避免并发，如合理分配时间调度，避开共享资源的存取冲突等。</li><li>可以通过hash算法的方式，使一个对象的数据计算和访问都交给同一个线程来完成</li></ol></li><li>时间戳<ol><li>每次系统A发送给系统B的时候都带上一个时间戳，B在拿到通知后，比较时间戳</li><li>这样只需要调用方保证时间戳的时序有效性即可</li></ol></li><li>串行化<ol><li>串行化可能产生并发的问题，通过牺牲性能和扩展性，来满足对数据一致性的要求。</li><li>比如分布式消息系统，没法保证消息的有序性，但是可以通过将分布式消息系统改为单一消息系统，就可以保证消息的有序性了。</li><li>如果接收方无法保证处理的有序性，那么可以使用一个队列将调用信息缓存起来，再串行地处理这些调用</li></ol></li><li>数据库<ol><li>在分布式环境中，数据库是个服务器的共享点，可以通过数据库的高可靠一致性机制来满足需求。</li><li>比如通过唯一性约束，来解决并发过程中重复数据的生产或重复任务的执行</li><li>某些更新操作也尽量使用SQL来完成，在程序中计算后再更新，可能会出现脏复写的问题，但是通过一条SQL来完成计算和更新，就能通过数据库的锁机制来保证更新的一致性</li></ol></li><li>行锁<ol><li>有些事务较为复杂时，无法通过一条SQL解决问题，并且可能存在并发问题，此时可以考虑使用行锁来解决问题</li><li>如 select … for update ，在查询后将该行数据锁定，直到 commit。但是这么做会导致其他涉及该行的所有操作都会被挂起</li><li>通过在表中增加一个标志锁的字段，每次操作之前通过update，来模拟竞争锁的操作，操作完成后再update复位该标志，表示锁归还。（这种操作很类似Redis分布式锁、MongoDB分布式锁，说白了就是自己定义一个模拟竞争锁的场景）</li></ol></li><li>统一触发途径<ol><li>如果一个数据会被多个业务同时涉及到，就会有并发问题产生的隐患。因此可以通过前期架构和业务涉及，尽量统一触发途径，减少并发的可能，也有利于对并发问题的分析和判断。</li></ol></li></ol><p><a href="https://blog.csdn.net/cutesource/article/details/5791350" target="_blank" rel="noopener">文章总结自 : https://blog.csdn.net/cutesource/article/details/5791350</a></p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20190903上海基诺联生物科技有限公司</title>
      <link href="/2019/09/04/Interview/20190903%E4%B8%8A%E6%B5%B7%E5%9F%BA%E8%AF%BA%E8%81%94%E7%94%9F%E7%89%A9/"/>
      <url>/2019/09/04/Interview/20190903%E4%B8%8A%E6%B5%B7%E5%9F%BA%E8%AF%BA%E8%81%94%E7%94%9F%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<ol><li>公司最新的业务，为什么有两个云平台<ol><li>一个教学平台，一个比赛平台，然后说一些业务</li></ol></li><li>搭建过权限架构，使用的是什么框架？是如何实现Spring Security的？Spring Security 是如何实现权限验证的？<ol><li>Spring Security，引入依赖，配置一个Configure，开启Security Method验证，自定义实现UserDetailsService，扩展UserDetails，加载Authority，默认存入Session中，可以将Session扩展到Redis、MongoDB等地方保存，即可加载出用户信息到 SecurityContext 中。</li><li>通过@PreAuthorize 可以验证之前加载的Authority权限数组。</li></ol></li><li>如果用户保存在Session中，那么权限变更后如何重新加载权限？<ol><li>现在的解决方案：SpringSecurity 是通过 @PreAuthorize 的 SecurityExpressionOperations 实现类，如 hasAuthority()、hasAnyAuthority(…) 来验证的，那么我们只要实现一个 hasCustomAuthority() 改为从Redis、MongoDB等地直接获取用户存储的权限即可。通过使用自定义的接口，扩展Security的验证</li><li>不用担心性能问题，因为我们的Session存储在Redis、MongoDB中，那么程序每次获取Session时，都会从Redis、MongoDB中取。那么自定义接口所修改的，只是从spring_sessions表改为了自己的用户权限表。</li></ol></li><li>JDK版本是多少？1.8 有哪些新特性？说说你对流式编程的理解？如何从List<user>中取出所有的username？<ol><li>jdk8主要增加了对集合类的流式操作，也就是所说的lambda表达式，使我们对集合的遍历等操作更加便利。</li><li>userList.stream().map(val -&gt; val.getUsername()).collect(toList())</li></ol></user></li><li>用过索引没？谈谈索引的作用？谈谈复合索引<ol><li>索引的主要作用是优化查询，在数据库的某一个字段上创建了索引后，对该表的某一个字段查询时，将不再遍历整张表，而是遍历索引树。但是索引不应该创建的过多，如果索引树过于庞大的话，对性能也有很大的影响</li><li>复合索引，就是以一个数组的方式保存多个字段，然后在查询时，依次按照索引的位置从左到右查询</li><li>以下来自于“高性能MySQL”中对索引设计的规范：<ol><li>禁止给每个列都建立索引，单表索引建议不超过5个</li><li>索引定义在SELECT、UPDATE、DELETE语句的WHERE从句中的列</li><li>索引定义在OrderBy、GroupBy、Distinct中的字段</li><li>多表Join的字段</li><li>复合索引，区分度高的放左侧、字段长度小的放左侧、使用最频繁的放左侧</li><li>避免冗余索引和重复索引，MySQL在执行优化时需要选择具体的索引，降低了索引使用效率</li><li>避免使用外键约束，建议在业务端保证数据的参照完整性，因为外键会影响父表和子表的写操作而降低性能</li><li>不建议使用外键约束，但一定要在表与表的关联键上建立索引</li></ol></li></ol></li><li>说一说数据库事务是什么？回滚是在什么情况下发生的(提示)？<ol><li>我只说了数据隔离，然后被提示之后才想到一致性</li><li>数据隔离，比如数据插入时阻塞其他插入操作，数据查询时阻塞其他插入操作等，这些由数据库的事务隔离级别来决定（还好没问我数据库的隔离级别，越简单的越不容易记），避免脏读</li><li>回滚是为了保存数据的一致性，在同一个事务中执行的SQL会保持一致性，只能全部执行成功。如果某一个SQL出现了异常，会导致整个事务回滚到执行之前的状态。</li></ol></li><li>什么是分布式锁？怎么实现分布式锁？<ol><li>分布式锁就是为了解决集群环境时，JVM和锁无法工作的问题。因为多台服务器的线程彼此之间没办法互相加锁，因此需要一些第三方中间件来帮助我们来模拟加锁行为。</li><li>比如Redis、Zookeeper、MongoDB等中间件，我们定义一个标识位，在我们进行一些对数据有要求的插入等操作时，为了避免其他线程同时执行，我们需要在执行之前尝试获取这个标志位，如果获取成功了，那么执行，获取失败则等待、轮询、或者抛出异常。</li></ol></li><li>Redis是如何实现分布式锁的？<ol><li>Redis有一个setNX的语句，是一个CAS操作，会先比较某一个值是否存在，如果不存在才设置，存在则不设置。</li><li>setNX比直接查询再赋值，要原子化，将查询并修改合为一个操作。查询再赋值的操作再怎么快也是有时间间隔的。</li></ol></li><li>Redis有哪些数据结构？(对Redis不太熟悉，带过了)<ol><li>string、hash、list、set、sorted set（后续查的）</li></ol></li><li>公司是如何使用Docker的？Docker是如何创建镜像的？<ol><li>（白话）公司将Nginx、后台的Java Jar、前端编译后的包，都挂载到docker上，并使用容器的方式启动和运行。使用Docker能够保证每次容器运行时的环境都是隔离的。使用方法：在项目根目录下写一个Dockerfile，然后在文件中指定所需的jdk版本、redis等其他中间件服务。（后面这段没回答上来）然后通过 docker build 的方法生成镜像，然后将镜像通过 docker push 的方式推送到远程云上。push之后我就不知道了。这些是从公司的jenkins上学到的。</li></ol></li><li>你有什么要了解的吗？<ol><li>打脸行为：</li><li>问：技术栈听贴合的，那么公司用的什么ORM框架呢？答：Mybatis，你用的是JPA？</li><li>就这吧，嘟嘟嘟……</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/08/19/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/12%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E7%B4%A2%E5%BC%95/"/>
      <url>/2019/08/19/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/12%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 寻找数组的中心索引 * 给定一个整数类型的数组 nums，请编写一个能够返回数组“中心索引”的方法。 * &lt;p> * 我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。 * &lt;p> * 如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。 * &lt;p> * 示例 1: * &lt;p> * 输入: * nums = [1, 7, 3, 6, 5, 6] * 输出: 3 * 解释: * 索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。 * 同时, 3 也是第一个符合要求的中心索引。 * 示例 2: * &lt;p> * 输入: * nums = [1, 2, 3] * 输出: -1 * 解释: * 数组中不存在满足此条件的中心索引。 * 说明: * &lt;p> * nums 的长度范围为 [0, 10000]。 * 任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：先求出数组综合，然后遍历数组，左侧和不断相加，右侧和是总和减去左侧及当前元素。     * 当左右侧和相同时，返回当前下标。否则返回-1     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">pivotIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> leftSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftSum <span class="token operator">==</span> sum <span class="token operator">-</span> leftSum <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            leftSum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/08/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%8B/0%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/08/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%87%8D%E6%9E%84-%E6%94%B9%E5%96%84%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%8B/0%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果你发现自己需要为程序添加一个特性，而代码结构使你无法很方便地达成目的，那就先重构那个程序，使特性的添加比较容易进行，然后再添加特性。</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>    <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>    <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"jdk8"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"jdk8"</span><span class="token punctuation">,</span>            <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"docker"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"容器技术"</span><span class="token punctuation">,</span>            <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"spring"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"spring"</span><span class="token punctuation">,</span>            <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"children"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"ioc"</span><span class="token punctuation">,</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"ioc"</span><span class="token punctuation">,</span>                    <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"aop"</span><span class="token punctuation">,</span>                    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"aop"</span><span class="token punctuation">,</span>                    <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"springboot"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"springboot"</span><span class="token punctuation">,</span>            <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">"springcloud"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"springcloud"</span><span class="token punctuation">,</span>            <span class="token property">"leaf"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/08/06/docker/Docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
      <url>/2019/08/06/docker/Docker%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="升级Docker版本"><a href="#升级Docker版本" class="headerlink" title="升级Docker版本"></a>升级Docker版本</h1><ol><li>sudo apt-get remove docker docker-engine docker.io # 移除旧版本</li><li>sudo apt-get update # 更新软件源</li><li>sudo apt-get install apt-transport-https ca-certificates curl software-properties-common # 安装依赖包</li><li>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu/gpg</a> | sudo apt-get add - # 添加官方密钥</li><li>sudo add-apt-repository “deb [arch=amd64] <a href="https://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable” # 添加仓库</li><li>sudo apt-get update # 更新软件源</li><li>sudo apt-get install docker-ce # 安装docker</li><li>docker -v # 查看docker版本</li></ol><h1 id="Docker-API版本异常"><a href="#Docker-API版本异常" class="headerlink" title="Docker API版本异常"></a>Docker API版本异常</h1><p>异常：Error response from daemon: client is newer than server (client API version: 1.23, server API version: 1.20)</p><p>原因：客户端与服务端的版本不一致，导致docker命令无法使用。</p><p>解决方法：export DOCKER_API_VERSION=1.2.0，将客户端版本将至与服务端一致。或者将服务端版本升级到1.23</p><h1 id="Docker-启动、重启命令"><a href="#Docker-启动、重启命令" class="headerlink" title="Docker 启动、重启命令"></a>Docker 启动、重启命令</h1><ol><li>systemctl start docker 启动</li><li>sudo systemctl daemon-reload 守护进程重启</li><li>systemctl restart docker 重启</li><li>sudo service docker restart 重启</li><li>service docker stop 关闭</li><li>systemctl stop docker 关闭</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 从零到有部署一个Java项目</title>
      <link href="/2019/08/05/CICD/jenkins-springboot/"/>
      <url>/2019/08/05/CICD/jenkins-springboot/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Nginx-Jenkins-部署-SpringBoot-Jar"><a href="#Docker-Nginx-Jenkins-部署-SpringBoot-Jar" class="headerlink" title="Docker + Nginx + Jenkins 部署 SpringBoot Jar"></a>Docker + Nginx + Jenkins 部署 SpringBoot Jar</h1><p>本文能解决的问题：</p><ol><li>如何使用Docker 部署Jenkins</li><li>Jenkins 会重写url(使用三级域名)</li><li>nginx 配置 jenkins、前端、后端</li><li>部署 Maven 子项目(单 maven 项目更简单，我相信你们能举一反三)</li></ol><h2 id="一、docker-compose"><a href="#一、docker-compose" class="headerlink" title="一、docker-compose"></a>一、docker-compose</h2><p>编写 docker-compose，连接 nginx 与 jenkins。</p><blockquote><p>如果不是使用 Docker 做容器管理，此步可忽略。直接启动 Nginx 与 Jenkins 即可。</p></blockquote><pre class=" language-sh"><code class="language-sh">version: '3'services:  jenkins:    container_name: 'jenkins.ci'    image: 'jenkins/jenkins:lts'    #ports:  不对外暴露端口，直接使用nginx容器转到8080      #- '8080:8080'      #- '50000:50000'    volumes:      - '/home/docker-images/jenkins/var/jenkins_home:/var/jenkins_home'      - '/home/docker-images/jenkins/html:/usr/share/jenkins/html' #挂载编译打包后的存放路径  nginx:    container_name: 'nginx'    depends_on:      - jenkins    image: nginx:alpine    volumes:      - '/home/luokaiii/backstage_page/html:/usr/www/luokaiii/cn/html'      - '/home/docker-images/nginx/conf:/etc/nginx/conf.d'      - '/home/docker-images/nginx/cert:/etc/nginx/cert'    ports:      - 80:80 # 对外统一使用80端口      - 443:443    restart: always</code></pre><h2 id="二、nginx-conf"><a href="#二、nginx-conf" class="headerlink" title="二、nginx.conf"></a>二、nginx.conf</h2><pre class=" language-sh"><code class="language-sh">upstream apisupport {    # 自己部署的后端服务，因为是在容器访问外部服务，所以需要使用内网IP    # 第二种方法是在 docker-compose 中将 jar 作为一个 service 连接    server xxx.xx.xx.xxx:9000;}# 这里用到了 docker-compose 中的容器，如果没用docker，直接写localhost就可以了。upstream dk-jenkins {    server jenkins:8080;}server {    listen 80 default_server;    listen [::]:80 default_server;    server_name www.luokaiii.cn;    return    301 https://$server_name$request_uri; }server {    listen 80;    # 我用了一个 三级域名来处理Jenkins的请求，因为 jenkins 会从根目录查找静态资源和发送请求，总是会重写url。    server_name jenkins.luokaiii.cn;    location / {        proxy_pass http://dk-jenkins/;    }}# 如果没有 https 证书，直接将 ssl 以下的部分写在 80 里就行了server {     listen 443 ssl;     server_name www.luokaiii.cn luokaiii.cn;     # ssl config    ssl on;   #设置为on启用SSL功能。    ssl_certificate cert/2292046_www.luokaiii.cn.pem;    ssl_certificate_key cert/2292046_www.luokaiii.cn.key;    ssl_session_timeout 5m;    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_prefer_server_ciphers on;     # 压缩请求，这样服务返回会快一些，毕竟国内带宽很贵的    gzip on;    gzip_min_length 1k;    gzip_comp_level 9;    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;    gzip_vary on;    gzip_disable "MSIE [1-6]\.";    # 静态资源代理，在Jenkins部署前端项目的文章中，就是把前端静态文件部署在该目录下，直接由nginx代理即可。    root /usr/www/luokaiii/cn/html;    location / {        try_files $uri $uri/ /index.html;    }    # 请求转发，将 /api/ 请求转发到 jar 服务上    location /api/ {        proxy_pass http://apisupport/;        proxy_redirect  http://api/support/ https://www.luokaiii.cn/api/;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host  $host;        proxy_set_header X-Real_IP  $remote_addr;        proxy_set_header REMOTE-HOST $remote_addr;        proxy_set_header X-Nginx-Proxy true;        proxy_connect_timeout 300;        proxy_send_timeout 300;        proxy_read_timeout 600;        proxy_buffer_size 256k;        proxy_buffers 4 256k;        proxy_busy_buffers_size 256k;        proxy_temp_file_write_size 256k;        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504 http_404;        proxy_max_temp_file_size 128m;        proxy_http_version 1.1;        #proxy_cache mycache;        #proxy_cache_valid 200 302 1h;        #proxy_cache_valid 301 1h;        #proxy_cache_valid any 1m;    }}</code></pre><blockquote><p>这里使用了一个三级域名来代理 Jenkins，因为 Jenkins 总是会从根目录查找静态资源，以及发送请求。如果是 <a href="http://www.luokaiii.cn/jenkins/" target="_blank" rel="noopener">www.luokaiii.cn/jenkins/</a> 的话总是会被重写为 <a href="http://www.luokaiii.cn，所以直接用三级域名，让它从根目录找好了。" target="_blank" rel="noopener">www.luokaiii.cn，所以直接用三级域名，让它从根目录找好了。</a></p><p>如果有知道如何代理的大佬也可以告诉我，虚心请教，谢谢。</p></blockquote><h2 id="三、SpringBoot-项目"><a href="#三、SpringBoot-项目" class="headerlink" title="三、SpringBoot 项目"></a>三、SpringBoot 项目</h2><p>这里项目以我自己写的 Demo <a href="https://github.com/luokaiii/luokaiii.api" target="_blank" rel="noopener"><a href="https://github.com/luokaiii/luokaiii.api" target="_blank" rel="noopener">https://github.com/luokaiii/luokaiii.api</a></a> 为例，一个 Maven 多级项目，我们只部署其中的 admin-server 模块。</p><p>具体的项目是怎么写的就不说了，大致是：打开idea  &gt; 新建 Spring Initializr &gt; 选择maven &gt; 在 Application 中写一个 GetMapping &gt; OK</p><h2 id="四、进入正题"><a href="#四、进入正题" class="headerlink" title="四、进入正题"></a>四、进入正题</h2><p>打开Jenkins，并新建一个 Freestyle（即自由风格的软件项目）。</p><p>除了上一节 <a href="https://www.jianshu.com/p/e34674f34242" target="_blank" rel="noopener">Jenkins部署前端React项目</a> 中所需的依赖之外，这里还需要 <code>Maven Integration</code> 依赖。</p><h3 id="1-项目描述（随便写）"><a href="#1-项目描述（随便写）" class="headerlink" title="1. 项目描述（随便写）"></a>1. 项目描述（随便写）</h3><p><img src="https://i.loli.net/2019/08/06/3AErybK1UaCoXgv.png" alt="UTOOLS1565082361195.png"></p><h3 id="2-源码管理"><a href="#2-源码管理" class="headerlink" title="2. 源码管理"></a>2. 源码管理</h3><p>刚创建的用户，Credentials 可能为空，创建一个 username+password(一般是你的git账号密码)就行，(如果觉得不安全，可以使用SSH的方式，自己百度)。</p><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\1565082401841.png" alt="1565082401841"></p><blockquote><p>这里分支使用的是 <code>develop</code>，原因：在 Git Flow 中，develop 为开发分支(这里用来做测试服务器的分支)，master 为主分支(即正式服务器的分支)。</p><p>因人而异，你想用 master 也行，反正不是我的项目，哈哈。</p></blockquote><h3 id="3-构建（jenkins与测试服务器在同一台服务器上）"><a href="#3-构建（jenkins与测试服务器在同一台服务器上）" class="headerlink" title="3. 构建（jenkins与测试服务器在同一台服务器上）"></a>3. 构建（jenkins与测试服务器在同一台服务器上）</h3><p>如果你的 jenkins 部署在测试服务器上，那么直接将打包后的 jar 文件移动至指定目录即可。</p><ol><li>调用顶层 Maven 目标，使用maven 打包项目<ol><li>因为打包的是子项目，所以使用 -pl 参数指定需要打包的子项目，通过 -am 参数开启依赖项目的构建</li><li>-Dmaven.test.skip=true 跳过测试(一般对单元测试有严格要求的都不应该跳过此步骤)</li></ol></li><li>Send files or execute commands over SSH<ol><li>通过 SSH发送文件或执行命令 </li><li>因为jenkins与测试在一起，所以我们只需要执行mv命令即可</li><li>下面的jenkins与服务器分开(比如正式服部署，总不能还浪费带宽吧)，就需要发送将jar发送到服务器然后运行</li></ol></li></ol><p><img src="https://i.loli.net/2019/08/06/nSx9yFpINqrEAlo.png" alt="UTOOLS1565082655139.png"></p><blockquote></blockquote><h3 id="4-构建（jenkins与测试服务器分离）"><a href="#4-构建（jenkins与测试服务器分离）" class="headerlink" title="4. 构建（jenkins与测试服务器分离）"></a>4. 构建（jenkins与测试服务器分离）</h3><p>跟步骤3没什么太大的区别，只是将 jar 发送到服务器。</p><p><img src="https://i.loli.net/2019/08/06/he49txiGX5PQgzT.png" alt="UTOOLS1565083626352.png"></p><blockquote><p>最后一句 <code>pm2 restart api-support</code> 类似于 <code>nohup java -jar xxx.jar</code> 我是使用 pm2 管理的jar包，有兴趣的可以自己查一下(或者推荐一下其他的进程管理工具也行)。</p></blockquote><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h2><p>随便提交一次代码，点击立即构建。经过漫长的等待(maven首次更新、向服务器发送jar包)，打印出以下日志。</p><p><img src="https://i.loli.net/2019/08/06/GaonXC9TAKLF1wr.png" alt="构建成功"></p><p>完成，收工！</p><blockquote><p>最后提一下我为什么会写两种构建方式，因为我先用步骤 四4 中的构建时，1M (上行才100多k，T_T)小水管发一个 jar 包快二十分钟了。所以想到同服务器还是直接拷贝的比较好。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins 从零到有部署一个前端项目</title>
      <link href="/2019/08/05/CICD/jenkins-react/"/>
      <url>/2019/08/05/CICD/jenkins-react/</url>
      
        <content type="html"><![CDATA[<h1 id="Jenkins-从零到有部署一个React项目"><a href="#Jenkins-从零到有部署一个React项目" class="headerlink" title="Jenkins 从零到有部署一个React项目"></a>Jenkins 从零到有部署一个React项目</h1><h2 id="一、下载并启动Jenkins"><a href="#一、下载并启动Jenkins" class="headerlink" title="一、下载并启动Jenkins"></a>一、下载并启动Jenkins</h2><p>从 <a href="https://jenkins.io/download/" target="_blank" rel="noopener">Jenkins 官网</a>下载所需的版本，这里使用 Docker 容器部署 Jenkins war(你也可以直接使用 <code>java -jar jenkins.war -httpPort=8080</code> 来启动，这样的话直接进入 <a href="#1.  填写密码">填写密码(锚点)</a> 即可。)。</p><blockquote><p>注意：我们并没有使用 hub.docker.com 中提供的 jenkins/jenkins 这个镜像。因为我试了一下没装成功，哈哈。</p></blockquote><p>在 war 包的同级目录下，编写 Dockerfile，如下：</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8VOLUME /tmpCOPY jenkins.war app.warENTRYPOINT ["java","-jar","app.war","--httpPort=8080"]</code></pre><p>构建 jenkins 镜像</p><pre class=" language-sh"><code class="language-sh">#使用Dockerfile构建jenkins镜像docker build -t luokaiii.jenkins .</code></pre><p>编写 jenkins 启动脚本， start.sh：</p><pre class=" language-sh"><code class="language-sh">docker run \  --name luokaiii.jenkins \  -p 8080:8080 \  -p 50000:50000 \  -v jenkins_home:/var/jenkins_home \  -d luokaiii.jenkins</code></pre><blockquote><p>注意：1. 需要给 start.sh 文件授权，否则无法执行；2. 通过 -v 命令将jenkins文件挂载到本地；</p></blockquote><h2 id="二、环境初始化"><a href="#二、环境初始化" class="headerlink" title="二、环境初始化"></a>二、环境初始化</h2><h3 id="1-填写密码"><a href="#1-填写密码" class="headerlink" title="1.  填写密码"></a>1.  填写密码</h3><p>运行上面写的 start.sh 启动脚本，并打开 localhost:8080，稍等片刻就会提示我们输入初始密码。</p><p>进入 jenkins 容器，<code>docker exec -it luokaiii.jenkins bash</code> （如果提示有误，则可以使用 container 的 id 来进入），找到位于 <code>/root/.jenkins/secrets/initialAdminPassword</code> 的密码并填写进入。</p><h3 id="2-安装插件"><a href="#2-安装插件" class="headerlink" title="2. 安装插件"></a>2. 安装插件</h3><p>密码输入成功后，会提示我们选择需要安装的插件，这里我选择的是社区推荐插件。对于新入门的用户来说，推荐的往往够用了。</p><p><img src="https://i.loli.net/2019/08/05/URXsYagSkyl96pP.png" alt="安装插件中..."></p><p>在插件安装完成之后，我们需要加入以下额外的插件：</p><ol><li>Publish Over SSH     // 向服务器发送文件</li><li>SSH         // 需要 SSH 来连接服务器</li><li>Config File Provider</li><li>NodeJS     // 因为我们的测试项目是使用 react 写的一个模拟项目，因此需要NodeJS 与 npm 进行编译</li></ol><blockquote><p>添加插件的目录为：Manage Jenkins &gt; Manage Plugins &gt; 可选插件</p></blockquote><h3 id="3-新建一个管理员账户"><a href="#3-新建一个管理员账户" class="headerlink" title="3. 新建一个管理员账户"></a>3. 新建一个管理员账户</h3><p><img src="https://i.loli.net/2019/08/05/CYpL2sb3PlefOAi.png" alt="创建账户"></p><p>ok，安装成功，进入我们的正题。</p><p><img src="https://i.loli.net/2019/08/05/foPH29MNlGvrXsk.png" alt="欢迎来到 Jenkins"></p><h2 id="三、使用-SSH-登录服务器"><a href="#三、使用-SSH-登录服务器" class="headerlink" title="三、使用 SSH 登录服务器"></a>三、使用 SSH 登录服务器</h2><p>配置 SSH Key 有两种方式，一种是在本地生成，然后将公钥发送至服务器；另一种是在服务器生成，将私钥拷贝至本地。(好像没啥区别啊)</p><h3 id="1-在本地电脑生成-SSH"><a href="#1-在本地电脑生成-SSH" class="headerlink" title="1.  在本地电脑生成 SSH"></a>1.  在本地电脑生成 SSH</h3><ol><li>打开命令行，生成ssh-key：<code>ssh-keygen -t rsa</code></li><li>将ssh-key 发送至服务器：<code>ssh-copy-id -i ~/.ssh/id_rsa.pub root@xxx.xxx.xxx.xxx</code></li><li>输入服务器密码，即可上传成功</li><li>验证登录：<code>ssh root@xxx.xxx.xxx.xxx -i id_rsa</code> </li><li>输入私钥的 password 即可</li></ol><h3 id="2-服务器端生成-SSH"><a href="#2-服务器端生成-SSH" class="headerlink" title="2.  服务器端生成 SSH"></a>2.  服务器端生成 SSH</h3><ol><li>使用密码登录远程服务器</li><li>执行命令 ssh-keygen ，输入文件地址、密码等信息，如名为 ssh_rsa</li><li>将 生成的私钥拷贝出来，放到需要连接的电脑上(可以新建文件，把 ssh_rsa 的内容拷贝进去)</li><li>重设本地文件的权限 chmod 0600 ssh_rsa</li><li>开启 SSH Key 登录<ol><li>在远程服务器中找到 /etc/ssh/sshd_config</li><li>将以下两个参数设置为 on(默认为on)<ol><li>RSAAuthentication on</li><li>PubkeyAuthentication on</li></ol></li></ol></li><li>关闭 密码 登录(可选，前提是你要确保之前的私钥备份好了，不然可就无法登陆了)<ol><li>将 PasswordAuthentication 改为 no</li></ol></li><li>测试使用 SSH Key 登录服务器<ol><li>ssh <a href="mailto:root@xxx.xxx.xxx.xxx" target="_blank" rel="noopener">root@xxx.xxx.xxx.xxx</a> -p port -i ~/.ssh/id_rsa</li><li>xxx.xxx.xxx.xxx 为服务器 ip 地址</li><li>port 为服务器登录端口</li><li>~/.ssh/id_rsa 为本地私钥地址</li></ol></li></ol><h2 id="四、配置SSH"><a href="#四、配置SSH" class="headerlink" title="四、配置SSH"></a>四、配置SSH</h2><p>进入 Manage Jenkins &gt;  Configure System，并作出以下两个修改：</p><h3 id="1-SSH-remote-hosts"><a href="#1-SSH-remote-hosts" class="headerlink" title="1. SSH remote hosts"></a>1. SSH remote hosts</h3><p>配置远程服务器</p><p><img src="https://i.loli.net/2019/08/05/ulX69MTxD1HFwYQ.png" alt="UTOOLS1564997986052.png"></p><h3 id="2-Publish-over-SSH"><a href="#2-Publish-over-SSH" class="headerlink" title="2.Publish over SSH"></a>2.Publish over SSH</h3><p>配置推送文件时的服务器配置，使用 ssh key</p><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\1564997904177.png" alt="1564997904177"></p><h2 id="四、配置完整的任务"><a href="#四、配置完整的任务" class="headerlink" title="四、配置完整的任务"></a>四、配置完整的任务</h2><p>新建一个 <code>Freestyle project</code></p><p><img src="http://img.pic35.com/uploads/allimg/170701/1-1FF11312380-L.jpg" alt="手动狗头"></p><p>设置源码仓库地址，并添加用户名密码、或 SSHKey 的凭证</p><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\1564996570789.png" alt="源码管理"></p><p>构建前的环境配置，指定服务器地址、<a href="">#NodeJS版本</a></p><p><img src="https://i.loli.net/2019/08/05/MbAGENWmIod94rP.png" alt="构建环境"></p><p>执行构建，并打印 Node 与 NPM 的版本，来确定是否安装成功；指定 npm 仓库为taobao镜像，并进行编译(react 编译后的文件放在 /build 下，其他语言参照各自特性而定)</p><p><img src="https://i.loli.net/2019/08/05/XPuSnVHjb21pqG7.png" alt="构建"></p><p>构建完成后，就是把生成的 build 目录发送至服务器指定目录了。如果您使用了 nginx 作了静态代理，则只需将 build 后的文件发送至该目录即可。</p><p><img src="C:\Users\user\AppData\Roaming\Typora\typora-user-images\1564996807629.png" alt="构建后操作"></p><h2 id="五、测试是否正确安装及配置"><a href="#五、测试是否正确安装及配置" class="headerlink" title="五、测试是否正确安装及配置"></a>五、测试是否正确安装及配置</h2><h3 id="1-随便修改点文件，提交至github上"><a href="#1-随便修改点文件，提交至github上" class="headerlink" title="1. 随便修改点文件，提交至github上"></a>1. 随便修改点文件，提交至github上</h3><h3 id="2-点击立即构建"><a href="#2-点击立即构建" class="headerlink" title="2. 点击立即构建"></a>2. 点击立即构建</h3><p><img src="https://i.loli.net/2019/08/05/QlRNP3zxiLmOeJ6.png" alt="立即构建"></p><h3 id="3-打开控制台输出，查看日志"><a href="#3-打开控制台输出，查看日志" class="headerlink" title="3. 打开控制台输出，查看日志"></a>3. 打开控制台输出，查看日志</h3><p>不出意外的话，控制台中会依次打印出一下日志(日志太长，这里就不贴了，仔细看一下应该都很好理解，也不是什么比较难的单词)</p><ol><li>git fetch –tags ….   // 从远程拉取代码</li><li>node -v ； npm -v     // 打印的node版本</li><li>npm  install –registry…    // 修改npm 镜像源</li><li>npm run build        // 开始构建</li><li>[SSH] executing post build script    // 连接并上传build目录</li></ol><h3 id="4-重新访问项目地址"><a href="#4-重新访问项目地址" class="headerlink" title="4. 重新访问项目地址"></a>4. 重新访问项目地址</h3>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第二十二章 Expression-Based Access Control - 基于表达式的访问控制</title>
      <link href="/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/22.ExpressionControl/"/>
      <url>/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/22.ExpressionControl/</url>
      
        <content type="html"><![CDATA[<h1 id="第二十二章-Expression-Based-Access-Control-基于表达式的访问控制"><a href="#第二十二章-Expression-Based-Access-Control-基于表达式的访问控制" class="headerlink" title="第二十二章 Expression-Based Access Control - 基于表达式的访问控制"></a>第二十二章 Expression-Based Access Control - 基于表达式的访问控制</h1><p>Spring Security 使用 SpringEL 作为表达式支持。</p><h2 id="一、常用的内置表达式"><a href="#一、常用的内置表达式" class="headerlink" title="一、常用的内置表达式"></a>一、常用的内置表达式</h2><table><thead><tr><th>Expression</th><th>Description</th></tr></thead><tbody><tr><td>hasRole([role])</td><td>主体是有具有指定角色</td></tr><tr><td>hasAnyRole([role…])</td><td>主体是有具有指定角色之一</td></tr><tr><td>hasAuthority([authority])</td><td>是否具有指定权限</td></tr><tr><td>hasAnyAuthority([authority…])</td><td>是否具有指定权限之一</td></tr><tr><td>principal</td><td>允许直接访问主体对象</td></tr><tr><td>authentication</td><td>允许直接从 SecurityContext 获取当前主体</td></tr><tr><td>permitAll</td><td>总是为true</td></tr><tr><td>denyAll</td><td>总是为false</td></tr><tr><td>isAnonymous()</td><td>是否是匿名用户</td></tr><tr><td>isRememberMe()</td><td>是否是 remember-me 用户</td></tr><tr><td>isAuthenticated()</td><td>是否不是匿名用户</td></tr><tr><td>isFullyAuthenticated()</td><td>是否不是匿名用户，且不是remember-me 用户</td></tr><tr><td>hasPermission(Object target,Object permission)</td><td>用户是否可以访问权限为permission的目标</td></tr><tr><td>hasPermission(Object targetId,String targetType,Object permission)</td><td>用户是否可以访问权限为permission的目标</td></tr></tbody></table><h2 id="二、方法注解表达式"><a href="#二、方法注解表达式" class="headerlink" title="二、方法注解表达式"></a>二、方法注解表达式</h2><p><code>这两个注解 @PreAuthorize(&quot;hasRole(&#39;USER&#39;)&quot;)</code> 与 <code>@PreAuthorize(&quot;hasPermission(#contact, &#39;ADMIN&#39;)&quot;)</code> 能够使用在具体的方法上，以一个方法参数作为表达式的一部分，来决定当前用户是否拥有给定的权限。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第二十一章 Security Object Implementations - 安全对象的实现</title>
      <link href="/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/21.SecurityAOP/"/>
      <url>/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/21.SecurityAOP/</url>
      
        <content type="html"><![CDATA[<h1 id="第二十一章-Security-Object-Implementations-安全对象的实现"><a href="#第二十一章-Security-Object-Implementations-安全对象的实现" class="headerlink" title="第二十一章 Security Object Implementations - 安全对象的实现"></a>第二十一章 Security Object Implementations - 安全对象的实现</h1><p>Spring Security 在2.0之后，通过配置的 MethodSecurityInterceptor 来确保 MethodInvocation 能够拦截到特定的 Bean 或者在多个 Bean 之间共享。拦截器使用 MethodSecurityMetadataSource 实例获取应用于特定方法调用的配置属性。</p><p>MapBasedMethodSecurityMetadataSource 用于存储由方法名称键值的配置属性，并在内部使用 <intercept-methods> 或 <protect-point> 标签来定义属性。</protect-point></intercept-methods></p><p>大致的意思是，配置一个 MethodSecurityInterceptor 显式的方法安全拦截器，可以使用 Spring AOP 的代理机制结合 AspectJSecurityInterceptor，来拦截指定的方法。进行方法保护。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第二十章 Authorization Architecture - 授权架构</title>
      <link href="/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/20.AuthorizationArchitecture/"/>
      <url>/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/20.AuthorizationArchitecture/</url>
      
        <content type="html"><![CDATA[<h1 id="第二十章-Authorization-Architecture-授权架构"><a href="#第二十章-Authorization-Architecture-授权架构" class="headerlink" title="第二十章 Authorization Architecture - 授权架构"></a>第二十章 Authorization Architecture - 授权架构</h1><h2 id="一、Authorization"><a href="#一、Authorization" class="headerlink" title="一、Authorization"></a>一、Authorization</h2><p>所有的 Authentication 都存储着一个 GrantedAuthority 对象列表，这些对象代表了 Principal 所具有的权利。</p><p>GrantedAuthority 由 AuthenticationManager 插入到 Authentication 对象中，然后由 AccessDecisionManager 在作出授权决策时读取。</p><p>GrantedAuthority 只有一个方法接口： getAuthority()，该方法允许 AccessDecisionManager 获得 GrantedAuthority，通过字符串的形式返回。</p><p>SimpleGrantedAuthority 实现了 GrantedAuthority，这将允许任何用户 将 String 转换为 GrantedAuthority，在 Spring Security 中，所有的 AuthenticationProvider 都是用 SimpleGrantedAuthority 来填充 Authentication 对象。</p><h2 id="二、Pre-Invocation-Handling-预处理"><a href="#二、Pre-Invocation-Handling-预处理" class="headerlink" title="二、Pre-Invocation Handling - 预处理"></a>二、Pre-Invocation Handling - 预处理</h2><p>Spring Security 提供了 拦截器，用于控制安全对象的访问，比如方法调用或 web 请求等。AccessDecisionMananger 决定了是否允许进行调用。</p><h3 id="2-1-The-AccessDecisionManager"><a href="#2-1-The-AccessDecisionManager" class="headerlink" title="2.1 The AccessDecisionManager"></a>2.1 The AccessDecisionManager</h3><p>AccessDecisionManager 由 AbstractSecurityInterceptor 调用，负责做出最终的访问控制决策。接口包含三个方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 做出最终访问控制的决策 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// decide 方法传递它所需要的所有信息，以便做出授权决策</span>    <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">,</span> Object secureObject<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> AccessDeniedException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该方法用来确定 AccessDecisionManager 是否可以处理传入的 ConfigAttribute</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>ConfigAttribute attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Class <span class="token class-name">clazz</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-Voting-Based-AccessDecisionManager-Implementations-基于投票的辅助决策管理器的实现"><a href="#2-2-Voting-Based-AccessDecisionManager-Implementations-基于投票的辅助决策管理器的实现" class="headerlink" title="2.2 Voting-Based AccessDecisionManager Implementations - 基于投票的辅助决策管理器的实现"></a>2.2 Voting-Based AccessDecisionManager Implementations - 基于投票的辅助决策管理器的实现</h3><p>Spring Security 包含了几个基于投票的 AccessDecisionManager 实现。用户也可以实现自己的 AccessDecisionManager 来控制授权的所有方面。</p><p><img src="https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/images/access-decision-voting.png" alt="Access-Decision-Voting"></p><p>使用这种方法，会对一系列的 AccessDecisionVoter 进行轮询，然后 AccessDecisionManager 根据投票结果来决定是否抛出 AccessDeniedException。</p><p>AccessDecisionVoter 接口有以下三种方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccessDecisionVoter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 返回结果: ACCESS_GRANTED = 1 允许访问; ACCESS_DENIED = -1 拒绝访问; ACCESS_ABSTAIN = 0 弃权;</span>    <span class="token keyword">int</span> <span class="token function">vote</span><span class="token punctuation">(</span>Authenticaiton authentication<span class="token punctuation">,</span> Object object<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>ConfigAttribute attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Class <span class="token class-name">clazz</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Spring Security 提供了三种具体的访问决策管理器来记录选票。</p><ol><li>UnanimousBased<ol><li>无论投了多少 ACCESS_GRANTED 通过票，只要有 ACCESS_DENIED 反对票，则判断为不通过</li><li>如果没有 ACCESS_DENIED 反对票，且有 ACCESS_GRANTED 通过票，则判断为通过</li></ol></li><li>AffirmativeBased<ol><li>只要有 ACCESS_GRANTED 通过票，则判断为通过</li><li>如果没有 ACCESS_GRANTED 通过票，且 ACCESS_DENIED 反对票在两个及以上，则判断为不通过</li></ol></li><li>ConsensusBased<ol><li>如果 ACCESS_GRANED 通过票数大于 ACCESS_DENIED 反对票数，则判断为通过</li><li>如果 ACCESS_GRANED 通过票数小于 ACCESS_DENIED 反对票数，则判断为不通过</li><li>如果 ACCESS_GRANED 通过票数等于 ACCESS_DENIED 反对票数，则根据配置的 allowIfEqualGrantedDeniedDecisions(默认为true)来进行判断</li></ol></li><li>RoleVoter<ol><li>将配置属性当做简单的角色名称，如果用户存在该角色，则通过授权</li></ol></li><li>AuthenticatedVoter<ol><li>用来区分匿名、完全验证和 remember-me 用户</li></ol></li></ol><h2 id="三、After-Invocation-Handling-处理后"><a href="#三、After-Invocation-Handling-处理后" class="headerlink" title="三、After Invocation Handling - 处理后"></a>三、After Invocation Handling - 处理后</h2><p><img src="https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/images/after-invocation.png" alt="After Invocation Handling"></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十九章 WebSocket Security</title>
      <link href="/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/19.WebSocket/"/>
      <url>/2019/07/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/19.WebSocket/</url>
      
        <content type="html"><![CDATA[<h1 id="第十九章-WebSocket-Security"><a href="#第十九章-WebSocket-Security" class="headerlink" title="第十九章 WebSocket Security"></a>第十九章 WebSocket Security</h1><h2 id="一、WebSocket-Configuration"><a href="#一、WebSocket-Configuration" class="headerlink" title="一、WebSocket Configuration"></a>一、WebSocket Configuration</h2><p>Spring Security 4.0 通过 Spring Messaging 抽象引入了对  WebSocket 的授权支持。如果需要使用 Java 配置授权，只需要扩展 AbstractSecurityWebSocketMessageBrokerConfigurer，并配置 MessageSecurityMetadataSourceRegistry。如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 1. 继承了 config 后，任何的入站 connect 消息都需要提供有效的 CSRF 令牌来实施同源策略 * 2. SecurityContextHolder 由入站请求中的额 simpUser 头部属性中的用户填充 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSecurityWebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureInbound</span><span class="token punctuation">(</span>MessageSecurityMetadataSourceRegistry messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 任何以 "/user/" 开头的入站请求都需要 ROLE_USER 权限</span>        messages            <span class="token punctuation">.</span><span class="token function">simpDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也可以使用 XML 的方式进行配置，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>websocket-message-broker</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intercept-message</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/user/**<span class="token punctuation">"</span></span> <span class="token attr-name">access</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hasRole(<span class="token punctuation">'</span>USER<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>websocket-message-broker</span><span class="token punctuation">></span></span></code></pre><h2 id="二、-WebSocket-Authentication-WebSocket-认证"><a href="#二、-WebSocket-Authentication-WebSocket-认证" class="headerlink" title="二、 WebSocket Authentication - WebSocket 认证"></a>二、 WebSocket Authentication - WebSocket 认证</h2><p>在创建与重连 WebSocket 连接时，在 HTTP 请求中发现的相同的认证信息。这意味着 HttpServletRequest 上的主体将会被移交给 websocket。</p><h2 id="三、WebSocket-Authorization-WebSocket-授权"><a href="#三、WebSocket-Authorization-WebSocket-授权" class="headerlink" title="三、WebSocket Authorization - WebSocket 授权"></a>三、WebSocket Authorization - WebSocket 授权</h2><p>授权配置实例如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSecurityWebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureInbound</span><span class="token punctuation">(</span>MessageSecurityMetadataSourceRegistry messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        messages            <span class="token comment" spellcheck="true">// 任何没有 destination 的消息都需要身份验证</span>            <span class="token punctuation">.</span><span class="token function">nullDestMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 任何人都可以订阅 /user/queue/errors</span>            <span class="token punctuation">.</span><span class="token function">simpSubscribeDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/queue/errors"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 任何以 /app/ 开头的 destination 消息都需要 ROLE_USER 角色</span>            <span class="token punctuation">.</span><span class="token function">simpDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/app/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 任何以 /user/ 或 /topc/friends 开头的 SUBSCRIBE 订阅都需要 ROLE_USER 角色</span>            <span class="token punctuation">.</span><span class="token function">simpSubscribeDestMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">,</span><span class="token string">"/topic/friends/*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 任何其他 MESSAGE 或 SUBSCRIBE 类型的消息都将被拒绝</span>            <span class="token punctuation">.</span><span class="token function">simpTypeMatchers</span><span class="token punctuation">(</span>MESSAGE<span class="token punctuation">,</span> SUBSCRIBE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">denyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 任何其他消息都将被拒绝(这样做，可以确保不会遗漏任何消息)</span>            <span class="token punctuation">.</span><span class="token function">anyMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">denyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、WebSocket-Authorization-Notes"><a href="#四、WebSocket-Authorization-Notes" class="headerlink" title="四、WebSocket Authorization Notes"></a>四、WebSocket Authorization Notes</h2><h3 id="1-WebSocket-Authorization-on-Message-Types"><a href="#1-WebSocket-Authorization-on-Message-Types" class="headerlink" title="1. WebSocket Authorization on Message Types"></a>1. WebSocket Authorization on Message Types</h3><p>WebSocket 授权说明，一般情况下，我们只希望客户端订阅 “/topic/system/notifications”，而不希望客户端向该 destination 发送消息。</p><p>如果我们允许客户端向 “/topic/system/notifications” 发送消息，那么客户端就可以直接向所有的订阅端点发送消息，并模拟系统。</p><h3 id="2-WebSocket-Authorization-on-Destinations"><a href="#2-WebSocket-Authorization-on-Destinations" class="headerlink" title="2. WebSocket Authorization on Destinations"></a>2. WebSocket Authorization on Destinations</h3><p>WebSocket 订阅的授权。以聊天应用为例，我们希望客户端监听 “/user/queue”，它将转换为 “/queue/user/message-<sessionid>“，但是我们不希望客户机能够监听 “/queue/*”，这样客户端就能查看每个用户的消息了。</sessionid></p><p>一般情况下，应用程序通常拒绝向以代理前缀(如”/topic”或”/queue”) 开头的消息发送任何订阅。</p><h3 id="3-Outbound-Messages"><a href="#3-Outbound-Messages" class="headerlink" title="3. Outbound Messages"></a>3. Outbound Messages</h3><p>Spring 包含了一个名为 “Flow of Message(消息流)” 的部分，描述了消息如何在系统中流动。</p><p>值得注意的是，Spring Security 只保护 clientInboundChannel，而不保护 clientOutboundChannel。</p><p>这是因为每一条进入的信息，通常对应着更多发出的信息。因此为了性能考虑，Spring Security 鼓励保护端点的订阅。</p><h2 id="五、Enforcing-Same-Origin-Policy-同源策略"><a href="#五、Enforcing-Same-Origin-Policy-同源策略" class="headerlink" title="五、Enforcing Same Origin Policy 同源策略"></a>五、Enforcing Same Origin Policy 同源策略</h2><p>假定在用户浏览器中，访问了某个网站并进行了身份验证，此时用户另打开一个标签页并访问了另一个网址，那么同源策略确保了网站二不能读写数据到网站一。</p><p>而 websocket 与 SocketJS，都绕过了同源策略，因此开发人员需要显式地保护自己的应用不受外域攻击。</p><h3 id="1-Adding-CSRF-to-Stomp-Headers"><a href="#1-Adding-CSRF-to-Stomp-Headers" class="headerlink" title="1. Adding CSRF to Stomp Headers"></a>1. Adding CSRF to Stomp Headers</h3><p>默认情况下，Spring Security 要求在任何 connect 消息中使用 CSRF 令牌，这确保只有访问 CSRF 令牌的站点才能连接。</p><p>但是 SockJS 不允许这些，因此我们必须在 Stomp 头文件中包含 token。</p><h3 id="2-Disable-CSRF-within-WebSockets"><a href="#2-Disable-CSRF-within-WebSockets" class="headerlink" title="2. Disable CSRF within WebSockets"></a>2. Disable CSRF within WebSockets</h3><p>如果允许其他域访问站点，可以禁用 SpringSecurity 的保护，配置如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSecurityWebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">smaeOriginDesabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十八章 Anonymous Authentication - 匿名身份认证</title>
      <link href="/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/18.AnonymousAuth/"/>
      <url>/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/18.AnonymousAuth/</url>
      
        <content type="html"><![CDATA[<h1 id="第十八章-Anonymous-Authentication-匿名身份认证"><a href="#第十八章-Anonymous-Authentication-匿名身份认证" class="headerlink" title="第十八章 Anonymous Authentication - 匿名身份认证"></a>第十八章 Anonymous Authentication - 匿名身份认证</h1><p>Spring Security 3.0后，会自动提供匿名身份验证支持，并且可以使用匿名元素进行定制。</p><h2 id="一、Configuration"><a href="#一、Configuration" class="headerlink" title="一、Configuration"></a>一、Configuration</h2><p>AnonymousAuthenticationToken 实现了 Authentication，并且关联了 GrantedAuthority。通过 AnonymousAuthenticationProvider，连接到 ProviderManager 中。并最终由 AnonymousAuthenticationFilter 向 SecurityContextHolder 中添加一个匿名的Authentication。</p><h2 id="二、AuthenticationTrustResolver"><a href="#二、AuthenticationTrustResolver" class="headerlink" title="二、AuthenticationTrustResolver"></a>二、AuthenticationTrustResolver</h2><p>AuthenticationTrustResolver 接口提供了一个 isAnonymous(Authentication) 方法，用来校验 Authentication 是否是匿名身份。其实现为 AuthenticationTrustResolverImpl。</p><blockquote><p>在 ExceptionTranslationFilter 访问接口，并抛出 AccessDeniedException 异常，且当前身份验证为匿名类型，则不会抛出 403(FORBIDDEN) 响应，而是由过滤器转向 AuthenticationEntryPoint。以便主体能够重新进行身份验证。</p></blockquote><p>这个区别是必须的，否则的话，用户将永远无法使用form、basic、digest等其他正常身份验证机制来登录。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十七章 Session Management - 会话管理</title>
      <link href="/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/17.SessionManagement/"/>
      <url>/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/17.SessionManagement/</url>
      
        <content type="html"><![CDATA[<h1 id="第十七章-Session-Management-会话管理"><a href="#第十七章-Session-Management-会话管理" class="headerlink" title="第十七章 Session Management - 会话管理"></a>第十七章 Session Management - 会话管理</h1><p>Http Session 相关的功能由 SessionManagementFilter 和 SessionAuthenticationStrategy 接口组合处理。</p><p>典型用法包括：Session 固化攻击预防、Session 超时检测、限制用户同时打开的会话数量等。</p><h2 id="一、SessionManagementFilter"><a href="#一、SessionManagementFilter" class="headerlink" title="一、SessionManagementFilter"></a>一、SessionManagementFilter</h2><p>SessionManagementFilter 通过 SecurityContextRepository 来检查当前 SecurityContextHolder 中的内容，以此来确保当前用户已经通过了身份验证。</p><p>如果 repository 中包含 SecurityContext，则过滤器不做任何操作。如果没有，且 ThreadLocal 中 SecurityContext 包含一个（非匿名）身份验证对象，则该过滤器假定它们已经由之前的过滤器做了身份验证。</p><p>然后将调用已配置的 SessionAuthenticationStrategy。</p><p>如果用户没有经过身份验证，过滤器会检查是否请求了无效的 Session Id（如超市等），此时过滤器会调用 InvalidSessionStrategy。最常见的行为就是重定向至一个固定的额URL，由 SimpleRedirectInvalidSessionStrategy 实现。</p><h2 id="二、SessionAuthenticationStrategy"><a href="#二、SessionAuthenticationStrategy" class="headerlink" title="二、SessionAuthenticationStrategy"></a>二、SessionAuthenticationStrategy</h2><p>Session 认证策略，既被 SessionManagementFitler 使用，也被 AbstractAuthenticationProcessingFilter 使用。因此，如果使用自定义表单登录类，则需要同时注入到这两个类中。</p><h2 id="三、Concurrency-Control-并发控制"><a href="#三、Concurrency-Control-并发控制" class="headerlink" title="三、Concurrency Control 并发控制"></a>三、Concurrency Control 并发控制</h2><p>Spring Security 能够防止主体对同一应用进行超过指定次数的并发身份验证。</p><p>如果您阻止用户从两个不同的会话登录到 web 应用程序。您可以终止他们以前的登录，也可以在他们尝试再次登录时报告错误，防止二次登录。但是，如果是第二种情况的话，如果用户没有显式的注销的话，在原 session 有效期间是无法登陆的。</p><h2 id="四、Querying-the-SessionRegistry-for-currently-authenticated-users-and-their-sessions"><a href="#四、Querying-the-SessionRegistry-for-currently-authenticated-users-and-their-sessions" class="headerlink" title="四、Querying the SessionRegistry for currently authenticated users and their sessions"></a>四、Querying the SessionRegistry for currently authenticated users and their sessions</h2><p>通过 SessionRegistry 查询当前登录的用户，以及用户的 sessions。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十六章 Security HTTP Response Headers</title>
      <link href="/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/16.ResponseHeader/"/>
      <url>/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/16.ResponseHeader/</url>
      
        <content type="html"><![CDATA[<h1 id="第十六章-Security-HTTP-Response-Headers"><a href="#第十六章-Security-HTTP-Response-Headers" class="headerlink" title="第十六章 Security HTTP Response Headers"></a>第十六章 Security HTTP Response Headers</h1><p>Spring Security 允许用户注入默认的安全headers，用来保护应用程序。</p><h2 id="一、Headers-默认配置"><a href="#一、Headers-默认配置" class="headerlink" title="一、Headers 默认配置"></a>一、Headers 默认配置</h2><p>默认设置如下：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">Cache-Control:</span> no-cache, no-store, max-age=0, must-revalidate<span class="token header-name keyword">Pragma:</span> no-cache<span class="token header-name keyword">Expires:</span> 0<span class="token header-name keyword">X-Content-Type-Options:</span> nosniff<span class="token header-name keyword">Strict-Transport-Security:</span> max-age=31536000 ; includeSubDomains<span class="token header-name keyword">X-Frame-Options:</span> DENY<span class="token header-name keyword">X-XSS-Protection:</span> 1; mode=block</code></pre><p>也可以使用 Java 来配置响应头的内容：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">config</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sameOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">httpStrictTransportSecurity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、Header-的具体内容"><a href="#二、Header-的具体内容" class="headerlink" title="二、Header 的具体内容"></a>二、Header 的具体内容</h2><h3 id="1-Cache-Control"><a href="#1-Cache-Control" class="headerlink" title="1. Cache Control"></a>1. Cache Control</h3><p>缓存控制，意味着用户是否可以通过浏览器缓存来查看经过身份验证的页面。</p><p>默认情况下，是不使用缓存的，入股你希望缓存特定的响应，那么可以在应用程序中进行如下配置：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWeb</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMvcConfiguration</span> impelements WebMvcConfigurer <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span>ResourceHandlerRegistry registry<span class="token punctuation">)</span><span class="token punctuation">{</span>        registry            <span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/resources/**"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"/resources/"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token number">31556926</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在开发中，我们可以使用 SpringMVC 的 HttpServletResponse 来增加 Header：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/shops"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token function">ModelAndView</span><span class="token punctuation">(</span>ModelAndView mv<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>HttpHeaders<span class="token punctuation">.</span>CACHE_CONTROL<span class="token punctuation">,</span> <span class="token string">"public,max-age=5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"shop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-Content-Type"><a href="#2-Content-Type" class="headerlink" title="2. Content-Type"></a>2. Content-Type</h3><p>响应内容的类型</p><h3 id="3-Http-Strict-Transport-Security-HSTS"><a href="#3-Http-Strict-Transport-Security-HSTS" class="headerlink" title="3. Http Strict Transport Security (HSTS)"></a>3. Http Strict Transport Security (HSTS)</h3><p>HTTP 严格传输安全，要求所有请求必须是 https 的。</p><h3 id="4-Http-Public-Key-Pinning-HPKP"><a href="#4-Http-Public-Key-Pinning-HPKP" class="headerlink" title="4. Http Public Key Pinning (HPKP)"></a>4. Http Public Key Pinning (HPKP)</h3><p>防止中间人攻击伪造的证书，它告诉网络客户端将一个特定的加密公钥与一个特定的网络服务器相关联。</p><h3 id="5-X-Frame-Options"><a href="#5-X-Frame-Options" class="headerlink" title="5. X-Frame-Options"></a>5. X-Frame-Options</h3><p>是否允许网站被添加到一个框架中。如登录到银行的用户可能会点击授予其他用户访问权限的按钮。这种攻击被称为点击劫持。</p><p>默认为 DENY。</p><h3 id="6-X-XSS-Protection"><a href="#6-X-XSS-Protection" class="headerlink" title="6. X-XSS-Protection"></a>6. X-XSS-Protection</h3><p>默认开启，过滤XSS 攻击。</p><h3 id="7-Content-Security-Policy"><a href="#7-Content-Security-Policy" class="headerlink" title="7. Content Security Policy"></a>7. Content Security Policy</h3><p>内容安全策略（CSP）</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十五章 CORS - HTTP请求控制</title>
      <link href="/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/15.CORS/"/>
      <url>/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/15.CORS/</url>
      
        <content type="html"><![CDATA[<h1 id="第十五章-CORS-HTTP请求控制"><a href="#第十五章-CORS-HTTP请求控制" class="headerlink" title="第十五章 CORS - HTTP请求控制"></a>第十五章 CORS - HTTP请求控制</h1><p>Spring 框架为 CORS 提供了一系列的支持。CORS 的处理在 Spring Security 之前，因为此时的请求不包含任何 cookie(JSESSIONID)。</p><p>处理CORS 最简单的方法是使用 CorsFilter，通过配置一个 CorsConfigurationSource，可以将 CorsFilter 与 Spring Security 集成。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">config</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http            <span class="token comment" spellcheck="true">// 默认情况下使用名为 corsConfigurationSource 的bean</span>            <span class="token comment" spellcheck="true">// 这里可以省略指定 CorsConfigurationSOurce</span>            <span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    CorsConfigurationSource <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorsConfiguration config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"https://example.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UrlBasedCorsConfigurationSource source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> source<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十四章 Remember-Me Authentication</title>
      <link href="/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/14.RememberMeAuth/"/>
      <url>/2019/07/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/14.RememberMeAuth/</url>
      
        <content type="html"><![CDATA[<h1 id="第十四章-Remember-Me-Authentication"><a href="#第十四章-Remember-Me-Authentication" class="headerlink" title="第十四章 Remember-Me Authentication"></a>第十四章 Remember-Me Authentication</h1><p>Remember-Me 或者 persistent-login 验证是指网站能够在会话之间记住主体的身份。通常是向浏览器发送 cookie 来实现的，并且在后面的会话中，会去检测 cookie 并进行自动登录。</p><p>Spring Security 提供了两种方式来实现具体的 remember-me 操作，一种是使用 hash 来保护基于 cookie 令牌的安全性，另一种是使用数据库或其他持久存储机制来存储生成的令牌。</p><blockquote><p>这两种方式都需要 UserDetailsService，否则身份验证程序将无法工作。</p></blockquote><h2 id="一、Simple-Hash-Based-Token-Approach"><a href="#一、Simple-Hash-Based-Token-Approach" class="headerlink" title="一、Simple Hash-Based Token Approach"></a>一、Simple Hash-Based Token Approach</h2><p>使用散列来实现一个 remember-me 策略，在身份验证成功后，cookie会被发送到浏览器，其组成如下：</p><pre class=" language-text"><code class="language-text">base64(username + ":" + expirationTime + ":" +md5Hex(username + ":" + expirationTime + ":" + password + ":" + key))</code></pre><p>在令牌的有效期内，用户名、密码、秘钥不能更改。这种方式存在一个安全问题，因为 remember-me 令牌可以从任何用户代理使用，直到令牌过期为止。那么如果一个主体知道了令牌已经被 captured，那么可以很容易地更改密码，并使所有的 remember-me 令牌失效。</p><blockquote><p>Alternatively remember-me services should simply not be used at all.    因此，hash-based remember-me 不应该被使用。</p></blockquote><h2 id="二、Persistent-Token-Approach"><a href="#二、Persistent-Token-Approach" class="headerlink" title="二、Persistent Token Approach"></a>二、Persistent Token Approach</h2><p>持久令牌的方法，需要为 remember-me 配置一个持久化数据源，如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>http</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>remember-me</span> <span class="token attr-name">data-srouce-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>http</span><span class="token punctuation">></span></span></code></pre><p>该数据库需要包含一个 “persistent_logins” 表，表结构如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> persistent_logins<span class="token punctuation">(</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> series <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span> token <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> last_used <span class="token keyword">timestamp</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span></code></pre><h2 id="三、Remember-Me-的接口与实现"><a href="#三、Remember-Me-的接口与实现" class="headerlink" title="三、Remember-Me 的接口与实现"></a>三、Remember-Me 的接口与实现</h2><p>Remember-Me 通常与 UsernamePasswordAuthenticationFilter 一起使用，在通过用户名、密码方式登录时，选择是否记住用户密码。并且通过 AbstractAuthenticationProcessingFilter 父类的钩子来实现。</p><p>它也可以与 BasicAuthenticationFilter 一起使用，钩子会在适当的时候调用一个具体的 RememberMeServices 服务。</p><h3 id="1-RememberMeServices-Interface"><a href="#1-RememberMeServices-Interface" class="headerlink" title="1. RememberMeServices Interface"></a>1. RememberMeServices Interface</h3><p>以下是 RememberMeServices 接口的内容：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 该接口为 remember-me 提供了基础的，与认证相关的事件通知</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RememberMeServices</span> <span class="token punctuation">{</span>    Authentication <span class="token function">autoLogin</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">loginFail</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">loginSuccess</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Authentication successfulAuthentication<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 AbstractAuthenticationProcessingFilter 中只调用了 loginFail 和 loginSuccess，只要 SecurityContextHolder 中不包含身份验证，那么 RememberMeAuthenticationFilter 就会调用 autoLogin() 方法。</p><h3 id="2-TokenBasedRememberMeServices-Implements"><a href="#2-TokenBasedRememberMeServices-Implements" class="headerlink" title="2. TokenBasedRememberMeServices Implements"></a>2. TokenBasedRememberMeServices Implements</h3><p>TokenBasedRememberMeService 生成一个 RememberMeAuthenticationToken，并交给 RememberMeAuthenticationProvider 进行处理。</p><p>在 TokenBasedRememberMeService 的构造中，需要两个参数，一个是 key，另一个是 UserDetailsService，用于比较用户名和密码，并生成 RememberMeAuthenticationToken 来包含正确的 GrantedAuthority。</p><p>该 Service 还实现了 LogoutFilter，因此可以使用 LogoutFilter 自动清除 cookie。</p><h3 id="3-PersistentTokenBasedRememberMeServices"><a href="#3-PersistentTokenBasedRememberMeServices" class="headerlink" title="3. PersistentTokenBasedRememberMeServices"></a>3. PersistentTokenBasedRememberMeServices</h3><p>与 TokenBasedRememberMeServices 一样，但是需要一个 PersistentTokenRepository 来存储这些令牌。</p><p>PersistentTokenRepository 有两个具体实现：</p><ol><li>InMemoryTokenRepositoryImpl</li><li>JdbcTokenRepositoryImpl</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十三章 Basic Authentication</title>
      <link href="/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/13.BasicAuth/"/>
      <url>/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/13.BasicAuth/</url>
      
        <content type="html"><![CDATA[<h1 id="第十三章-Basic-Authentication"><a href="#第十三章-Basic-Authentication" class="headerlink" title="第十三章 Basic Authentication"></a>第十三章 Basic Authentication</h1><p>Basic 认证和 Digest 认证是 web 应用中常用的两种认证机制。</p><h2 id="一、Basic-Authentication"><a href="#一、Basic-Authentication" class="headerlink" title="一、Basic Authentication"></a>一、Basic Authentication</h2><p>Basic Authentication 通常用于无状态客户机，无状态客户机在每个请求上，传递其凭据。它与基于表单的身份验证结合使用是非常常见的。</p><p>Basic Authentication 会将密码使用纯文本的形式传输，因此只能在加密的传输层（如HTTPS）上使用密码。</p><h3 id="1-BasicAuthenticationFilter"><a href="#1-BasicAuthenticationFilter" class="headerlink" title="1. BasicAuthenticationFilter"></a>1. BasicAuthenticationFilter</h3><p>BasicAuthenticationFilter 负责处理 HTTP 头中提供的基本身份验证凭据。基本身份验证被广泛部署在用户代理中，并且实现非常简单。认证格式类似于：<code>https://zhangsan:123456@www.luokaiii.cn/login</code></p><h3 id="2-Configuration"><a href="#2-Configuration" class="headerlink" title="2. Configuration"></a>2. Configuration</h3><p>配置的 AuthenticationManager 处理每个身份验证请去，如果身份验证失败，将使用 AuthenticationEntryPoint 重试身份验证过程。通常需要结合使用过滤器和 BasicAuthenticationEntryPoint，返回一个带有401 Header的响应来重试 HTTP Basic 身份验证。</p><p>如果身份验证成功，则生成 Authentication 对象并放入 SecurityContextHolder 中。</p><h2 id="二、Digest-Authentication"><a href="#二、Digest-Authentication" class="headerlink" title="二、Digest Authentication"></a>二、Digest Authentication</h2><p>Digest Authentication 试图解决 Basic Authentication 中存在的许多缺陷和弱点，特别是以明文形式发送凭据。</p><pre class=" language-text"><code class="language-text">You should not use Digest in modern applications because it is not considered secure. 翻译：你不应该在现代应用中使用 Digest，因为它是不安全的。</code></pre><blockquote><p>so，这里就不写了。详见 <a href="https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#digest-processing-filter" target="_blank" rel="noopener">digest-processing-filter</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十二章 Spring Security 与 Servlet API 集成</title>
      <link href="/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/12.ServletAPI/"/>
      <url>/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/12.ServletAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="第十二章-Spring-Security-与-Servlet-API-集成"><a href="#第十二章-Spring-Security-与-Servlet-API-集成" class="headerlink" title="# 第十二章 Spring Security 与 Servlet API 集成"></a># 第十二章 Spring Security 与 Servlet API 集成</h1><h2 id="一、与-Servlet-2-0-的集成"><a href="#一、与-Servlet-2-0-的集成" class="headerlink" title="一、与 Servlet 2.0 的集成"></a>一、与 Servlet 2.0 的集成</h2><h3 id="1-getRemoteUser"><a href="#1-getRemoteUser" class="headerlink" title="1. getRemoteUser()"></a>1. getRemoteUser()</h3><p>HttpServletRequest.getRemoteUser() 返回 SecurityContextHolder.getContext().getAuthentication().getName()</p><h3 id="2-getUserPrincipal"><a href="#2-getUserPrincipal" class="headerlink" title="2. getUserPrincipal()"></a>2. getUserPrincipal()</h3><p>HttpServletRequest.getUserPrincipal() 返回 SecurityContextHolder.getContext().getAuthentication()，返回结果类型为 Authentication，当使用用户名、密码的方式进行的身份验证时，其为 UsernamePasswordAuthenticationToken 的一个实例。</p><p>可以通过 Authentication.getPrincipal() 方法，将其转换为 UserDetails 的实现类.</p><h3 id="3-isUserInRole-String"><a href="#3-isUserInRole-String" class="headerlink" title="3. isUserInRole(String)"></a>3. isUserInRole(String)</h3><p>HttpServletRequest.isUserInRole(String) 返回 SecurityContextHolder.getContext().getAuthentication().getAuthorities() 是否包含传入的 String，getAuthorities() 返回一个 GrantedAuthority 集合。</p><p>用户通常不需要传入 “ROLE” 前缀，它由系统自动添加。</p><h2 id="二、与-Servlet-3-0-的集成"><a href="#二、与-Servlet-3-0-的集成" class="headerlink" title="二、与 Servlet 3.0 的集成"></a>二、与 Servlet 3.0 的集成</h2><h3 id="4-authenticate-HttpServletRequest-HttpServletResponse"><a href="#4-authenticate-HttpServletRequest-HttpServletResponse" class="headerlink" title="4. authenticate(HttpServletRequest,HttpServletResponse)"></a>4. authenticate(HttpServletRequest,HttpServletResponse)</h3><p>通过 HttpServletRequest.authenticate(HttpServletRequest,HttpServletResponse) 方法可以确保用户得到了身份验证。如果它们未经过身份验证，将会使用 AuthenticationEntryPoint 请求用户进行身份验证(如重定向至登录页)。</p><h3 id="5-login-String-String"><a href="#5-login-String-String" class="headerlink" title="5. login(String,String)"></a>5. login(String,String)</h3><p>HttpServletRequest.login(String,String) 可用于使用当前 AuthenticationManager 对用户进行身份验证。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    httpServletRequest<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>ServletException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// fail to authenticate，失败信息</span><span class="token punctuation">}</span></code></pre><blockquote><p>如果需要 Spring Security 处理失败的身份验证，则不用捕获 ServletException。</p></blockquote><h3 id="6-logout"><a href="#6-logout" class="headerlink" title="6. logout()"></a>6. logout()</h3><p>使用 HttpServletRequest.logout() 将当前用户注销。</p><p>通常这意味着会将 SecurityContextHolder 清除、HttpSession 失效、任何与 “RememberMe”相关的身份验证将被清除，等等。但是如果你自定义了 LogoutHandler，则将根据具体配置来，注意你仍然需要定义服务端的相应（比如重定向至登录页等）。</p><h3 id="7-异步请求"><a href="#7-异步请求" class="headerlink" title="7. 异步请求"></a>7. 异步请求</h3><h2 id="三、与-Servlet-3-1-的集成"><a href="#三、与-Servlet-3-1-的集成" class="headerlink" title="三、与 Servlet 3.1 的集成"></a>三、与 Servlet 3.1 的集成</h2><h3 id="8-changeSessionId"><a href="#8-changeSessionId" class="headerlink" title="8. changeSessionId()"></a>8. changeSessionId()</h3><p>HttpServletRequest.changeSessionId() 是 Servlet3.1 及更高版本中，防止会话固定攻击的默认方法。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十一章 Spring Security 中的几个核心过滤器</title>
      <link href="/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/11.%E6%A0%B8%E5%BF%83%E5%AE%89%E5%85%A8%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/11.%E6%A0%B8%E5%BF%83%E5%AE%89%E5%85%A8%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一章-Spring-Security-中的几个核心过滤器"><a href="#第十一章-Spring-Security-中的几个核心过滤器" class="headerlink" title="第十一章 Spring Security 中的几个核心过滤器"></a>第十一章 Spring Security 中的几个核心过滤器</h1><h2 id="FilterSecurityInterceptor"><a href="#FilterSecurityInterceptor" class="headerlink" title="FilterSecurityInterceptor"></a>FilterSecurityInterceptor</h2><p>FilterSecurityInterceptor 负责处理 HTTP 资源的安全性，提供了适用于不同 HTTP URL 请求的配置属性，引用了 AuthenticationManager 和 AccessDecisionManager。</p><h2 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h2><p>ExceptionTranslationFilter 位于安全过滤器堆栈中的 FilterSecurityInterceptor 之上，它本身不执行任何实际的安全性控制，但处理安全性拦截器引发的异常。</p><p>ExceptionTranslationFilter 的另一个职责是在调用 AuthenticationEntryPoint 之前保存当前请求，这允许用户在进行身份验证之后，恢复请求。如用户用表单登录之后，通过 SavedRequestAwareAuthenticationSuccessHandler 重定向至原始的 URL。</p><p>RequestCacheFilter 的任务是，当用户被重定向到原始URL时，从缓存实际还原已保存的请求。</p><h2 id="AuthenticationEntryPoint"><a href="#AuthenticationEntryPoint" class="headerlink" title="AuthenticationEntryPoint"></a>AuthenticationEntryPoint</h2><p>如果用户请求一个安全的 HTTP 资源，但是它们没有经过身份验证，则会调用 AuthenticationEntryPoint。</p><p>AuthenticationException 或者 AccessDeniedException 将由安全拦截器在调用堆栈的下方抛出，从而触发入口点上的起始方法。这将为用户提供适当的响应，以便可以开始身份验证。</p><p>如果使用的是 LoginUrlAuthenticationEntryPoint，它将会定位到登录页面。</p><h2 id="AccessDeniedHandler"><a href="#AccessDeniedHandler" class="headerlink" title="AccessDeniedHandler"></a>AccessDeniedHandler</h2><p>如果用户已经通过身份验证，并访问受保护的资源。如果引发了 AccessDeniedException，那么意味着用户尝试了一个他们没有权限的操作。这种情况下，AccessDeniedHandler 将被调用。</p><p>向客户端发送一个 403(Forbidden)响应。</p><h2 id="RequestCache接口"><a href="#RequestCache接口" class="headerlink" title="RequestCache接口"></a>RequestCache接口</h2><p>RequestCahce 封装了存储和检索 HttpServletRequest 实例所需的功能，默认情况下使用 HttpSessionRequestCache，它将请求存储在 HttpSession 中。</p><h2 id="SecurityContextPersistenceFilter"><a href="#SecurityContextPersistenceFilter" class="headerlink" title="SecurityContextPersistenceFilter"></a>SecurityContextPersistenceFilter</h2><p>SecurityContextPersistenceFilter 有两个主要任务，1.负责在 HTTP 请求之间存储 SecurityContext 内容，2. 在请求完成时清除 SecurityContextHolder。</p><p>清除存储上下文的 ThreadLocal 是必不可少的，否则线程可能会被替换到 servlet 容器的线程池中，而特定用户的 SecurityContext 仍然附加在上面。这个线程如果在后面被用到，可能会使用错误的 credentials 执行操作。</p><h2 id="SecurityContextRepository"><a href="#SecurityContextRepository" class="headerlink" title="SecurityContextRepository"></a>SecurityContextRepository</h2><p>从 Spring Security 3.0 开始，加载和存储上下文的方法都放在 SecurityContextRepository 的策略接口上：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecurityContextRepository</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// HttpRequestResponseHolder 只是传入请求和响应对象的容易，允许使用包装类进行替换</span>    <span class="token comment" spellcheck="true">// 加载的 SecurityCOntext 将被传递给过滤器链</span>    SecurityContext <span class="token function">loadContext</span><span class="token punctuation">(</span>HttpRequestResponseHolder requestResponseHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">saveContext</span><span class="token punctuation">(</span>SecurityContext context<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>默认由 HttpSessionSecurityContextRepository 来实现，它将 SecurityContext 存储在 HttpSession 中，参数名为 “SPRING_SECURITY_CONTEXT”。</p><h2 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a>UsernamePasswordAuthenticationFilter</h2><p>这个过滤器是最常用的身份验证过滤器，也是最长被定制的过滤器，它包含了 form-login 元素所使用的实现。配置它需要三步：</p><ol><li>配置 LoginUrlAuthenticationEntryPoint，使用登录页面的 URL</li><li>实现登录页面，JSP或MVC控制器</li><li>配置一个 UsernamePasswordAuthenticationFilter 在应用中</li><li>将过滤器的 Bean 添加到自定义的过滤器链代理中</li></ol><h2 id="Authentication-Success-and-Failure"><a href="#Authentication-Success-and-Failure" class="headerlink" title="Authentication Success and Failure"></a>Authentication Success and Failure</h2><p>过滤器调用 AuthenticationManager 来处理每个身份验证请求，成功的身份验证由 AuthenticationSuccessHandler 策略接口来处理，失败的身份验证由 AuthenticationFailureHandler 策略接口来处理。</p><p>该过滤器允许自定义失败成功处理器，包含有 SimpleUrlAuthenticationSuccessHandler、SavedRequestAwareAuthenticationSuccessHandler、SimpleUrlAuthenticationFailureHandler、ExceptionMappingAuthenticationFailureHandler、DelegatingAuthenticationFailureHandler、AbstractAuthenticationProcessingFilter 等实现。或者你可以选择自定义一个自己的失败或成功处理器。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/99.Spring%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B9%9D%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/99.Spring%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E4%B9%9D%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring中用到的九种设计模式"><a href="#Spring中用到的九种设计模式" class="headerlink" title="Spring中用到的九种设计模式"></a>Spring中用到的九种设计模式</h1><h2 id="第一种：简单工厂模式"><a href="#第一种：简单工厂模式" class="headerlink" title="第一种：简单工厂模式"></a>第一种：简单工厂模式</h2><p>又称为静态工厂模式，静态工厂模式的优点在于</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/19.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/19.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十七章-迭代器模式-遍历聚合对象中的元素"><a href="#第十七章-迭代器模式-遍历聚合对象中的元素" class="headerlink" title="第十七章 迭代器模式 - 遍历聚合对象中的元素"></a>第十七章 迭代器模式 - 遍历聚合对象中的元素</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第十章 SpringSecurity中的过滤器链</title>
      <link href="/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/10.%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE/"/>
      <url>/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/10.%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-SpringSecurity中的过滤器链"><a href="#第十章-SpringSecurity中的过滤器链" class="headerlink" title="第十章 SpringSecurity中的过滤器链"></a>第十章 SpringSecurity中的过滤器链</h1><p>Spring Security 的 web 基础完全是基于标准的 servlet 过滤器的，它在内部不使用 servlet 或任何基于 servlet 的框架(如SpringMVC)，因此它与任何特定的 web 技术都没有特别强的关联。</p><p>Spring Security 不关心请求是来自于 浏览器、web服务器、HttpInvoker 还是 ajax应用。</p><p>在 Spring Security 的 HttpSecurityBuilder 类的 addFilter(Filter filter) 上，存在这样一段注解：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Adds a {@link Filter} that must be an instance of or extend one of the Filters     * provided within the Security framework. The method ensures that the ordering of the     * Filters is automatically taken care of.     *     * The ordering of the Filters is:     *     * &lt;ul>     * &lt;li>{@link ChannelProcessingFilter}&lt;/li>     * &lt;li>{@link ConcurrentSessionFilter}&lt;/li>     * &lt;li>{@link SecurityContextPersistenceFilter}&lt;/li>     * &lt;li>{@link LogoutFilter}&lt;/li>     * &lt;li>{@link X509AuthenticationFilter}&lt;/li>     * &lt;li>{@link AbstractPreAuthenticatedProcessingFilter}&lt;/li>     * &lt;li>&lt;a href="{@docRoot}/org/springframework/security/cas/web/CasAuthenticationFilter.html">CasAuthenticationFilter&lt;/a>&lt;/li>     * &lt;li>{@link UsernamePasswordAuthenticationFilter}&lt;/li>     * &lt;li>{@link ConcurrentSessionFilter}&lt;/li>     * &lt;li>{@link OpenIDAuthenticationFilter}&lt;/li>     * &lt;li>{@link org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter}&lt;/li>     * &lt;li>{@link ConcurrentSessionFilter}&lt;/li>     * &lt;li>{@link DigestAuthenticationFilter}&lt;/li>     * &lt;li>{@link BasicAuthenticationFilter}&lt;/li>     * &lt;li>{@link RequestCacheAwareFilter}&lt;/li>     * &lt;li>{@link SecurityContextHolderAwareRequestFilter}&lt;/li>     * &lt;li>{@link JaasApiIntegrationFilter}&lt;/li>     * &lt;li>{@link RememberMeAuthenticationFilter}&lt;/li>     * &lt;li>{@link AnonymousAuthenticationFilter}&lt;/li>     * &lt;li>{@link SessionManagementFilter}&lt;/li>     * &lt;li>{@link ExceptionTranslationFilter}&lt;/li>     * &lt;li>{@link FilterSecurityInterceptor}&lt;/li>     * &lt;li>{@link SwitchUserFilter}&lt;/li>     * &lt;/ul>     *     * @param filter the {@link Filter} to add     * @return the {@link HttpSecurity} for further customizations     */</span>    H <span class="token function">addFilter</span><span class="token punctuation">(</span>Filter filter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="DelegatingFilterProxy"><a href="#DelegatingFilterProxy" class="headerlink" title="DelegatingFilterProxy"></a>DelegatingFilterProxy</h3><p>在 Spring Security 中，过滤器类也是在应用上下文中定义的 Bean，因此能够充分利用 Spring 的依赖注入工具和生命周期接口。</p><p>DelegatingFilterProxy 提供了 web.xml 和应用程序上下文之间的关联。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 当使用DelegatingFilterProxy时，可以在 web.xml 中看到如下内容 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>myFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>myFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h3 id="Filter-Ordering-过滤器的顺序"><a href="#Filter-Ordering-过滤器的顺序" class="headerlink" title="Filter Ordering 过滤器的顺序"></a>Filter Ordering 过滤器的顺序</h3><ol><li>ChannelProcessingFilter<ol><li>可以重定向到不同的协议</li></ol></li><li>SecurityContextPersistenceFilter<ol><li>在web请求开始及结束时，将HttpSession复制到SecurityContext</li></ol></li><li>ConcurrentSessionFilter<ol><li>当session更新时，通过 SessionRegistry 来更新 SecurityContextHolder</li><li>并更新 Principal</li></ol></li><li>Authentication processing machanisms<ol><li>认证处理机制</li><li>UsernamePasswordAuthenticationFilter、CasAuthenticationFilter、BasicAuthenticationFilter等等</li><li>用于向 SecurityContextHolder填充Authentication令牌</li></ol></li><li>SecurityContextHolderAwareRequestFilter</li><li>JassApiIntegrationFilter<ol><li>用于处理 JassAuthenticationToken，并将其放入SecurityContextHolder</li></ol></li><li>RememberMeAuthenticationFilter<ol><li>如果没有其他身份更新 SecurityContextHolder，会尝试请求是否有RememberMe 的cookie，并生成一个Authentication 放入SecurityContextHolder</li></ol></li><li>AnonymousAuthenticationFilter<ol><li>如果没有其他身份更新 SecurityContextHolder，则会存储一个匿名对象</li></ol></li><li>ExceptionTranslationFilter<ol><li>捕获任何Spring Security 异常，并返回适当的Http响应</li><li>可以由 AuthenticationEntryPoint 抛出</li></ol></li><li>FilterSecurityInterceptor<ol><li>保护web uri，并在拒绝访问时引发异常</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第十六章 解释器模式 - 自定义语言的实现</title>
      <link href="/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/18.%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/18.%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十六章-解释器模式-自定义语言的实现"><a href="#第十六章-解释器模式-自定义语言的实现" class="headerlink" title="第十六章 解释器模式 - 自定义语言的实现"></a>第十六章 解释器模式 - 自定义语言的实现</h1><h2 id="一、什么是解释器模式"><a href="#一、什么是解释器模式" class="headerlink" title="一、什么是解释器模式"></a>一、什么是解释器模式</h2><p>解释器模式（Interpreter Pattern）：定义一个语言的文法，并且建立一个解释器来解释该语言中的句子，这里的“语言”是指使用规定格式和语法的代码。解释器模式是一种类行为型模式。</p><p>在某些情况下，为了更好地描述某一些特定类型的问题，我们可以创建一种新的语言，这种语言拥有自己的表达式和结构，即文法规则，这些问题的实例将对应为该语言中的句子。</p><h2 id="二、文法规则和抽象语法树"><a href="#二、文法规则和抽象语法树" class="headerlink" title="二、文法规则和抽象语法树"></a>二、文法规则和抽象语法树</h2><p>解释器模式描述了如何为简单的语言定义一个文法，如何在改语言中表示一个句子，以及如何解释这些句子。</p><p>在解释器模式中，我们可以使用一些符号来表示不同的含义，如“|”表示或，“{”与“}”表示组合等等。这些符号即代表着部分的文法规则</p><p>除了依靠文法规则来定义一个语言之外，还可以通过抽象语法树的图形方式来直观的表示语言的构成。</p><p><img src="https://i.loli.net/2019/07/20/5d32b544e08f875223.png" alt="抽象语法树示意图"></p><p>例如一个表达式语句 “1+2+3-4+1”，</p><h3 id="2-解释器模式中包含的几个角色："><a href="#2-解释器模式中包含的几个角色：" class="headerlink" title="2. 解释器模式中包含的几个角色："></a>2. 解释器模式中包含的几个角色：</h3><ol><li>AbstractExpression - 抽象表达式    <ol><li>在抽象表达式中声明了抽象的解释操作，他是所有终结符表达式和非终结符表达式的公共父类</li></ol></li><li>TerminalExpression - 终结符表达式<ol><li>是抽象表达式的子类，实现了与文法中的终结符相关联的解释操作</li><li>在句子中的每一个终结符都是该类的一个实例</li><li>通常在一个解释器模式中只有少数几个终结符表达式，他们的实例可以通过非终结符表达式组成较为复杂的句子</li></ol></li><li>NonterminalExpression - 非终结符表达式<ol><li>抽象表达式的子类，实现了文法中非终结符的解释操作</li><li>由于在非终结符表达式中可以包含终结符表达式，也可以包含非终结符表达式</li><li>因此其解释操作通常是递归的方式</li></ol></li><li>Context - 环境类<ol><li>环境类又称为上下文类，用于存储解释器之外的一些全局信息</li><li>通常临时存储了需要解释的语句</li></ol></li></ol><h3 id="3-核心类的设计"><a href="#3-核心类的设计" class="headerlink" title="3. 核心类的设计"></a>3. 核心类的设计</h3><h4 id="抽象表达式类"><a href="#抽象表达式类" class="headerlink" title="抽象表达式类"></a>抽象表达式类</h4><p>在解释器模式中，每一种终结符和非终结符都有一个具体类与之对应，正因为使用类来表示每一条文法规则，所以系统将具有较好的灵活性和可扩展性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="终结符表达式"><a href="#终结符表达式" class="headerlink" title="终结符表达式"></a>终结符表达式</h4><p>终结符表达式主要是对终结符元素的处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TerminalExpression</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">interpre</span><span class="token punctuation">(</span>Context ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 终结符表达式的解释操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="非终结符表达式"><a href="#非终结符表达式" class="headerlink" title="非终结符表达式"></a>非终结符表达式</h4><p>非终结符表达式将表达式组合成更加复杂的结构，对于包含两个操作元素的非终结符表达式类，其典型代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NonterminalExpression</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractExpression left<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractExpression right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NonterminalExpression</span><span class="token punctuation">(</span>AbstractExpression left<span class="token punctuation">,</span> AbstractExpression right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">interpret</span><span class="token punctuation">(</span>Context ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归调用每一个组成部分的 interpret() 方法</span>        <span class="token comment" spellcheck="true">// 在递归调用时指定组成部分的连接方式，即非终结符的功能</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="上下文类"><a href="#上下文类" class="headerlink" title="上下文类"></a>上下文类</h4><p>环境类Context， 用于存储一些全局信息，通常在Context中包含了一个 HashMap 或者 ArrayList 等类型的集合对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HashMap map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assign</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 往环境中设值</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">lookup</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取存储在环境中的值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>系统可以根据西药来决定是否需要环境类</p></blockquote><h2 id="三、完整实现"><a href="#三、完整实现" class="headerlink" title="三、完整实现"></a>三、完整实现</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抽象表达式</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractNode</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// And解释 - 非终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">AndNode</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractNode left<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractNode right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AndNode</span><span class="token punctuation">(</span>AbstractNode left<span class="token punctuation">,</span> AbstractNode right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// And 表达式的解释操作</span>    <span class="token keyword">public</span> String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"再"</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 简单句子解释 - 非终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">SentenceNode</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractNode direction<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractNode action<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractNode distance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SentenceNode</span><span class="token punctuation">(</span>AbstractNode direction<span class="token punctuation">,</span> AbstractNode action<span class="token punctuation">,</span> AbstractNode distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> direction<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> action<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>distance <span class="token operator">=</span> distance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> direction<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> action<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> distance<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 方向解释 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">DirectionNode</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String direction<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Direction</span><span class="token punctuation">(</span>String direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> direction<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>direction<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"up"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"向上"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"down"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"向下"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"left"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"向左"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"right"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"向右"</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"无效指令"</span>'        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 动作解释 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">ActionNode</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String action<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ActionNode</span><span class="token punctuation">(</span>String action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> action<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"move"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"移动"</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"run"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"快速移动"</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token string">"无效指令"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 距离解释 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">DistanceNode</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNode</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String distance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DistanceNode</span><span class="token punctuation">(</span>String distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>distance <span class="token operator">=</span> distance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> distance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指令处理类 - 工具类</span><span class="token comment" spellcheck="true">/** * 工具类用于对输入指令进行处理，将指令分隔为字符串数组 * 将第一二三个单词组成一个句子，并存入栈中 * 如果发现单词 “and”，则将 “and” 后的第一二三个单词组成一个新的句子作为右表达式，并从栈中取出原先的句子作为左表达式，然后组合成一个And节点存入栈中 * 依次类推，直到整个指令解析结束 */</span><span class="token keyword">class</span> <span class="token class-name">InstructionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String instruction<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractNode node<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>String instruction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractNode left <span class="token operator">=</span> null<span class="token punctuation">;</span>        AbstractNode right <span class="token operator">=</span> null<span class="token punctuation">;</span>        AbstractNode direction <span class="token operator">=</span> null<span class="token punctuation">;</span>        AbstractNode action <span class="token operator">=</span> null<span class="token punctuation">;</span>        AbstractNode distance <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明一个栈对象用于存储抽象语法树</span>        Stack stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以空格分隔指令字符串</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> instruction<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果遇到 and，则将后三个单词作为三个终结符表达式连成一个简单句子，并作为右表达式</span>            <span class="token comment" spellcheck="true">// 从栈顶弹出之前的表达式作为 and 的左表达式，最后将and压入栈中</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"and"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 弹出栈顶表达式作为左表达式</span>                left <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractNode<span class="token punctuation">)</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                direction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectionNode</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionNode</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                distance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistanceNode</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 右表达式</span>                right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SentenceNode</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span> action<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 将新表达式压入栈中</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AndNode</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果是从头开始解释，则将前三个单词组成一个简单句子并压入栈中</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                direction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectionNode</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActionNode</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                distance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DistanceNode</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SentenceNode</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span> action<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractNode<span class="token punctuation">)</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解释表达式</span>        String result <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 客户端 - 测试类</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String instruction <span class="token operator">=</span> <span class="token string">"up move 5 and down run 10 and left move 5"</span><span class="token punctuation">;</span>        InstructionHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstructionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>instruction<span class="token punctuation">)</span><span class="token punctuation">;</span>        String outString<span class="token punctuation">;</span>        outString <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>outString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="四、Context的作用"><a href="#四、Context的作用" class="headerlink" title="四、Context的作用"></a>四、Context的作用</h3><p>在解释器模式中，环境类Context用于存储解释器之外的一些全局信息，它通常作为参数被传递到所有表达式的解释方法 interpret() 中，可以在 Context 对象中存储访问表达式解释器的状态，向表达式解释器提供一些全局的、公共的数据，此外还可以在 Context 中增加一些所有表达式解释器都共有的功能，减轻解释器的职责。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>易于改变和扩展文法。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法</li><li>每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言</li><li>实现文法较为容易，在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂，还可以通过一些工具自动生成节点类代码</li><li>增加新的解释表达式较为方便。如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结符表达式类，原有表达式类代码无需修改，符合“开闭原则”</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>对于复杂文法难以维护，每一条规则至少对应一个类</li><li>执行效率较低，模式中使用了大量的循环和递归调用，因此在解释时速度很慢</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>讲一个需要解释执行的语言中的句子表示为一个丑行语法树</li><li>一些重复出现的问题可以用一种简单的语言来进行表达</li><li>一个语言的文法较为简单</li><li>执行效率不是关键问题</li></ol><h2 id="六、练习"><a href="#六、练习" class="headerlink" title="六、练习"></a>六、练习</h2><blockquote><p>Sunny软件公司欲为数据库备份和同步开发一套简单的数据库同步指令，通过指令可以对数据库中的数据和结构进行备份，例如，输入指令“COPY VIEW FROM srcDB TO desDB”表示将数据库srcDB中的所有视图(View)对象都拷贝至数据库desDB；输入指令“MOVE TABLE Student FROM srcDB TO esDB”表示将数据库srcDB中的Student表移动至数据库desDB。试使用解释器模式来设计并实现该数据库同步指令。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Stack<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 解释器模式 * Sunny软件公司欲为数据库备份和同步开发一套简单的数据库同步指令， * 通过指令可以对数据库中的数据和结构进行备份， * 例如， * 输入指令“COPY VIEW FROM srcDB TO desDB” * 表示将数据库srcDB中的所有视图(View)对象都拷贝至数据库desDB； * 输入指令“MOVE TABLE Student FROM srcDB TO esDB” * 表示将数据库srcDB中的Student表移动至数据库desDB。 * 试使用解释器模式来设计并实现该数据库同步指令。 */</span><span class="token comment" spellcheck="true">// 抽象指令</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象公共方法，用于解释具体的指令</span>    <span class="token keyword">abstract</span> String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 从。。到。。 指令 - 非终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">FromOrder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractOrder first<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractOrder second<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">FromOrder</span><span class="token punctuation">(</span>AbstractOrder first<span class="token punctuation">,</span> AbstractOrder second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>second <span class="token operator">=</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"从"</span> <span class="token operator">+</span> first<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"到"</span> <span class="token operator">+</span> second<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 视图指令 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">ViewOrder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String view<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ViewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">ViewOrder</span><span class="token punctuation">(</span>String view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[所有视图]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"[视图:"</span> <span class="token operator">+</span> view <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 表格指令 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">TableOrder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String table<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TableOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">TableOrder</span><span class="token punctuation">(</span>String table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"[所有表格]"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"["</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">"表]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 数据库名称指令 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">DBOrder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DBOrder</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"[数据库:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 备份指令 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">CopyOrder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"拷贝"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 移动指令 - 终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">MoveOrder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"移动"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 句子解释(Copy/Move FromOder) - 非终结符表达式</span><span class="token keyword">class</span> <span class="token class-name">SentenceOrder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractOrder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AbstractOrder direction<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractOrder action<span class="token punctuation">;</span>    <span class="token keyword">private</span> AbstractOrder distance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SentenceOrder</span><span class="token punctuation">(</span>AbstractOrder direction<span class="token punctuation">,</span> AbstractOrder action<span class="token punctuation">,</span> AbstractOrder distance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>direction <span class="token operator">=</span> direction<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>action <span class="token operator">=</span> action<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>distance <span class="token operator">=</span> distance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    String <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> direction<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> action<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> distance<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指令工具类</span><span class="token keyword">class</span> <span class="token class-name">InstructionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String instruction<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 输入的指令字符串</span>    <span class="token keyword">private</span> AbstractOrder order<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 字符串转换后的指令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>String instruction<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractOrder direction<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// sentence 指令的 direction</span>        AbstractOrder action<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// sentence 指令的 action</span>        AbstractOrder distance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// sentence 指令的 distance</span>        <span class="token comment" spellcheck="true">// 使用栈来保存表达式</span>        Stack<span class="token operator">&lt;</span>AbstractOrder<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将输入的指令字符串按照 空格 拆分</span>        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> instruction<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> String word <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果为 from 指令，则解析 From [DB] TO [DB]</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"from"</span><span class="token operator">:</span>                    String f <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>i<span class="token punctuation">;</span>                    String s <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FromOrder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DBOrder</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DBOrder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"copy"</span><span class="token operator">:</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CopyOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"move"</span><span class="token operator">:</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MoveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"view"</span><span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>words<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewOrder</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ViewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"table"</span><span class="token operator">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>words<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"from"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TableOrder</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TableOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"无效指令"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        distance <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        action <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        direction <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// order 最终是一个解释类表达式</span>        order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SentenceOrder</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span> action<span class="token punctuation">,</span> distance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterpretPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String order <span class="token operator">=</span> <span class="token string">"MOVE TABLE Student FROM srcDB TO esDB"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> InstructionHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InstructionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String output <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/22/Linux/1.Ubuntu%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%A3%80%E6%9F%A5/"/>
      <url>/2019/07/22/Linux/1.Ubuntu%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%A3%80%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu安全基线检查"><a href="#Ubuntu安全基线检查" class="headerlink" title="Ubuntu安全基线检查"></a>Ubuntu安全基线检查</h1><p>来自于阿里云云安全中心于 2019/07/22 发送的一条安全漏洞检查，其中关于账户、文件等方面的安全检查及修改建议。</p><h2 id="一、设置密码失效时间"><a href="#一、设置密码失效时间" class="headerlink" title="一、设置密码失效时间"></a>一、设置密码失效时间</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>设置密码失效时间，强制定期修改密码，减少密码被泄露和猜测风险，使用非密码登录(如密钥对)方式可以忽略。</p><h3 id="加固建议"><a href="#加固建议" class="headerlink" title="加固建议"></a>加固建议</h3><p>在 /etc/login.defs 中将 PASS_MAX_DAYS 参数设置为 60-180 之间，如：</p><pre class=" language-shell"><code class="language-shell">PASS_MAX_DAYS 90</code></pre><p>需同时执行命令设置 root 密码失效时间：</p><pre class=" language-shell"><code class="language-shell">chage --maxdays 90 root</code></pre><h2 id="二、设置密码修改最小间隔时间"><a href="#二、设置密码修改最小间隔时间" class="headerlink" title="二、设置密码修改最小间隔时间"></a>二、设置密码修改最小间隔时间</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>设置密码修改最小间隔时间，限制密码更改过于频繁</p><h3 id="加固建议-1"><a href="#加固建议-1" class="headerlink" title="加固建议"></a>加固建议</h3><p>在 /etc/login.defs 中将 PASS_MIN_DAYS 参数设置为 7-14 之间，建议为7：</p><pre class=" language-shell"><code class="language-shell">PASS_MIN_DAYS 7</code></pre><p>需同时执行命令为 root 用户设置：</p><pre class=" language-shell"><code class="language-shell">chage --mindays 7 root</code></pre><h2 id="三、密码复杂度检查"><a href="#三、密码复杂度检查" class="headerlink" title="三、密码复杂度检查"></a>三、密码复杂度检查</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p>检查密码长度和密码是否使用多种字符类型</p><h3 id="加固建议-2"><a href="#加固建议-2" class="headerlink" title="加固建议"></a>加固建议</h3><ol><li><p>安装 PAM 的 cracklib 模块，执行命令：</p><ol><li><blockquote><p>apt-get update &amp;&amp; apt-get install libpam-cracklib</p></blockquote></li></ol></li><li><p>编辑 <code>/etc/pam.d/common-password</code>，在 password requisite pam_cracklib.so 开头的这一行配置 minclass(至少包含小写字母、大写字母、数字、特殊字符等4类字符中的3类或4类) 设置为3或4，即在行末尾加上参数 minclass=3；在 password[success=1 default=ignore] pam_unix.so 开头的这一行增加配置 minlen（密码最小长度）设置为9-32位，建议为9,即在行末尾加上参数 minlen=9</p></li></ol><h2 id="四、检查密码重用是否受限制"><a href="#四、检查密码重用是否受限制" class="headerlink" title="四、检查密码重用是否受限制"></a>四、检查密码重用是否受限制</h2><h3 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h3><p>强制用户不重用最新使用的密码，降低密码猜测攻击风险</p><h3 id="加固建议-3"><a href="#加固建议-3" class="headerlink" title="加固建议"></a>加固建议</h3><p>编辑 <code>/etc/pam.d/common-password</code>，在 <code>password [success=1 default=ignore] pam_unix.so</code> 开头的这一行增加配置 remember 设置为 5-24 之间，如在行末尾加上 remember=5</p><h2 id="五、设置用户权限配置文件的权限"><a href="#五、设置用户权限配置文件的权限" class="headerlink" title="五、设置用户权限配置文件的权限"></a>五、设置用户权限配置文件的权限</h2><h3 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h3><p>设置用户权限配置文件的权限</p><h3 id="加固建议-4"><a href="#加固建议-4" class="headerlink" title="加固建议"></a>加固建议</h3><p>执行如下5条命令</p><pre class=" language-shell"><code class="language-shell">chown root:root /etc/passwd /etc/shadow /etc/group /etc/gshadowchmod 0644 /etc/groupchmod 0644 /etc/passwdchmod 0400 /etc/shadowchmod 0400 /etc/gshadow</code></pre><h2 id="六、设置SSH空闲超时退出时间"><a href="#六、设置SSH空闲超时退出时间" class="headerlink" title="六、设置SSH空闲超时退出时间"></a>六、设置SSH空闲超时退出时间</h2><h3 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h3><p>设置SSH空闲超时退出时间，可降低未授权用户访问其他用户 ssh 会话的风险</p><h3 id="加固建议-5"><a href="#加固建议-5" class="headerlink" title="加固建议"></a>加固建议</h3><p>编辑 <code>/etc/ssh/sshd_config</code>，将 ClientAliveInterval 设置为300到900，即5-15分钟，将ClientAliveCountMax 设置为0-3之间。</p><pre class=" language-shell"><code class="language-shell">ClientAliveInterval 600ClientAliveCountMax 2</code></pre><h3 id="七、检查系统空密码账户"><a href="#七、检查系统空密码账户" class="headerlink" title="七、检查系统空密码账户"></a>七、检查系统空密码账户</h3><h3 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h3><p>检查系统空密码账户</p><h3 id="加固建议-6"><a href="#加固建议-6" class="headerlink" title="加固建议"></a>加固建议</h3><p>为用户设置一个非空密码，或者执行 <code>passwd -l &lt;username&gt;</code> 锁定用户</p><h2 id="八、禁止SSH空密码用户登录"><a href="#八、禁止SSH空密码用户登录" class="headerlink" title="八、禁止SSH空密码用户登录"></a>八、禁止SSH空密码用户登录</h2><h3 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h3><p>禁止SSH空密码用户登录</p><h3 id="加固建议-7"><a href="#加固建议-7" class="headerlink" title="加固建议"></a>加固建议</h3><p>编辑文件 <code>/etc/ssh/sshd_config</code>，将 PermitEmptyPasswords 配置为 no：</p><pre class=" language-shell"><code class="language-shell">PermitEmptyPasswords no</code></pre><h2 id="九、确保密码到期警告天数为7或更多"><a href="#九、确保密码到期警告天数为7或更多" class="headerlink" title="九、确保密码到期警告天数为7或更多"></a>九、确保密码到期警告天数为7或更多</h2><h3 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h3><p>确保密码到期警告天数为7或更多</p><h3 id="加固建议-8"><a href="#加固建议-8" class="headerlink" title="加固建议"></a>加固建议</h3><p>在 /etc/login.defs 中将 PASS_WARN_AGE 参数设置为 7-14之间，建议为7：</p><pre class=" language-shell"><code class="language-shell">PASS_WARN_AGE 7</code></pre><p>同时执行命令使root用户设置生效：</p><pre class=" language-shell"><code class="language-shell">chage --warndays 7 root</code></pre><h2 id="十、确保SSH-MaxAuthTries设置为3到6之间"><a href="#十、确保SSH-MaxAuthTries设置为3到6之间" class="headerlink" title="十、确保SSH MaxAuthTries设置为3到6之间"></a>十、确保SSH MaxAuthTries设置为3到6之间</h2><h3 id="描述-9"><a href="#描述-9" class="headerlink" title="描述"></a>描述</h3><p>设置较低的Max AuthTrimes参数将降低SSH服务器被暴力攻击成功的风险。</p><h3 id="加固建议-9"><a href="#加固建议-9" class="headerlink" title="加固建议"></a>加固建议</h3><p>在/etc/ssh/sshd_config中取消MaxAuthTries注释符号#，设置最大密码尝试失败次数3-6，建议为4：</p><pre class=" language-shell"><code class="language-shell">MaxAuthTries 4</code></pre><h2 id="十一、SSHD强制使用V2安全协议"><a href="#十一、SSHD强制使用V2安全协议" class="headerlink" title="十一、SSHD强制使用V2安全协议"></a>十一、SSHD强制使用V2安全协议</h2><h3 id="描述-10"><a href="#描述-10" class="headerlink" title="描述"></a>描述</h3><p>SSHD强制使用V2安全协议</p><p>类型：SSH服务配置</p><h3 id="加固建议-10"><a href="#加固建议-10" class="headerlink" title="加固建议"></a>加固建议</h3><p>编辑 /etc/ssh/sshd_config 文件以按如下方式设置参数：</p><pre class=" language-shell"><code class="language-shell">Protocol 2</code></pre><h2 id="十二、确保SSH-LogLevel设置为INFO"><a href="#十二、确保SSH-LogLevel设置为INFO" class="headerlink" title="十二、确保SSH LogLevel设置为INFO"></a>十二、确保SSH LogLevel设置为INFO</h2><h3 id="描述-11"><a href="#描述-11" class="headerlink" title="描述"></a>描述</h3><p>确保SSH LogLevel设置为INFO,记录登录和注销活动</p><p>类型：服务配置</p><h3 id="加固建议-11"><a href="#加固建议-11" class="headerlink" title="加固建议"></a>加固建议</h3><p>编辑 /etc/ssh/sshd_config 文件以按如下方式设置参数(取消注释):</p><pre class=" language-shell"><code class="language-shell">LogLevel INFO</code></pre><h2 id="十三、访问控制配置文件的权限设置"><a href="#十三、访问控制配置文件的权限设置" class="headerlink" title="十三、访问控制配置文件的权限设置"></a>十三、访问控制配置文件的权限设置</h2><h3 id="描述-12"><a href="#描述-12" class="headerlink" title="描述"></a>描述</h3><p>访问控制配置文件的权限设置</p><p>类型：文件权限</p><h3 id="加固建议-12"><a href="#加固建议-12" class="headerlink" title="加固建议"></a>加固建议</h3><p>运行以下4条命令：</p><pre class=" language-shell"><code class="language-shell">chown root:root /etc/hosts.allow chown root:root /etc/hosts.deny chmod 644 /etc/hosts.denychmod 644 /etc/hosts.allow</code></pre><h2 id="十四、开启地址空间布局随机化"><a href="#十四、开启地址空间布局随机化" class="headerlink" title="十四、开启地址空间布局随机化"></a>十四、开启地址空间布局随机化</h2><h3 id="描述-13"><a href="#描述-13" class="headerlink" title="描述"></a>描述</h3><p>它将进程的内存空间地址随机化来增大入侵者预测目的地址难度，从而降低进程被成功入侵的风险</p><p>类型：入侵防范</p><h3 id="加固建议-13"><a href="#加固建议-13" class="headerlink" title="加固建议"></a>加固建议</h3><p>在/etc/sysctl.conf或/etc/sysctl.d/*文件中设置以下参数： <code>kernel.randomize_va_space = 2</code> 执行命令： <code>sysctl -w kernel.randomize_va_space=2</code></p><h2 id="十五、确保root是唯一的UID为0的帐户"><a href="#十五、确保root是唯一的UID为0的帐户" class="headerlink" title="十五、确保root是唯一的UID为0的帐户"></a>十五、确保root是唯一的UID为0的帐户</h2><h3 id="描述-14"><a href="#描述-14" class="headerlink" title="描述"></a>描述</h3><p>除root以外其他UID为0的用户都应该删除，或者为其分配新的UID</p><p>类型：身份鉴别</p><h3 id="加固建议-14"><a href="#加固建议-14" class="headerlink" title="加固建议"></a>加固建议</h3><p>除root以外其他UID为0的用户(查看命令<code>cat /etc/passwd | awk -F: &#39;($3 == 0) { print $1 }&#39;|grep -v &#39;^root$&#39;</code>)都应该删除，或者为其分配新的UID</p><h2 id="十六、确保rsyslog服务已启用"><a href="#十六、确保rsyslog服务已启用" class="headerlink" title="十六、确保rsyslog服务已启用"></a>十六、确保rsyslog服务已启用</h2><h3 id="描述-15"><a href="#描述-15" class="headerlink" title="描述"></a>描述</h3><p>确保rsyslog服务已启用，记录日志用于审计</p><p>类型：安全审计</p><h3 id="加固建议-15"><a href="#加固建议-15" class="headerlink" title="加固建议"></a>加固建议</h3><p>运行以下命令启用rsyslog服务：</p><pre class=" language-shell"><code class="language-shell">service rsyslog start</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第九章 自定义 Security Mock 注解</title>
      <link href="/2019/07/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/9.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/07/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/9.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-自定义-Security-Mock-注解"><a href="#第九章-自定义-Security-Mock-注解" class="headerlink" title="第九章 自定义 Security Mock 注解"></a>第九章 自定义 Security Mock 注解</h1><p>从 <code>第八章 Spring Security 的测试支持</code> 可以看到，如果不使用自定义的身份验证主体，@WithMockUser 是一个很好的选择。</p><h2 id="一、-WithMockUser-存在的问题"><a href="#一、-WithMockUser-存在的问题" class="headerlink" title="一、@WithMockUser 存在的问题"></a>一、@WithMockUser 存在的问题</h2><p>大部分情况下，我们使用都不是 UserDetails 对象，而是 UserDetails 的自定义实现。</p><p>且 @WithUserDetails 注解还需要查询数据库，并且要求用户存在。</p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><p>我们可以通过模仿 @WithMockUser 注解，创建自己的 @WithMockSutomUser注解。并通过实现 WithSecurityContextFactory 来使用自己的注解。</p><h3 id="1-WithMockSutomUser"><a href="#1-WithMockSutomUser" class="headerlink" title="1. @WithMockSutomUser"></a>1. @WithMockSutomUser</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@WithSecurityContext</span><span class="token punctuation">(</span>factory <span class="token operator">=</span> WithMockCustomUserSecurityContextFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">WithMockCustomUser</span> <span class="token punctuation">{</span>    String <span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"rob"</span><span class="token punctuation">;</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"Rob Winch"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-WithMockCustomUserSecurityContextFactory"><a href="#2-WithMockCustomUserSecurityContextFactory" class="headerlink" title="2. WithMockCustomUserSecurityContextFactory"></a>2. WithMockCustomUserSecurityContextFactory</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">WithUserDetailsSecurityContextFactory</span>    <span class="token keyword">implements</span> <span class="token class-name">WithSecurityContextFactory</span><span class="token operator">&lt;</span>WithUserDetails<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDetailsService userDetailsService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">WithUserDetailsSecurityContextFactory</span><span class="token punctuation">(</span>UserDetailsService userDetailsService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDetailsService <span class="token operator">=</span> userDetailsService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> SecurityContext <span class="token function">createSecurityContext</span><span class="token punctuation">(</span>WithUserDetails withUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> withUser<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token string">"value() must be non-empty String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserDetails principal <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        Authentication authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>principal<span class="token punctuation">,</span> principal<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> principal<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityContext context <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">createEmptyContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>现在，我们使用新的注解来测试类或方法，Spring Security 的 WithSecurityContextTestExecutionListener 将确保我们的 SecurityContext 得到了适当的填充。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第八章 Spring Security 的测试支持</title>
      <link href="/2019/07/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/8.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2019/07/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/8.%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-Spring-Security-的测试支持"><a href="#第八章-Spring-Security-的测试支持" class="headerlink" title="第八章 Spring Security 的测试支持"></a>第八章 Spring Security 的测试支持</h1><p>本章节只介绍 Spring Security 提供的测试支持，包含哪些关键的注解、如何设置Security测试环境、以及注解的作用。</p><p>在下一章节会介绍如何通过重写 @WithMockUser 来使用自定义的 UserDetails 对象。</p><blockquote><p>官网上的是 Spring Security 与原始的 Spring Test 环境的集成，这里就不做赘述了，我们使用的是 SpringBoot Test 环境</p></blockquote><h2 id="一、设置测试环境"><a href="#一、设置测试环境" class="headerlink" title="一、设置测试环境"></a>一、设置测试环境</h2><p>需要先引入 spring-security-test 依赖，这样就可以直接在 @SpringBootTest 中集成 Security 的测试环境，就是这么简单.</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// .. 一些 JUnit 单元测试方法</span><span class="token punctuation">}</span></code></pre><h2 id="二、常用注解"><a href="#二、常用注解" class="headerlink" title="二、常用注解"></a>二、常用注解</h2><p>单元测试要尽量做到“单元”化，只测试一个具体的功能，而不用将MVC、DAO各层都测试一遍。</p><p>因此这些注解可以帮助我们建立一个模拟的测试环境，使我们的测试代码只关注业务是否正常执行，代码是否正确。而不用考虑用户是否登陆，是否需要重新授权等问题。</p><h3 id="1-WithMockUser"><a href="#1-WithMockUser" class="headerlink" title="1. @WithMockUser"></a>1. @WithMockUser</h3><p>在方法上使用一个模拟的用户，而不用真的去注册并登陆。</p><p>该注解会 Mock 一个用户名为‘user’，密码为 ’password‘，角色为 ’ROLE_USER’ 的Authentication，并将其注入到 SecurityContext 中。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@WithMockUser</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMessageByUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 查询SecurityContext 上下文环境，可以取到 Mock 的模拟用户数据</span>    String username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UserDetails<span class="token punctuation">)</span>SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getSecurityContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre><blockquote><p>思考：如果我们使用的是自定义的 CustomUserDetails 呢？比如扩展了 UserDetails 的属性，增加了 level 等级属性，那么将如何Mock并从上下文中获取呢？    –这将会在下一节“自定义注解”中说明</p></blockquote><h3 id="2-WithAnonymousUser"><a href="#2-WithAnonymousUser" class="headerlink" title="2. @WithAnonymousUser"></a>2. @WithAnonymousUser</h3><p>当需要用户登录，但是不需要用户的信息时，可以考虑以匿名用户的身份运行一些测试。这样会更加方便。</p><h3 id="3-WithUserDetails"><a href="#3-WithUserDetails" class="headerlink" title="3. @WithUserDetails"></a>3. @WithUserDetails</h3><p>使用自定义的 UserDetailsService 来创建身份验证的主题，但是需要用户存在。在正常业务中，可能还涉及到数据库查询，如果包含数据库查询，还需要与业务逻辑的数据库隔离等等问题。</p><p>自定义查找的用户名，以及自定义用来查找的 UserDetailsService。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WithUserDetails</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"customUsername"</span><span class="token punctuation">,</span> userDetailsServiceBeanName <span class="token operator">=</span> <span class="token string">"myUserDetailsService"</span><span class="token punctuation">)</span></code></pre><h2 id="三、完整的测试案例"><a href="#三、完整的测试案例" class="headerlink" title="三、完整的测试案例"></a>三、完整的测试案例</h2><p>UserService 用户业务服务，提供一个创建用户的功能，并且在保存之前，记录当前创建人。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 用户业务服务</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建用户，并且指定创建人与创建时间</span>    <span class="token keyword">public</span> User <span class="token function">createUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从当前环境中取出当前主体的用户名</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UserDetails<span class="token punctuation">)</span>SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getSecurityContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 保存新建用户的创建者、创建时间</span>        user<span class="token punctuation">.</span><span class="token function">setCreateUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试用户在创建时，是否设置了创建人（即@WithMockUser 是否把用户注入了SecurityContext中）。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Runwith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@WithMockUser</span><span class="token punctuation">(</span>username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> roles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"ADMIN"</span><span class="token punctuation">,</span><span class="token string">"USER"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assertions<span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCreateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualsTo</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第七章 Spring Security 中的核心服务</title>
      <link href="/2019/07/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/7.%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/07/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/7.%E6%A0%B8%E5%BF%83%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-Spring-Security-中的核心服务"><a href="#第七章-Spring-Security-中的核心服务" class="headerlink" title="第七章 Spring Security 中的核心服务"></a>第七章 Spring Security 中的核心服务</h1><p><img src="https://i.loli.net/2019/07/19/5d315f6f3a2c585678.png" alt="SpringSecurity中的核心组件与服务"></p><h2 id="一、核心接口与其实现"><a href="#一、核心接口与其实现" class="headerlink" title="一、核心接口与其实现"></a>一、核心接口与其实现</h2><p>在 <code>第五章 SpringSecurity 中的核心组件</code> 与 <code>第六章 SpringSecurity 身份认证流程</code> 中介绍了 Spring Security 体系结构及其核心类。下面更加深入的了解一些核心接口与其实现方法。</p><p>上图描述了一个请求认证，大致需要经过的过滤器、接口，及各个接口的子类实现。</p><p>其中标黄的部分是下面讲解的重点。</p><blockquote><p>具体的接口与实现类的含义，可以参考官方网站中的解释并结合图中的关系进行梳理。我只会挑选一些核心的实现方法来说。</p></blockquote><blockquote><p>如果不想看源码，请直接看我写的注释，也能明白这些类的执行过程。</p></blockquote><h3 id="1-UsernamePasswordAuthenticationFilter"><a href="#1-UsernamePasswordAuthenticationFilter" class="headerlink" title="1. UsernamePasswordAuthenticationFilter"></a>1. UsernamePasswordAuthenticationFilter</h3><p>拦截并处理用户的登录请求</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Authentication <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                            HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 登录认证请求必须是POST</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>postOnly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span>            <span class="token string">"Authentication method not supported: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 检查请求 request 中是否包含 username、password 参数</span>    String username <span class="token operator">=</span> <span class="token function">obtainUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token function">obtainPassword</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        username <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    username <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 将 username、password 封装为一个 UsernamePasswordAuthenticationToken 对象</span>    <span class="token comment" spellcheck="true">// 该对象是 Authentication 的实现类</span>    UsernamePasswordAuthenticationToken authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>        username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. 调用 AuthenticationManager 的认证方法</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-ProviderManager"><a href="#2-ProviderManager" class="headerlink" title="2. ProviderManager"></a>2. ProviderManager</h3><p>上面调用 authenticate(authRequset) 的 AuthenticationManager 是一个接口类，其具体实现是 ProviderManager。当然，也可以选择其他实现类或者自定义。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 该方法用于验证 authentication（也就是上面传入的 UsernamePasswordAuthenticationToken） */</span><span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span>    <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Authentication</span><span class="token operator">></span> toTest <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AuthenticationException lastException <span class="token operator">=</span> null<span class="token punctuation">;</span>    Authentication result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> debug <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 循环遍历 AuthenticationProvider 的实现类集合</span>    <span class="token comment" spellcheck="true">// 如果有超过一个的 provider 支持，则使用第一个</span>    <span class="token comment" spellcheck="true">// 如果一个都不支持，则返回 AuthenticationException 异常</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AuthenticationProvider provider <span class="token operator">:</span> <span class="token function">getProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 判断是否支持</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>provider<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>toTest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication attempt using "</span>                         <span class="token operator">+</span> provider<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 3. 调用 provider 的认证，下面会以 DaoAuthenticationProvider 为例进行介绍</span>            result <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">copyDetails</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccountStatusException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">prepareException</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">prepareException</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastException <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 4. 进行父类的认证尝试</span>            result <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ProviderNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastException <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eraseCredentialsAfterAuthentication            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 5. 认证完成，请求结束之后，删除 SecurityContextHolder 中保存的 SecurityContext，清除相关数据</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>CredentialsContainer<span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 6. 发送验证成功的事件</span>        eventPublisher<span class="token punctuation">.</span><span class="token function">publishAuthenticationSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 7. 身份验证失败，抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastException <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProviderNotFoundException</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>            <span class="token string">"ProviderManager.providerNotFound"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> toTest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"No AuthenticationProvider found for {0}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">prepareException</span><span class="token punctuation">(</span>lastException<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> lastException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-DaoAuthenticationProvider"><a href="#3-DaoAuthenticationProvider" class="headerlink" title="3. DaoAuthenticationProvider"></a>3. DaoAuthenticationProvider</h3><p>DaoAuthenticationProvider 包含两个接口属性 PasswordEncoder 与 UserDetailsService，通过 UserDetailsService 加载用户数据，并使用 PasswordEncoder 比较 UserDetails.password 与 token.password 是否相等。</p><p>以此来决定是否认证成功。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> UserDetails <span class="token function">retrieveUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>                                         UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span>    <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    <span class="token function">prepareTimingAttackProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用 UserDetailsService 的 loadUserByUsername 方法，查询装载 UserDetails</span>        <span class="token comment" spellcheck="true">// 在实际开发中，通常会自定义 UserDetailsService 的实现，例如将数据库查询的 User 对象与 UserDetails 对象进行一个适配</span>        <span class="token comment" spellcheck="true">// 适配者也需要我们自己定义，如 CustomUserDetails 实现 UserDetails，并将 user.role 转换为 authority等。</span>        UserDetails loadedUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadedUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span>                <span class="token string">"UserDetailsService returned null, which is an interface contract violation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> loadedUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">mitigateAgainstTimingAttack</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-UserDetailsService"><a href="#4-UserDetailsService" class="headerlink" title="4. UserDetailsService"></a>4. UserDetailsService</h3><p>UserDetailsService 是整个 Dao 认证框架的核心，用来装载特殊的用户数据。</p><p>因为该类为接口类，只声明了一个 loadUserByUsername(String) 方法，所以这里我们使用自定义实现来演示在日常开发场景中的使用过程：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 1. 实现 UserDetailsService 接口，自定义获取用户的方法</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoUserDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2. 注入数据库查询实例，这里不限数据库，只要能获取到用户即可。自己new的也行</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 3. 从数据库中查询到 User 对象</span>        DBUser user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationCredentialsNotFoundException</span><span class="token punctuation">(</span><span class="token string">"user not found."</span><span class="token punctuation">)</span>；        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4. 将 DBUser 包装为一个 UserDetails 对象，并将 user.roles 转换为 Authority</span>        <span class="token keyword">return</span> User<span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorities</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、其他"><a href="#二、其他" class="headerlink" title="二、其他"></a>二、其他</h2><p>上面几个类大致说明了，如果将数据库的用户转换为 Spring Security 支持的 Authentication 对象的。</p><p>其它如内存认证、jdbcDaoImpl 的实现不再赘述。</p><p>还有如自定义 PasswordEncoder、自定义 UserDetails 等其它实现，就不一一列举了，网上一搜一大把。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第六章 SpringSecurity 身份认证流程</title>
      <link href="/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/6.%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/6.%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-SpringSecurity-身份认证流程"><a href="#第六章-SpringSecurity-身份认证流程" class="headerlink" title="第六章 SpringSecurity 身份认证流程"></a>第六章 SpringSecurity 身份认证流程</h1><h2 id="一、标准的身份认证"><a href="#一、标准的身份认证" class="headerlink" title="一、标准的身份认证"></a>一、标准的身份认证</h2><p>一个标准的身份验证流程：</p><ol><li>用户提供用户名与密码</li><li>系统验证用户名密码是否正确</li><li>获取该用户的上下文信息（如角色列表、权限等）</li><li>为用户建立安全上下文</li><li>访问受保护资源时，通过上下文信息验证权限</li></ol><p>以下示例来自于 <code>Spring Security Reference</code>，演示了一个简单的迷你认证环境。</p><h3 id="模拟身份认证"><a href="#模拟身份认证" class="headerlink" title="模拟身份认证"></a>模拟身份认证</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationExample</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> AuthenticationManager am <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SampleAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    BufferedReader in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 接收用户名与密码</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter your username:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Please enter your password:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2. 生成 token</span>        Authentication request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 验证 token 是否正确</span>        Authentication result <span class="token operator">=</span> am<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 将认证主题注入上下文</span>        SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>AuthenticationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Authentication failed: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Successfully authenticated. Security context contains: "</span> <span class="token operator">+</span>            SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SampleAuthenticationManager</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationManager</span> <span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span> AUTHORITIES <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    AUTHORITIES<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"ROLE_USER"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>auth<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>auth<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>auth<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        auth<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AUTHORITIES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token string">"Bad Credentials"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通常情况下，这个流程是由 Spring Security 内部执行的，但是这大致显示了 Spring Security 通过 username、password 构建一个 SecurityContext 的过程。</p><h3 id="直接设置-SecurityContextHolder"><a href="#直接设置-SecurityContextHolder" class="headerlink" title="直接设置 SecurityContextHolder"></a>直接设置 SecurityContextHolder</h3><p>如果你需要在一个已经拥有身份认证的系统（如自定义了过滤器或MVC控制器、拥有自己的认证系统等）中，接入 Spring Security 环境。</p><p>只需要在原有系统中读取第三方用户信息，构建一个 Spring Security 特定的 Authentication 对象，并将其放入 SecurityContextHolder 中即可。</p><h2 id="二、Web应用中的身份验证"><a href="#二、Web应用中的身份验证" class="headerlink" title="二、Web应用中的身份验证"></a>二、Web应用中的身份验证</h2><p>在一个Web 应用程序中使用 Spring Security 访问受保护的资源，流程如下：</p><p><img src="https://i.loli.net/2019/07/19/5d312c9031ea155349.png" alt="访问资源的验证及认证流程"></p><p>Spring Security 中提供了不同的类负责上图中的不同流程，主要参与者（按照使用顺序）是 ExceptionTranslationFilter、AuthenticationEntryPoint和 authentication mechanism。负责调用的是 AuthenticationManager。</p><p><img src="https://i.loli.net/2019/07/19/5d312f3a9d38248120.png" alt="安全拦截器与安全对象模型"></p><h3 id="ExceptionTranslationFilter"><a href="#ExceptionTranslationFilter" class="headerlink" title="ExceptionTranslationFilter"></a>ExceptionTranslationFilter</h3><p>ExceptionTranslationFilter 是一个 Spring Security 过滤器，负责检测所有引发的 Spring Security 异常。通常情况下，异常都是由 AbstractSecurityInterceptor 引发的，它是授权服务的主要提供者。</p><p>ExceptionTranslationFilter 在验证主题时(如图中的 ③⑦)，负责返回错误代码403(即认证成功，但是缺少权限的情况)，或者启动 AuthenticationEntryPoint（尚未登录）。</p><h3 id="AuthenticationEntryPoint"><a href="#AuthenticationEntryPoint" class="headerlink" title="AuthenticationEntryPoint"></a>AuthenticationEntryPoint</h3><p>负责为 web 应用程序提供一个默认的身份认证策略(③ )。</p><h3 id="Authentication-Mechanism-认证机制"><a href="#Authentication-Mechanism-认证机制" class="headerlink" title="Authentication Mechanism 认证机制"></a>Authentication Mechanism 认证机制</h3><p>浏览器提供了身份验证凭据之后，服务器就需要收集这些身份信息，并进入“身份验证机制”。将用户验证的凭据生成一个“request”对象，然后交给 AuthenticationManager。</p><p>如果 AuthenticationManager 验证接收回完全填充的 Authentication 对象后，它将认为请求有效，并将 Authentication 放入 SecurityContextHolder 中，并进行重试请求。</p><p>如果 AuthenticationManager 拒绝请求，身份验证机制将要求用户重新进行认证（跳转至url或者返回http状态码）。</p><h3 id="Store-SecurityContext"><a href="#Store-SecurityContext" class="headerlink" title="Store SecurityContext"></a>Store SecurityContext</h3><p>在 Spring Security 中，由 SecurityContextPersistenceFilter 来承担在请求之间存储 SecurityContext，它默认将 SecurityContext 作为HttpSession 的属性存储。</p><p>每个请求都会将 SecurityContext 恢复到 SecurityContextHolder 汇总，并且在请求完成时清除 SecurityContextHolder。这样做是十分安全的，且您不应该直接与 HttpSession交互，而应当总是与 SecurityContextHolder 交互。</p><p>如果在不使用 HttpSession 的应用程序(如 无状态的 Restful web 服务)中，对每个请求进行身份验证。SecurityContextPersistenceFilter 依然十分重要，因为它会确保 SecurityContextHolder 在每个请求之后被清除。</p><p>您可以通过自定义 SecurityContextPersistenceFilter 的行为，为每个请求创建一个新的 SecurityContext。以防止一个线程中的更改影响另一个线程，或者在临时更改上下文的地方创建一个新实例。</p><h3 id="Access-Control-访问控制"><a href="#Access-Control-访问控制" class="headerlink" title="Access-Control 访问控制"></a>Access-Control 访问控制</h3><p>在 Spring Security 中负责访问控制决策的接口是 AccessDecisionManager，它具有一个 decide 方法，该方法使用 Authentication 对象代表请求访问的主体、安全对象、和一个基于该对象的安全元数据属性列表（如角色列表属性等）。</p><h3 id="Spring-Security-与-AOP"><a href="#Spring-Security-与-AOP" class="headerlink" title="Spring Security 与 AOP"></a>Spring Security 与 AOP</h3><p>AOP 中提供了如：before、after、throws、around通知。Spring Security 为方法调用和 Web 请求提供了一个大致的建议，通过 around 通知，可以决定该方法是否继续调用，是否修改响应，以及是否抛出异常。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第五章 SpringSecurity 中的核心组件</title>
      <link href="/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/5.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/5.%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-SpringSecurity-中的核心组件"><a href="#第五章-SpringSecurity-中的核心组件" class="headerlink" title="第五章 SpringSecurity 中的核心组件"></a>第五章 SpringSecurity 中的核心组件</h1><p>通过前四章简单介绍了下 SpringSecurity 的命名空间配置和Java 配置，已经可以简单一个基于 Spring Security 的应用程序。</p><p>下面，将会研究其中一些在整个框架中使用的中心接口、类和抽象概念，了解它们如何协同工作，以支持 Spring Security 中的身份验证和访问控制。</p><h2 id="一、SecurityContextHolder"><a href="#一、SecurityContextHolder" class="headerlink" title="一、SecurityContextHolder"></a>一、SecurityContextHolder</h2><p>Spring-Security-Core 中对 SecurityContextHolder 的介绍如下：</p><pre class=" language-html"><code class="language-html">Associates a given {@link SecurityContext} with the current execution thread.将给定的{@link SecurityContext}与当前执行线程关联。</code></pre><p>SecurityContextHolder 用于存储应用程序当前Security 上下文的地方，其中包含当前使用应用程序的主体的细节。</p><p>默认情况下，SecurityContextHolder 使用ThreadLocal 来存储这些细节，如果在处理完当前主体的请求之后清除线程，那么这种方式就是非常安全的。</p><p>一般没有必要修改SecurityContextHolder 的默认值，但是 SpringSecurity 提供了修改的途径。</p><h2 id="二、SecurityContext"><a href="#二、SecurityContext" class="headerlink" title="二、SecurityContext"></a>二、SecurityContext</h2><pre class=" language-html"><code class="language-html">Interface defining the minimum security information associated with the current thread of execution.</code></pre><p>与安全信息相关的抽象接口，用来获取或设置 <code>Authentication</code> 。</p><h2 id="三、Authentication"><a href="#三、Authentication" class="headerlink" title="三、Authentication"></a>三、Authentication</h2><p>实现了 <code>Principal</code> 与序列化的接口，包含了当前请求的主体信息。通常是保存在 <code>SecurityContext</code> 中。</p><p>获取方法如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">getUsernameBySecurityContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Object principal <span class="token operator">=</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String username<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>prinicpal <span class="token keyword">instanceof</span> <span class="token class-name">UserDetails</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>UserDetails<span class="token punctuation">)</span>principal<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        username <span class="token operator">=</span> principal<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="四、GrantedAuthority"><a href="#四、GrantedAuthority" class="headerlink" title="四、GrantedAuthority"></a>四、GrantedAuthority</h2><p>除了用户主体之外，身份验证还提供了一额外的方法 getAuthorities()，该方法返回一个 GrantedAuthority 对象数组。</p><p>GrantedAuthority 通常为“角色”，用于配置 web授权、方法授权、域对象授权等。该属性通常由 UserDetailsService 加载给 UserDetails。</p><p>如果一个用户有几千个这种权限，内存的消耗将会是非常巨大的。</p><h2 id="五、UserDetails"><a href="#五、UserDetails" class="headerlink" title="五、UserDetails"></a>五、UserDetails</h2><p>从上面代码可以看出 <code>Authentication</code> 在大部分情况下是可以直接转换为 <code>UserDetails</code> 对象的。他表示一个主体，可以看做是用户数据库与 SecurityContextHolder 之间的适配器。</p><p>UserDetails 是 SpringSecurity 的核心接口，可以通过继承 UserDetails 来实现自定义的方法与属性。</p><h3 id="扩展UserDetails"><a href="#扩展UserDetails" class="headerlink" title="扩展UserDetails"></a>扩展UserDetails</h3><p>通过自定义 UserDetails 的实现，我们可以将其作为数据库实体与Authentication 的适配者。</p><p>数据库实体 User：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>collection <span class="token operator">=</span> <span class="token string">"db_user"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> roles<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>适配器实体 CustomUserDetails：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomUserDetails</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> AuthorityUtils<span class="token punctuation">.</span><span class="token function">createAuthorityList</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样，我们就可以通过 CustomUserDetails 在 User 与 Authentication 之间相互转换，实现数据库认证 SpringSecurity。</p><p>那么 UserDetails 对象是从哪里创建的呢？就是下面的 UserDetailsService 类。</p><h2 id="六、UserDetailsService"><a href="#六、UserDetailsService" class="headerlink" title="六、UserDetailsService"></a>六、UserDetailsService</h2><p>UserDetailsService 只有一个特殊方法，接收一个 string 的用户名参数，并返回一个 UserDetails。</p><pre class=" language-java"><code class="language-java">UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException<span class="token punctuation">;</span></code></pre><p>通过自定义实现 UserDetailsService，返回自己的 CustomUserDetails 对象。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomUserDetailsService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        User user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"user not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> CustomUserDetails userDetails <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomUserDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// todo 一些其他附加属性等</span>        <span class="token keyword">return</span> userDetails<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第四章 示例</title>
      <link href="/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/4.%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/4.%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-示例"><a href="#第四章-示例" class="headerlink" title="第四章 示例"></a>第四章 示例</h1><p>示例请参考  <a href="https://spring.io/spring-security/" target="_blank" rel="noopener">官方网站：http://spring.io/spring-security/</a>，或者 <a href="https://github.com/spring-projects/spring-security/tree/master/samples" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第三章 基于方法级别的安全配置</title>
      <link href="/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/3.%E6%96%B9%E6%B3%95%E7%BA%A7%E5%88%AB%E7%9A%84%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/3.%E6%96%B9%E6%B3%95%E7%BA%A7%E5%88%AB%E7%9A%84%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-基于方法级别的安全配置"><a href="#第三章-基于方法级别的安全配置" class="headerlink" title="第三章 基于方法级别的安全配置"></a>第三章 基于方法级别的安全配置</h1><p>Spring Security 提供了两种方法级别的安全配置，一个是框架的原始注释 @secure ，另一个新的基于表达式的注释。</p><blockquote><p>可以针对单个 Bean 进行保护，也可以使用 AspectJ 风格的切入点跨服务层保护多个 Bean。</p></blockquote><h2 id="一、EnableGlobalMethodSecurity-注解"><a href="#一、EnableGlobalMethodSecurity-注解" class="headerlink" title="一、EnableGlobalMethodSecurity 注解"></a>一、EnableGlobalMethodSecurity 注解</h2><p>在任何 <code>@Configuration</code> 实例上使用 <code>@EnableGlobalMethodSecurity</code> 注释，启用基于注释的安全性。示例如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>securedEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodSecurityConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>然后向方法添加注释，将相应地限制对该方法的访问。这些信息将会被传递给 AccessDecisionManager：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BankService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span><span class="token string">"IS_AUTHENTICATED_ANONYMOUSLY"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Account <span class="token function">readAccount</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span><span class="token string">"IS_AUTHENTICATED_ANONYMOUSLY"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Account<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Secured</span><span class="token punctuation">(</span><span class="token string">"ROLE_TELLER"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Account <span class="token function">post</span><span class="token punctuation">(</span>Account account<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者使用 基于表达式的语法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodSecurityConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BankService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"isAnnoymous()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Account <span class="token function">readAccount</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"isAnnoymous()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Account<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('ROLE_TELLER')"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Account <span class="token function">post</span><span class="token punctuation">(</span>Account account<span class="token punctuation">,</span> <span class="token keyword">double</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二、自定义方法安全配置"><a href="#二、自定义方法安全配置" class="headerlink" title="二、自定义方法安全配置"></a>二、自定义方法安全配置</h2><p>如果需要执行比 @EnableGlobalMethodSecurity 注释提供的更复杂的操作，可以扩展 GlobalMethodSecurityConfiguration。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">methodSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">GlobalMethodSecurityConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> MethodSecurityExpressionHandler <span class="token function">createExpressionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// create and return custom handler</span>        <span class="token keyword">return</span> expressionHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第二章 Java配置SpringSecurity</title>
      <link href="/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/2.%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/2.%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-Java配置SpringSecurity"><a href="#第二章-Java配置SpringSecurity" class="headerlink" title="第二章 Java配置SpringSecurity"></a>第二章 Java配置SpringSecurity</h1><p>从 Spring 3.1 以后，Spring框架支持了对 Java 配置的支持，所以这里就不再细述 XML 的配置方式了。感兴趣的可以直接 <a href="https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#ns-config" target="_blank" rel="noopener">查看 SpringSecurity 文档</a>，里面详细描述了 Java Configuration 对应的XML Configuration。</p><p>Spring Security 提供了许多 Java Configuration 的 Samples 示例，详见 <a href="https://github.com/spring-projects/spring-security/tree/master/samples/javaconfig" target="_blank" rel="noopener">Samples</a>。</p><h2 id="一、创建-Spring-Security-Java-配置"><a href="#一、创建-Spring-Security-Java-配置" class="headerlink" title="一、创建 Spring Security Java 配置"></a>一、创建 Spring Security Java 配置</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        InMemoryUserDetailsManager manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>            User<span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>查看 <code>@EnableWebSecurity</code> 的代码，可以发现其引入了 <code>WebSecurityConfiguration.class</code> 的配置类。</p><p>该配置创建了一个 <code>SpringSecurityFilterChain</code> 的过滤器，负责应用程序内部的所有安全（如保护应用的URL、验证提交的用户名密码、重定向至登录表单等等）。</p><p>其具有的主要功能如下：</p><ol><li>默认对应用程序中的每个 URL 进行身份验证</li><li>生成一个登录表单</li><li>允许用户使用表单的username、password进行身份认证</li><li>允许用户使用 logout 注销</li><li>预防 CSRF 攻击</li><li>维持会话固定（Session Fixation）</li><li>集成安全报头（Security Header）<ol><li>X-Content-Type-Options</li><li>Cache Control - 缓存控制</li><li>X-XSS-Protection integration - 保护X-XSS一体化</li><li>X-Frame-Options integration to help prevent - 防止点击劫持</li></ol></li><li>与 Servlet API 集成<ol><li>HttpServletRequset#getRemoteUser()</li><li>HttpServletRequest#getUserPrincipal()</li><li>HttpServletRequest#isUserInRole(String)</li><li>HttpServletRequest#login(String,String)</li><li>HttpServletRequest#logout()</li></ol></li></ol><h2 id="二、HttpSecurity-配置"><a href="#二、HttpSecurity-配置" class="headerlink" title="二、HttpSecurity 配置"></a>二、HttpSecurity 配置</h2><p>在开启 Java 配置之后，会默认开启所有路径的验证、表单登录、退出支持等等操作，但是我们并没有提供配置，这是因为 WebSecurityConfigurerAdapter 提供了一个默认的 <code>configure(HttpSecurity http)</code> 配置，如下所示：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Override this method to configure the {@link HttpSecurity}. Typically subclasses     * should not invoke this method by calling super as it may override their     * configuration. The default configuration is:     *     * &lt;pre>     * http.authorizeRequests().anyRequest().authenticated().and().formLogin().and().httpBasic();     * &lt;/pre>     *     * @param http the {@link HttpSecurity} to modify     * @throws Exception if an error occurs     */</span>    <span class="token comment" spellcheck="true">// @formatter:off</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 配置对应用程序的所有请求都需要身份验证</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 开启表单登录</span>            <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 允许使用 Http Basic 方式登录</span>    <span class="token punctuation">}</span></code></pre><h2 id="三、Java-配置和表单登录"><a href="#三、Java-配置和表单登录" class="headerlink" title="三、Java 配置和表单登录"></a>三、Java 配置和表单登录</h2><p>一般情况下，我们会使用自己定义的登录页面，而不是SpringSecurity默认提供的登录页面。因此，我们可以修改 HttpSecurity 的配置：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    http        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定登录页位置</span>            <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 允许所有用户访问基于表单登录关联的所有url权限</span><span class="token punctuation">}</span></code></pre><h2 id="四、授权请求"><a href="#四、授权请求" class="headerlink" title="四、授权请求"></a>四、授权请求</h2><p>默认情况下， HttpSecurity选择拦截所有的请求，并且只要有身份认证即可访问。我们可以通过 <code>http.authorizeRequest()</code> 方法添加多个子类来指定 url 的自定义需求。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    http        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 按照子类的顺序进行匹配</span>            <span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token string">"/resources/**"</span><span class="token punctuation">,</span><span class="token string">"signup"</span><span class="token punctuation">,</span><span class="token string">"/about"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 允许指定路径无需认证</span>            <span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 指定路径需要 ADMIN 权限</span>            <span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token string">"/db/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"hasRole('ADMIN') and hasRole('DBA')"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 使用 hasRole 表达式，这样不需要 ROLE 前缀</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 其他所有请求都需要身份验证</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="五、登出处理"><a href="#五、登出处理" class="headerlink" title="五、登出处理"></a>五、登出处理</h2><p>在使用 <code>WebSecurityConfigurerAdapter</code> 时，将会自动开启注销功能，访问 <code>/logout</code> 后会执行如下操作使用户注销：</p><ol><li>使用 Http Session 无效</li><li>清理任何与 RememberMe 相关的身份验证</li><li>清理 SecurityContextHolder</li><li>跳转到 “/login?logout”</li></ol><p>或者，也可以自定义注销需求：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    http        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token string">"/resources/**"</span><span class="token punctuation">,</span><span class="token string">"signup"</span><span class="token punctuation">,</span><span class="token string">"/about"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">antMatcher</span><span class="token punctuation">(</span><span class="token string">"/db/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span><span class="token string">"hasRole('ADMIN') and hasRole('DBA')"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                <span class="token comment" spellcheck="true">// 提供注销支持</span>            <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"/my/logout"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 触发注销操作的 url，如果开启了 CSRF保护，则此请求需要是POST</span>            <span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/my/index"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 注销后要重定向的URL，默认为 /login?logout</span>            <span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span>logoutSuccessHandler<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 自定义登出成功处理器</span>            <span class="token punctuation">.</span><span class="token function">invalidateHttpSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 在注销时是否需要使 HttpSession 无效</span>            <span class="token punctuation">.</span><span class="token function">addLogoutHandler</span><span class="token punctuation">(</span>logoutHandler<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 添加登出处理器</span>            <span class="token punctuation">.</span><span class="token function">deleteCookies</span><span class="token punctuation">(</span>cookieNamesToClear<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注销成功时删除指定的 cookie，这是一种显式添加 CookieClearingLogoutHandler 的方式</span><span class="token punctuation">}</span></code></pre><h3 id="5-1-LogoutHandler-登出处理器"><a href="#5-1-LogoutHandler-登出处理器" class="headerlink" title="5.1 LogoutHandler 登出处理器"></a>5.1 LogoutHandler 登出处理器</h3><p>LogoutHandler 实现能够参与注销处理的类，通过调用它们来执行必要的清理，且不会引发异常。各种实现如下：</p><ol><li>PersistentTokenBasedRememberMeServices</li><li>TokenBasedRememberMeServices</li><li>CookieClearingLogoutHandler</li><li>CsrfLogoutHandler</li><li>SecurityContextLogoutHandler</li></ol><p>以上处理器实现，大致能做到见名识义。</p><h3 id="5-2-LogoutSuccessHandler-登出成功处理器"><a href="#5-2-LogoutSuccessHandler-登出成功处理器" class="headerlink" title="5.2 LogoutSuccessHandler 登出成功处理器"></a>5.2 LogoutSuccessHandler 登出成功处理器</h3><p>与 LogoutHandler 类似，但是可能会引发异常。在 LogoutFilter 成功注销之后，LogoutSuccessHandler 会处理例如重定向或转发到适当的目标，具体实现如下：</p><ol><li>SimpleUrlLogoutSuccessHandler<ol><li>注销成功之后返回到指定 url，默认为 /login?logout</li></ol></li><li>HttpStatusReturningLogoutSuccessHandler<ol><li>允许在注销成功之后返回一个普通的 HTTP 状态码，而不是重定向至 URL</li></ol></li></ol><h3 id="5-3-其他的登出考虑"><a href="#5-3-其他的登出考虑" class="headerlink" title="5.3 其他的登出考虑"></a>5.3 其他的登出考虑</h3><ol><li>测试登录</li><li>csrf注意事项</li><li>单点登出</li></ol><h2 id="六、WebFlux-Security"><a href="#六、WebFlux-Security" class="headerlink" title="六、WebFlux Security"></a>六、WebFlux Security</h2><p>关于 Spring-WebFlux 具体是什么，可以详见 <a href="https://blog.csdn.net/get_set/article/details/79480233" target="_blank" rel="noopener">《Spring-WebFlux》</a>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebFluxSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWebfluxSecurityConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SecurityWebFilterChain <span class="token function">spirngSecurityFilterChain</span><span class="token punctuation">(</span>ServerHttpSecurity http<span class="token punctuation">)</span> <span class="token punctuation">{</span>        http            <span class="token punctuation">.</span><span class="token function">authorizeExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="七、OAuth-2-0"><a href="#七、OAuth-2-0" class="headerlink" title="七、OAuth 2.0"></a>七、OAuth 2.0</h2><p>TODO：<a href="https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#jc-oauth2login" target="_blank" rel="noopener">@see</a></p><h2 id="八、Authentication-认证"><a href="#八、Authentication-认证" class="headerlink" title="八、Authentication 认证"></a>八、Authentication 认证</h2><h3 id="8-1-内存认证-In-Memory-Authentication"><a href="#8-1-内存认证-In-Memory-Authentication" class="headerlink" title="8.1 内存认证(In-Memory Authentication)"></a>8.1 内存认证(In-Memory Authentication)</h3><p>直接在内存中配置多个用户，示例如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    UserBuilder user <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    InMemoryUserDetailsManager manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryUserDetailsManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    manager<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> manager<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="8-2-JDBC认证"><a href="#8-2-JDBC认证" class="headerlink" title="8.2 JDBC认证"></a>8.2 JDBC认证</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> DataSource dataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureGlobal</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    UserBuilder user <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">withDefaultPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    auth        <span class="token punctuation">.</span><span class="token function">jdbcAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withDefaultSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>其他如：LDAP认证、AuthenticationProvider、UseDetailsService不再赘述。</p></blockquote><h2 id="九、多重-HttpSecurity-配置"><a href="#九、多重-HttpSecurity-配置" class="headerlink" title="九、多重 HttpSecurity 配置"></a>九、多重 HttpSecurity 配置</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiHttpSecurityConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ApiWebSecurityConfigurationAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            http                <span class="token punctuation">.</span><span class="token function">antMatch</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FormLoginWebSecurityConfigurerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            http                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果请求的url以 /api/ 开头，将使用 <code>ApiWebSecurityConfigurationAdapter</code> 配置。其他请求使用 <code>FormLoginWebSecurityConfigurerAdapter</code> 配置。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》第一章 SpringSecurity 介绍</title>
      <link href="/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/1.%E5%BA%8F%E8%A8%80/"/>
      <url>/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/1.%E5%BA%8F%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-SpringSecurity-介绍"><a href="#第一章-SpringSecurity-介绍" class="headerlink" title="第一章 SpringSecurity 介绍"></a>第一章 SpringSecurity 介绍</h1><p>应用程序的安全性主要体现在两个方面：<code>身份验证(authentication)</code> 和<code>授权(authorization)（或叫做 访问控制(access-control)）</code>，同样，这也是 SpringSecurity 的两大目标。</p><h2 id="一、身份验证-Authentication"><a href="#一、身份验证-Authentication" class="headerlink" title="一、身份验证 Authentication"></a>一、身份验证 Authentication</h2><p>Spring Security 支持以下的技术集成，这里只写几种常见的并简单介绍：</p><ol><li>HTTP BASIC authentication headers<ol><li>请求头身份验证</li><li>需要在请求头中添加 “Authorization： Basic 用户和密码的base64加密字符串”</li><li>或者在url中添加用户名和密码：“<a href="http://username:password@api.luokaiii.cn/login”" target="_blank" rel="noopener">http://username:password@api.luokaiii.cn/login”</a></li></ol></li><li>LDAP<ol><li>一种非常常见的跨平台身份验证，常见于大型服务</li><li>通过WSS3.0 和轻量级目录协议LDAP一起搭建的认证方式</li><li>做法是：将用户数据放在LDAP服务器上，通过LDAP服务器上的数据对用户进行认证处理。</li><li>即登录时将用户名密码，发送给 LDAP服务器进行匹配，判断是否通过认证</li></ol></li><li>Form-based authentication<ol><li>表单身份验证</li></ol></li><li>OpenID authentication<ol><li>一种去中心化的网上身份认证系统</li><li>使用方法：在一个支持OpenID身份提供者的网站上进行注册，然后使用该网站提供的url来进行认证</li></ol></li><li>Jasig Central Authentication Service（CAS）<ol><li>CAS 集中式认证服务封路系统，也是一个流行的开源单点登录系统</li><li>CAS 系统一般分为 CAS Server(负责对用户进行认证) 和 CAS Client(处理用户名、密码等凭证)</li><li>流程为：用户访问Client服务 》 Client重定向至SSO服务器 》 身份认证 》 返回一个 Service Ticket 》 SSO服务器验证Ticket 》 允许访问</li></ol></li><li>Automatic ‘remember-me’ authentication<ol><li>记住我</li></ol></li><li>Anonymous authentication<ol><li>你们身份验证</li></ol></li><li>Java Open Source Single Sing-On<ol><li>Java 开源的单点登录 JOSSO</li></ol></li></ol><h2 id="二、Spring-Security-依赖管理"><a href="#二、Spring-Security-依赖管理" class="headerlink" title="二、Spring Security 依赖管理"></a>二、Spring Security 依赖管理</h2><p>获取 Spring Security 的最小依赖如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ... other dependency elements ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="Core-spring-security-core-jar"><a href="#Core-spring-security-core-jar" class="headerlink" title="Core - spring-security-core.jar"></a>Core - spring-security-core.jar</h3><p>包含核心身份验证和访问控制类、接口、远程处理支持和基本的API。是 Spring Security 应用程序的基础包。</p><ul><li>org.springframework.security.core<ul><li>包含Context上下文、UserDetails、UserDetailsService、jdbc验证、memory验证、token、Authority、Principal等支持</li></ul></li><li>org.springframework.security.access<ul><li>访问控制类和接口</li><li>包含Method拦截器、AccessDeniedException、认证失败事件、无授权事件、日志监听、访问拦截器等</li></ul></li><li>org.springframework.security.authentication<ul><li>包含数据库验证、RememberMe、Test、Token、Exception等支持</li></ul></li><li>org.springframework.security.provisioning<ul><li>包含创建、更新、删除、修改密码等操作UserDetails的接口，支持memory、JDBC两种类型</li></ul></li></ul><h3 id="Web-spring-security-web-jar"><a href="#Web-spring-security-web-jar" class="headerlink" title="Web - spring-security-web.jar"></a>Web - spring-security-web.jar</h3><p>包含过滤器和相关的网络安全基础设施代码。</p><p>是 web 身份验证服务和基于 url 访问控制的基础。</p><h3 id="Config-spring-security-config-jar"><a href="#Config-spring-security-config-jar" class="headerlink" title="Config - spring-security-config.jar"></a>Config - spring-security-config.jar</h3><p>包含 安全名称空间解析代码(或者Java配置代码)，即xml配置和java配置。</p><blockquote><p> — 以下包都是可选的 —-</p></blockquote><h3 id="CAS-spring-security-cas-jar"><a href="#CAS-spring-security-cas-jar" class="headerlink" title="CAS - spring-security-cas.jar"></a>CAS - spring-security-cas.jar</h3><p>Spring Security 的 CAS 客户端集成，对 CAS 单点登录服务器使用 。SpringSecurityWeb 身份验证的基础。</p><h3 id="Test-spring-security-test-jar"><a href="#Test-spring-security-test-jar" class="headerlink" title="Test - spring-security-test.jar"></a>Test - spring-security-test.jar</h3><p>支持使用 Spring Security 进行测试。后面会详细说明 Spring Security 是如何进行测试的。</p><h3 id="LDAP-spring-security-ldap-jar"><a href="#LDAP-spring-security-ldap-jar" class="headerlink" title="LDAP - spring-security-ldap.jar"></a>LDAP - spring-security-ldap.jar</h3><p>LDAP 身份验证和配置代码，如果需要使用 LDAP 身份验证或管理 LDAP 用户条目，则必须使用此依赖</p><h3 id="OAuth-2-0-Core-spring-security-oauth2-core-jar"><a href="#OAuth-2-0-Core-spring-security-oauth2-core-jar" class="headerlink" title="OAuth 2.0 Core - spring-security-oauth2-core.jar"></a>OAuth 2.0 Core - spring-security-oauth2-core.jar</h3><p>OAuth 2.0 授权框架和 OpenID Connect Core 1.0 的核心类和接口。</p><p>客户机、资源服务器、授权服务器都需要此依赖。</p><h3 id="OAuth-2-0-Client-spring-security-oauth2-client-jar"><a href="#OAuth-2-0-Client-spring-security-oauth2-client-jar" class="headerlink" title="OAuth 2.0 Client - spring-security-oauth2-client.jar"></a>OAuth 2.0 Client - spring-security-oauth2-client.jar</h3><p>OAuth 2.0 客户端，当需要使用 OAuth2.0 登录或者 OAuth客户端支持时使用。</p><h3 id="OAuth-2-0-JOSE-spring-security-oauth2-jose-jar"><a href="#OAuth-2-0-JOSE-spring-security-oauth2-jose-jar" class="headerlink" title="OAuth 2.0 JOSE - spring-security-oauth2-jose.jar"></a>OAuth 2.0 JOSE - spring-security-oauth2-jose.jar</h3><p>包含 Spring Security 对 JOSE(JavaScritp 对象签名和加密)框架的支持，包含如下规范：</p><ul><li>JSON Web Token - JWT</li><li>JSON Web Signature - JWS</li><li>JSON Web Encryption - JWE</li><li>JSON Web Key - JWK</li></ul><h3 id="OpenID-spring-security-openid-jar"><a href="#OpenID-spring-security-openid-jar" class="headerlink" title="OpenID - spring-security-openid.jar"></a>OpenID - spring-security-openid.jar</h3><p>支持 OpenID web 身份验证，用于根据外部 OpenID服务器对用户进行身份验证。</p><h3 id="ACL-spring-security-acl-jar"><a href="#ACL-spring-security-acl-jar" class="headerlink" title="ACL - spring-security-acl.jar"></a>ACL - spring-security-acl.jar</h3><p>专用域对象 ACL 的实现。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Spring Security》读书笔记 - 目录</title>
      <link href="/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/0.%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/07/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8ASpringSecurity%E3%80%8B/0.%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="《Spring-Security》-读书笔记-目录"><a href="#《Spring-Security》-读书笔记-目录" class="headerlink" title="《Spring Security》 读书笔记 - 目录"></a>《Spring Security》 读书笔记 - 目录</h1><blockquote><p>笔记的版本为 <code>Spring Security-4.0 与 Spring Framework 5.0.5.RELEASE</code>。这个笔记只是把 Spring Security 的 Docs 简化并抄了一遍(算是 google 翻译加官方文档的省略版，哈哈)，也可以自己去看，<a href="https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle" target="_blank" rel="noopener">传送门</a>。</p><p><img src="https://i.loli.net/2019/08/14/cVApH8vRr4Mheu9.png" alt="Spring Security"></p></blockquote><blockquote><a id="more"></a><p>SpringSecurity 是一个强大的、高度可定制的身份验证和访问控制框架，它是确保基于 Spring 的应用程序安全的事实标准。<br>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="第一部分-基本介绍"><a href="#第一部分-基本介绍" class="headerlink" title="第一部分 基本介绍"></a>第一部分 基本介绍</h3><ol><li><a href="../../../../../07/18/读书笔记/《SpringSecurity》/1.序言/">前言</a><ol><li>介绍什么是SpringSecurity</li><li>Spring Security 的几种认证方式</li><li>Spring Security 的包目录结构</li></ol></li><li><a href="../../../../../07/18/读书笔记/《SpringSecurity》/2.配置/">Spring Security 配置</a><ol><li>开启HttpSecurity配置</li><li>处理登录请求</li><li>授权请求，验证url</li><li>处理登出请求</li><li>JDBC、Memory认证</li><li>多重HttpSecurity配置</li></ol></li><li><a href="../../../../../07/18/读书笔记/《SpringSecurity》/3.方法级别的安全配置/">方法级别的安全配置</a><ol><li>开启方法安全配置</li><li>两种方法级别的注释</li></ol></li><li><a href="../../../../../07/18/读书笔记/《SpringSecurity》/4.示例/">示例</a></li></ol><h3 id="第二部分-体系结构和实现"><a href="#第二部分-体系结构和实现" class="headerlink" title="第二部分 体系结构和实现"></a>第二部分 体系结构和实现</h3><ol start="5"><li><a href="../../../../../07/18/读书笔记/《SpringSecurity》/5.体系结构/">SpringSecurity 的核心组件</a><ol><li>SecurityContextHolder - Security上下文</li><li>SecurityContext - 从上下文中获取当前用户主体</li><li>Authentication - 当前用户主体信息</li><li>GrantedAuthority - 用户权限</li><li>UserDetails - 用户主体的具体实现</li><li>UserDetailsService - 加载当前用户主体的实现</li></ol></li><li><a href="../../../../../07/18/读书笔记/《SpringSecurity》/6.身份认证流程/">SpringSecurity 身份认证流程</a><ol><li>模拟一个标准的身份认证环境</li><li>web 程序中的身份认证流程</li><li>认证流程中的核心对象</li><li>安全拦截器与安全对象模型</li><li>Security 与 AOP 的 around 通知</li></ol></li><li><a href="../../../../../07/19/读书笔记/《SpringSecurity》/6.身份认证流程/">第七章 Spring Security 中的核心服务</a><ol><li>UsernamePasswordAuthenticationFilter - 用户名密码登录过滤器(责任链模式)</li><li>ProviderManager - 认证管理类(迭代器模式)</li><li>DaoAuthenticationProvider - 数据认证</li><li>UserDetailsService - 获取具体用户实体</li><li>PasswordEncoder - 用户密码加密</li><li>UserDetails - 用户对象</li></ol></li></ol><h3 id="第三部分-测试支持"><a href="#第三部分-测试支持" class="headerlink" title="第三部分 测试支持"></a>第三部分 测试支持</h3><ol start="8"><li><a href="../../../../../07/19/读书笔记/《SpringSecurity》/8.单元测试/">Spring Security 的单元测试支持</a><ol><li>@WithMockUser - 使用Mock的对象</li><li>@WithAnonymousUser - 使用匿名Mock对象</li><li>@WithUserDetails - 使用DB中的对象，需要数据库连接</li></ol></li><li><a href="../../../../../07/19/读书笔记/《SpringSecurity》/9.自定义注解/">自定义测试注解</a><ol><li>模仿@WithMockUser - 使用自定义的对象</li><li>重写 WithSecurityContextFactory - 生成自定义的对象，并注入 SecurityContextHolder</li></ol></li><li>Spring Security 对 WebFlux 测试的支持<ol><li>TODO：没用过 WebFlux，等我学到了再回来补充，flag先立起来</li></ol></li></ol><h3 id="第四部分-Web应用安全原理"><a href="#第四部分-Web应用安全原理" class="headerlink" title="第四部分 Web应用安全原理"></a>第四部分 Web应用安全原理</h3><ol start="11"><li><p><a href="../../../../../07/22/读书笔记/《SpringSecurity》/10.过滤器链/">安全过滤器链</a></p><ol><li><p>Filter Ordering - 过滤链顺序如下</p><ol><li>ChannelProcessingFilter - 确保web请求会被channel通过</li><li>SecurityContextPersistenceFilter - 加载SecurityContext</li><li>ConcurrentSessionFilter - 监听session是否改变</li><li>AbstractPreAuthenticationProcessingFilter - 抽象身份验证处理过滤器<ol><li>UsernamePasswordAuthenticationFilter - 用户名密码验证</li><li>CasAuthenticationFilter - Cas验证</li><li>BasicAuthenticationFilter - Basic验证，请求头认证的一种</li><li>……</li></ol></li><li>SecurityContextHolderAwareRequestFilter - ServletAPI与Security之间的包装类</li><li>JaasApiIntegrationFilter</li><li>RememberMeAuthenticationFilter - 以cookie方式进行身份验证</li><li>AnonymousAuthenticationFilter - 匿名身份验证</li><li>ExceptionTranslationFilter - 异常处理</li><li>FilterSecurityInterceptor - HTTP资源的安全处理</li></ol></li></ol></li><li><a href="../../../../../07/22/读书笔记/《SpringSecurity》/11.核心安全过滤器/">核心过滤器</a><ol><li>FilterSecurityInterceptor</li><li>ExceptionTransactionFilter</li><li>SecurityContextPersistenceFilter</li><li>UsernamePasswordAuthenticationFilter</li></ol></li><li><a href="../../../../../07/22/读书笔记/《SpringSecurity》/12.ServletAPI/">Spring Security 与 Servlet API 的集成</a><ol><li>getRemoteUser() - 登录用户名</li><li>getUserPrincipal() - 登录用户</li><li>isUserInRole(String) - 是否存在权限(去掉ROLE前缀)</li><li>authenticate(HttpServletRequest,HttpServletResponse) - 是否通过了验证</li><li>login(String,String) - 登录</li><li>logout() - 登出</li><li>changeSessionId() - 改变session id</li></ol></li><li><a href="../../../../../07/22/读书笔记/《SpringSecurity》/13.BasicAuth/">Basic Authentication</a></li><li><a href="../../../../../07/23/读书笔记/《SpringSecurity》/14.RememberMeAuth/">Remember-Me Authentication</a> - “记住我”功能的实现<ol><li>Simple Hash-Based Token Approach - 简单hash令牌，不建议使用</li><li>Persistent Token Approach - 持久令牌，使用 datasource 存储</li></ol></li><li>CSRF</li><li><a href="../../../../../07/23/读书笔记/《SpringSecurity》/15.CORS/">CORS</a> - HTTP 请求控制</li><li><a href="../../../../../07/23/读书笔记/《SpringSecurity》/16.ResponseHeader/">HTTP Response Headers</a></li><li><a href="../../../../../07/23/读书笔记/《SpringSecurity》/17.SessionManagement/">Session Management</a> - 会话管理<ol><li>SessionManagementFilter - session与security-context的管理</li><li>SessionAuthenticationStrategy - session相关的认证策略</li><li>固化攻击、会话超时、会话数量限制</li></ol></li><li><a href="../../../../../07/23/读书笔记/《SpringSecurity》/18.AnonymousAuth/">Anonymous Authentication</a> - 匿名身份认证</li><li><a href="../../../../../07/24/读书笔记/《SpringSecurity》/19.WebSocket/">WebSocket Security</a></li></ol><h3 id="第五部分-授权体系原理"><a href="#第五部分-授权体系原理" class="headerlink" title="第五部分 授权体系原理"></a>第五部分 授权体系原理</h3><ol start="22"><li><a href="../../../../../07/24/读书笔记/《SpringSecurity》/20.AuthorizationArchitecture/">Authorization Architecture</a> - 授权体系结构</li><li><a href="../../../../../07/24/读书笔记/《SpringSecurity》/21.SecurityAOP/">Secure Object Implementations</a> - 安全对象实现<ol><li>使用 AOP 进行安全对象的保护</li></ol></li><li><a href="../../../../../07/24/读书笔记/《SpringSecurity》/22.ExpressionControl/">Expression-Based Access Control</a> - 基于表达式的访问控制<ol><li>PreAuthority(“hasRole(‘USER’)”)</li><li>PreAuthority(“hasPermission(#contact, ‘ADMIN’)”)</li></ol></li></ol><h3 id="第六部分-单点登录-CAS与OAuth2"><a href="#第六部分-单点登录-CAS与OAuth2" class="headerlink" title="第六部分 单点登录 CAS与OAuth2"></a>第六部分 单点登录 CAS与OAuth2</h3><ol start="5"><li>LDAP</li><li>OAuth2.0</li><li>JSP</li><li>JAAS</li><li>CAS</li></ol><h3 id="第七部分-Spring-Data-集成"><a href="#第七部分-Spring-Data-集成" class="headerlink" title="第七部分 Spring Data 集成"></a>第七部分 Spring Data 集成</h3><ol start="5"><li>Dependencies</li></ol><p>笔记来源于 <a href="https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle" target="_blank" rel="noopener">https://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第十五章 命令模式 - 请求发送者和接收者解耦</title>
      <link href="/2019/07/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/17.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/17.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十五章-命令模式-请求发送者和接收者解耦"><a href="#第十五章-命令模式-请求发送者和接收者解耦" class="headerlink" title="第十五章 命令模式 - 请求发送者和接收者解耦"></a>第十五章 命令模式 - 请求发送者和接收者解耦</h1><h2 id="一、命令模式"><a href="#一、命令模式" class="headerlink" title="一、命令模式"></a>一、命令模式</h2><p>命令模式（Command Pattern）：将一个请求封装为一个对象，从而让我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。</p><p>命令模式是一种对象行为型模式，又称为动作模式或事务模式。</p><p>命令模式中包含的几个角色：</p><ol><li>Command - 抽象命令类<ol><li>声明了用于执行请求的 execute() 等方法，通过这些方法可以调用请求接收者的相关操作</li></ol></li><li>ConcreteCommand - 具体命令类<ol><li>实现抽象命令类中声明的方法</li><li>对应具体的接收者对象，将接收者对象的动作绑定其中</li><li>在实现execute() 方法时，调用接收者对象的相关操作</li></ol></li><li>Invoker - 调用者<ol><li>请求的发送者，通过命令对象来执行请求</li><li>调用者并不需要在设计时确定其接收者，因此它只与抽象命令类保持关联</li><li>在程序运行时，注入一个具体命令对象，再调用具体命令对象的execute() 方法</li><li>从而间接调用请求接收者的相关操作</li></ol></li><li>Receiver - 接收者<ol><li>接收者执行与请求相关的操作，它具体实现对请求的业务处理</li></ol></li></ol><p>命令模式的本质是对请求进行封装，一个请求对应一个命令，将发出命令的责任和执行命令的责任分隔开。</p><h2 id="二、命令模式的关键-抽象命令类"><a href="#二、命令模式的关键-抽象命令类" class="headerlink" title="二、命令模式的关键 - 抽象命令类"></a>二、命令模式的关键 - 抽象命令类</h2><p>请求发送者只需要针对抽象命令类编程即可。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抽象命令类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明公共的执行方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 请求发送者 - 调用者</span><span class="token keyword">class</span> <span class="token class-name">Invoker</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 请求发送者只需要针对 Command 编程即可，具体命令类在运行时指定</span>    <span class="token keyword">private</span> Command command<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过构造函数或者setter方法注入Command</span>    <span class="token keyword">public</span> <span class="token function">Invoker</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 用于调用命令类的 execute 方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 具体命令类</span><span class="token keyword">class</span> <span class="token class-name">ConcreteCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 维持一个对请求接收者对象的引用</span>    <span class="token keyword">private</span> Receiver receiver<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果需要多个接收者，可以将该对象改为List等集合对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用请求接收者的业务处理方法</span>        receiver<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、完整实现"><a href="#三、完整实现" class="headerlink" title="三、完整实现"></a>三、完整实现</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 功能键设计窗口类</span><span class="token keyword">class</span> <span class="token class-name">FBSettingWindow</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 窗口标题</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// List集合，存储所有的功能按键</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>FunctionButton<span class="token operator">></span> functionButtons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFunctionButton</span><span class="token punctuation">(</span>FunctionButton fb<span class="token punctuation">)</span><span class="token punctuation">{</span>        functionButtons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeFunctionButton</span><span class="token punctuation">(</span>FunctionButton fb<span class="token punctuation">)</span><span class="token punctuation">{</span>        functionButtons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 显示窗口及功能</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示窗口："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示功能键"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FunctionButton functionButton <span class="token operator">:</span> functionButtons<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>functionButton<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 功能按键 - 请求发送者</span><span class="token keyword">class</span> <span class="token class-name">FunctionButton</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 按键名称</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 维持一个抽象命令的引用</span>    <span class="token keyword">private</span> Command command<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Command <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"点击按键："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象命令类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 帮助命令类 - 具体命令类</span><span class="token keyword">class</span> <span class="token class-name">HelpCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> HelpHandler helpHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HelpCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        helpHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelpHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        helpHandler<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 最小化命令类 - 具体命令类</span><span class="token keyword">class</span> <span class="token class-name">MinimizeCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> MinimizeHandler handler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MinimizeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinimizeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 帮助处理类 - 请求接收者</span><span class="token keyword">class</span> <span class="token class-name">HelpHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示文档"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 最小化处理类 - 请求接收者</span><span class="token keyword">class</span> <span class="token class-name">MinimizeHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小化！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> FBSettingWindow window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FBSettingWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"功能键设置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> FunctionButton button1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"按钮1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> FunctionButton button2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"按钮2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> HelpCommand helpCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelpCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> MinimizeCommand minimizeCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinimizeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button1<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>helpCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        button2<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>minimizeCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">addFunctionButton</span><span class="token punctuation">(</span>button1<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">addFunctionButton</span><span class="token punctuation">(</span>button2<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button1<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        button2<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>如果需要增加一个新的命令，只需要增加一个具体命令类，将命令类与具体的处理类进行关联，并注入到某个功能键即可。原有代码无需修改，符合“开闭原则”。</p></blockquote><h2 id="四、命令队列"><a href="#四、命令队列" class="headerlink" title="四、命令队列"></a>四、命令队列</h2><p>当我们点击一个按钮后，需要执行多次命令操作，且命令是可重用的。此时我们可以使用“命令队列”的方式来设计，此时，请求发送者不再维护单独的一个Command，而是一个CommandQueue，存储多个命令对象:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FunctionButton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> CommandQueue commandQueue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CommandQueue</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Command<span class="token operator">></span> commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span><span class="token punctuation">{</span>        commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span><span class="token punctuation">{</span>        commands<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Command cd<span class="token operator">:</span>commands<span class="token punctuation">)</span><span class="token punctuation">{</span>            cd<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>命令队列类似于“批处理”的概念，可以对一组对象（命令）进行批量操作。如果请求接收者没有严格的先后次序，还可以通过多线程技术来并发调用对象的execute方法，从而提高程序执行效率。</p><h2 id="五、撤销操作的实现"><a href="#五、撤销操作的实现" class="headerlink" title="五、撤销操作的实现"></a>五、撤销操作的实现</h2><p>在命令模式中，可以通过调用命令对象的 execute() 方法来实现对请求的处理，如果需要撤销操作，可以在命令类中增加一个逆向操作来实现。</p><p>也可以通过保存对象的历史状态来实现撤销，如“备忘录模式”。</p><p>我们可以在具体的Handler 中，保存上次执行时的状态，并提供一个方法以便恢复至保存的状态。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">AdderHandler</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        number <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AdderCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AdderHandler handler<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> history<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AdderCommand</span><span class="token punctuation">(</span>AdderHandler handler<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        history <span class="token operator">=</span> value<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"加法结果为："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用保存的状态实现撤销操作</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span>history<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"撤销后的结果为："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注，该撤销操作只能执行一次，如果需要执行多次，可以使用集合来保存 <code>histroy</code></p></blockquote><h2 id="六、宏命令"><a href="#六、宏命令" class="headerlink" title="六、宏命令"></a>六、宏命令</h2><p>宏命令（Macro Command）又称为组合命令，是组合模式和命令联合的产物。</p><p>宏命令是一个具体的命令类，拥有一个集合属性，在该集合中包含了对其他命令对象的引用。通常宏命令不直接与请求接收者交互，而是通过它的成员来调用接收者的方法。</p><p>当调用宏命令的 execute 方法时，会递归调用它的每个成员命令的 execute 方法，成员既可以是一个简单命令，也可以是宏命令。</p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>命令模式是一种 <code>使用频率非常高</code> 的设计模式，可以将请求发送者和接收者解耦。发送者通过命令对象间接引用请求接收者，使得系统具有更好的灵活性和可扩展性。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>降低系统耦合，请求发送者与接收者不直接引用，相互独立</li><li>方便扩展，增加新的命令不会影响其他类，无需修改系统代码，符合“开闭原则”</li><li>可以比较简单的设计一个命令队列或组合命令（宏命令）</li><li>为请求的撤销、恢复操作提供了一种设计和实现方案</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>可能会导致系统中存在过多的命令类，因为每个接收者都需要设计一个具体命令类来调用</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>系统需要请求发送者与接收者解耦，彼此互不影响，互不相知</li><li>系统需要使用一组命令或者宏命令</li><li>系统需要支持撤销、恢复操作</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求</li></ol><h2 id="八、练习"><a href="#八、练习" class="headerlink" title="八、练习"></a>八、练习</h2><pre class=" language-tex"><code class="language-tex"> 命令模式 Sunny软件公司欲开发一个基于Windows平台的公告板系统。 该系统提供了一个主菜单(Menu)， 在主菜单中包含了一些菜单项(MenuItem)， 可以通过Menu类的addMenuItem()方法增加菜单项。 菜单项的主要方法是click()， 每一个菜单项包含一个抽象命令类， 具体命令类包括OpenCommand(打开命令)，CreateCommand(新建命令)，EditCommand(编辑命令)等， 命令类具有一个execute()方法， 用于调用公告板系统界面类(BoardScreen)的open()、create()、edit()等方法。 试使用命令模式设计该系统， 以便降低MenuItem类与BoardScreen类之间的耦合度</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 命令模式 * Sunny软件公司欲开发一个基于Windows平台的公告板系统。 * 该系统提供了一个主菜单(Menu)， * 在主菜单中包含了一些菜单项(MenuItem)， * 可以通过Menu类的addMenuItem()方法增加菜单项。 * 菜单项的主要方法是click()， * 每一个菜单项包含一个抽象命令类， * 具体命令类包括OpenCommand(打开命令)，CreateCommand(新建命令)，EditCommand(编辑命令)等， * 命令类具有一个execute()方法， * 用于调用公告板系统界面类(BoardScreen)的open()、create()、edit()等方法。 * 试使用命令模式设计该系统， * 以便降低MenuItem类与BoardScreen类之间的耦合度 */</span><span class="token comment" spellcheck="true">// 主菜单 - 类似于之前的窗口界面，包含多个按钮（菜单项）</span><span class="token keyword">class</span> <span class="token class-name">Menu</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>MenuItem<span class="token operator">></span> menuItems <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span>MenuItem item<span class="token punctuation">)</span><span class="token punctuation">{</span>        menuItems<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------显示菜单:-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MenuItem menuItem <span class="token operator">:</span> menuItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>menuItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 菜单项 - 请求发送者</span><span class="token keyword">class</span> <span class="token class-name">MenuItem</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Command command<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MenuItem</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象命令类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 宏命令 - 一组命令的集合，宏命令一般不直接操作接收者，而是通过集合中的对象属性来操作</span><span class="token keyword">class</span> <span class="token class-name">MacroCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Command<span class="token operator">></span> commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Command command <span class="token operator">:</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>            command<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Command command <span class="token operator">:</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>            command<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Command command <span class="token operator">:</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>            command<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体命令类</span><span class="token keyword">class</span> <span class="token class-name">BoardScreenCommand</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> BoardScreenHandler handler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BoardScreenCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoardScreenHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        handler<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 请求接收者，也就是具体的处理类</span><span class="token keyword">class</span> <span class="token class-name">BoardScreenHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开公告板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建公告板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改公告板"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Menu menu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> MenuItem menuItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">"公告板管理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> MenuItem menuItem1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MenuItem</span><span class="token punctuation">(</span><span class="token string">"高噶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Command command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoardScreenCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> MacroCommand command1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MacroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        command1<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        command1<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItem<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItem1<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span>command1<span class="token punctuation">)</span><span class="token punctuation">;</span>        menu<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>menuItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        menu<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>menuItem1<span class="token punctuation">)</span><span class="token punctuation">;</span>        menu<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItem<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItem<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----宏命令执行------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItem1<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItem1<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuItem1<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第十四章 责任链模式</title>
      <link href="/2019/07/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/16.%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/16.%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/07/15/5d2c3670b923754379.png" alt="责任链模式"></p><a id="more"></a><h1 id="第十四章-责任链模式"><a href="#第十四章-责任链模式" class="headerlink" title="第十四章 责任链模式"></a>第十四章 责任链模式</h1><h2 id="一、设计一款请假程序"><a href="#一、设计一款请假程序" class="headerlink" title="一、设计一款请假程序"></a>一、设计一款请假程序</h2><p>Sunny 软件公司的 OA 系统需要提供一个假条审批模块：</p><p>如果员工请假天数小于3天，主任可以审批；大于等于3天，小于10天，经理可以审批；大于等于10天，总经理审批；超过30天，拒绝。</p><h3 id="1-1-初步设计"><a href="#1-1-初步设计" class="headerlink" title="1.1 初步设计"></a>1.1 初步设计</h3><p>在没学责任链模式之前的设计可能如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ChainOfResponsibilityPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequset</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>days <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">director</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>days <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">manager</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>days <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">gManager</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"error handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">director</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 主任处理。。。</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// .......</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-存在的问题"><a href="#1-2-存在的问题" class="headerlink" title="1.2 存在的问题"></a>1.2 存在的问题</h3><ol><li>ChainOfResponsibilityPattern 类十分的庞大，所有的审批方法都集中在一个类中，违反了“单一职责原则”，测试和维护难度大</li><li>如果需要增加一个新的审批登记，或者调整任意一级的审批权限，都需要修改源代码。违反了“开闭原则”</li><li>审批流程的设置缺乏灵活性，当设计完 主任》经理》总经理》异常 的流程后，再想修改，必须直接修改源代码，客户端无法定制流程</li></ol><h3 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h3><p>使用责任链模式来重构。</p><h2 id="二、责任链模式"><a href="#二、责任链模式" class="headerlink" title="二、责任链模式"></a>二、责任链模式</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>责任链模式 - Chain Of Responsibility Pattern：避免请求发送者和接收者耦合在一起，让多个对象都有可能接受请求，将这些请求连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><p>责任链模式是一种对象行为型模式。</p><p><img src="https://i.loli.net/2019/07/15/5d2c3670b923754379.png" alt="责任链模式"></p><h3 id="2-2-责任链模式中的几个角色"><a href="#2-2-责任链模式中的几个角色" class="headerlink" title="2.2 责任链模式中的几个角色"></a>2.2 责任链模式中的几个角色</h3><ol><li>Handler - 抽象处理者<ol><li>定义了处理请求的抽象接口</li><li>定义一个抽象处理者类型的对象引用，作为对下家的引用</li><li>通过该引用，处理者可以形成一条链式调用</li></ol></li><li>ConcreteHandler - 具体处理者<ol><li>具体处理者有两大作用</li><li>第一，处理请求，不同的处理者以不同形式实现抽象处理方法</li><li>第二，转发请求，如果请求不再当前处理者的权限内，可以将请求转发给下家</li></ol></li></ol><h3 id="2-3-责任链模式的核心-抽象处理者类"><a href="#2-3-责任链模式的核心-抽象处理者类" class="headerlink" title="2.3 责任链模式的核心 - 抽象处理者类"></a>2.3 责任链模式的核心 - 抽象处理者类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Handler successor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccessor</span><span class="token punctuation">(</span>Handler successor<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-具体处理者"><a href="#2-4-具体处理者" class="headerlink" title="2.4 具体处理者"></a>2.4 具体处理者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ConcreteHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String request<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>request满足条件<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 处理请求</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转发请求</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、完整实现"><a href="#三、完整实现" class="headerlink" title="三、完整实现"></a>三、完整实现</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 职责链模式 * Sunny 软件公司的 OA 系统需要提供一个假条审批模块： * 如果员工请假天数小于3天，主任可以审批 * 大于等于3天，小于10天，经理可以审批 * 大于等于10天，总经理审批；超过30天，拒绝 */</span><span class="token comment" spellcheck="true">// 抽象处理者 - 经理、主任等具体处理者的抽象父类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Handler successor<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指向下一个具体实现类的引用，通过该引用，处理者可以连成一条线</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccessor</span><span class="token punctuation">(</span>Handler successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 抽象处理方法，交给具体实现类实现</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主任 - 具体处理者</span><span class="token keyword">class</span> <span class="token class-name">DirectorHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果在处理范围内，则进行处理，否则继续向下转发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>days <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色[主任]，处理了员工请假请求，请假天数为["</span> <span class="token operator">+</span> days <span class="token operator">+</span> <span class="token string">"]天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 经理 - 具体处理者</span><span class="token keyword">class</span> <span class="token class-name">ManagerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>days <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色[经理]，处理了员工请假请求，请假天数为["</span> <span class="token operator">+</span> days <span class="token operator">+</span> <span class="token string">"]天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 总经理 - 具体处理者</span><span class="token keyword">class</span> <span class="token class-name">GManagerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>days <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"角色[总经理]，处理了员工请假请求，请假天数为["</span> <span class="token operator">+</span> days <span class="token operator">+</span> <span class="token string">"]天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">super</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误 - 具体处理者</span><span class="token keyword">class</span> <span class="token class-name">ErrorHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>Integer days<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请假失败，当前请假天数["</span> <span class="token operator">+</span> days <span class="token operator">+</span> <span class="token string">"]超过最大限制！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainOfResponsibilityPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Handler director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Handler manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ManagerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Handler gManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GManagerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Handler error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>manager<span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>gManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        gManager<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、纯与不纯的责任链模式"><a href="#四、纯与不纯的责任链模式" class="headerlink" title="四、纯与不纯的责任链模式"></a>四、纯与不纯的责任链模式</h2><h3 id="4-1-纯的责任链模式"><a href="#4-1-纯的责任链模式" class="headerlink" title="4.1 纯的责任链模式"></a>4.1 纯的责任链模式</h3><p>纯责任链模式，要求一个具体处理者对象只能在两个行为中选择一个，要么承担全部责任，要么将责任推给下家。</p><h3 id="4-2-不纯的责任链模式"><a href="#4-2-不纯的责任链模式" class="headerlink" title="4.2 不纯的责任链模式"></a>4.2 不纯的责任链模式</h3><p>不纯的责任链模式，允许某个请求被一个具体处理者部分处理后向下传递，或者该请求能够被多个处理器处理。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>责任链模式使一个对象无须知道是哪个对象处理其请求，只需要知道该请求会被处理即可。接收者与发送者互不相知，且链中对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度</li><li>请求处理对象仅需维持一个向后继者的引用，不需要维持所有后继者的引用，简化对象的相互连接</li><li>在给对象分派职责时，责任链可以给我们更多的灵活性，可通过在运行时对该链动态增加或修改一个请求的职责</li><li>新增请求无需修改原有代码，只需重新建链即可，符合“开闭原则”</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>不能保证请求必定会被执行，该请求可能到链的末尾也没有匹配到合适的处理者；或者责任链的配置有误，也可能导致请求未被处理</li><li>如果责任链较长，请求的处理会涉及多个对象，系统性能会受到一定影响，且在调试时不太方便</li><li>如果链表建立有误，可能会陷入循环调用</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到连上，无须关心请求的处理对象是谁，以及如何处理的</li><li>在不明确指定接收者的情况下，向多个对象中的一个，提交一个请求</li><li>动态指定一组对象处理请求，可以动态创建责任链，动态改变链中处理者的先后次序等</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第十三章 代理模式</title>
      <link href="/2019/07/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/15.%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/15.%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十三章-代理模式"><a href="#第十三章-代理模式" class="headerlink" title="第十三章 代理模式"></a>第十三章 代理模式</h1><p>代理模式是常用的 <code>对象结构型设计模式</code> 之一，当无法直接访问某个对象时，可以通过一个代理对象来间接访问。</p><p>为了保证客户端使用的透明性，所访问的真实对象与代理对象需要实现相同的接口。</p><p>代理模式根据使用目的，又可以分为：保护代理、远程代理、虚拟代理、缓冲代理等。</p><h2 id="一、代理模式概述"><a href="#一、代理模式概述" class="headerlink" title="一、代理模式概述"></a>一、代理模式概述</h2><p>日常生活中，我们通过网站购买商品，商品对应的就是“真实主题角色”，而商品网站则是“代理主题角色”。</p><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>代理模式：给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问。</p><p>代理模式通过引入一个新的代理对象，在客户端对象和目标对象之间起到中介的作用，去掉客户不能看到的内容和服务，或者增添客户需要的额外的新服务。</p><h3 id="1-2-代理模式的结构"><a href="#1-2-代理模式的结构" class="headerlink" title="1.2 代理模式的结构"></a>1.2 代理模式的结构</h3><p><img src="https://i.loli.net/2019/07/15/5d2bf3248bdec12565.png" alt="代理模式结构"></p><p>代理模式的重点在于，1. 客户端针对 抽象角色 编程 2. 抽象对象实例化代理对象 3. 通过代理对象维护的真实角色对象，来调用真实业务，并通过代理对象实现的方法，来扩展真实业务员</p><h3 id="1-3-代理模式中的几个角色"><a href="#1-3-代理模式中的几个角色" class="headerlink" title="1.3 代理模式中的几个角色"></a>1.3 代理模式中的几个角色</h3><ol><li>Subject - 抽象主题角色<ol><li>声明了真实主题和代理主题的共同接口</li><li>客户端通常只需要针对抽象主题角色进行编程</li></ol></li><li>Proxy - 代理主题角色<ol><li>包含对真实主题的应用，可以在任何时候操作真实主题</li><li>代理主题角色提供与真实主题角色相同的接口，以便在任何时候替代真实主题</li><li>代理主题角色还能控制对真实主题的使用，负责在需要时创建、删除真实主题对象，对真实主题对象的使用加以约束</li></ol></li><li>RealSubject - 真实主题角色<ol><li>定义了真实的业务操作</li><li>客户端可以通过代理角色，间接调用真实角色的操作</li></ol></li></ol><h3 id="1-4-代理模式的核心-代理主题角色-Proxy"><a href="#1-4-代理模式的核心-代理主题角色-Proxy" class="headerlink" title="1.4 代理模式的核心 - 代理主题角色 Proxy"></a>1.4 代理模式的核心 - 代理主题角色 Proxy</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 维护一个对真实主题对象的引用</span>    <span class="token keyword">private</span> RealSubject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实现Subject声明的抽象方法，调用真实主题角色的操作，并进行扩展     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">preRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、几种常用的代理模式"><a href="#二、几种常用的代理模式" class="headerlink" title="二、几种常用的代理模式"></a>二、几种常用的代理模式</h2><ol><li>远程代理 - Remote Proxy<ol><li>为一个位于不同的地址空间的对象提供一个本地的代理对象</li><li>远程代理又称为 大使 - Ambassador</li><li>客户端无须关心实现具体业务的是谁，只需要按照服务接口定义的方式直接与本地主机中的代理对象交互即可</li><li>DCOM、Web Service 都应用了远程代理模式</li></ol></li><li>虚拟代理 - Virtual Proxy<ol><li>如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建<ol><li>通常可以结合多线程技术，一个线程用于显示代理对象，其他线程用于加载真实对象</li></ol></li></ol></li><li>保护代理 - Protect Proxy<ol><li>控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限</li></ol></li><li>缓冲代理 - Cache Proxy<ol><li>为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果</li></ol></li><li>智能引用代理 - Smart Reference Proxy<ol><li>当一个对象被引用时，提供一些额外的操作，例如记录被调用的次数等</li></ol></li></ol><h2 id="三、完整实现"><a href="#三、完整实现" class="headerlink" title="三、完整实现"></a>三、完整实现</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 代理模式 */</span><span class="token comment" spellcheck="true">// 数据库验证类 - 业务类</span><span class="token keyword">class</span> <span class="token class-name">AccessValidator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Boolean <span class="token function">validate</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在数据库中验证用户:"</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">"，是否是合法用户？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>userId<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"验证通过！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"验证失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 日志记录类 - 业务类</span><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"记录用户 "</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">" 登录日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象查询类 - 抽象主题角色</span><span class="token keyword">interface</span> <span class="token class-name">Searcher</span> <span class="token punctuation">{</span>    String <span class="token function">doSearch</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String keyword<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体查询类 - 真实主题角色</span><span class="token keyword">class</span> <span class="token class-name">RealSearcher</span> <span class="token keyword">implements</span> <span class="token class-name">Searcher</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSearch</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户 "</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">" 使用关键词 "</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">" 进行查询"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"查询到的具体内容"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 代理查询类 - 代理主题角色，维持对业务类、真实主题角色对象的引用</span><span class="token keyword">class</span> <span class="token class-name">ProxySearcher</span> <span class="token keyword">implements</span> <span class="token class-name">Searcher</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 维持一个对真实主题的引用</span>    <span class="token keyword">private</span> RealSearcher searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSearcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 业务类</span>    <span class="token keyword">private</span> AccessValidator validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccessValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSearch</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span> String keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果身份验证成功，则继续执行</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用真实主题对象的查询方法</span>            <span class="token keyword">final</span> String result <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doSearch</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 记录查询日志</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">logger</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 返回查询结果</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validate</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logger</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ProxySearcher searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySearcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String search <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doSearch</span><span class="token punctuation">(</span><span class="token string">"aa张三"</span><span class="token punctuation">,</span> <span class="token string">"男士内衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询结果："</span><span class="token operator">+</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>执行结果如下：</p><p><img src="https://i.loli.net/2019/07/12/5d284f8188eaa42868.png" alt="执行结果"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>代理模式各类型的共同优点：</p><ol><li>能够协调调用者和被调用者，一定程序上降低了系统耦合</li><li>客户端可以针对 抽象主题角色 进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有良好的灵活性和可扩展性</li></ol><p>不同代理模式的特点：</p><ol><li>远程代理，为两个不同地址空间对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作 移至性能更好的计算机上，提高系统的整体运行效率</li><li>虚拟代理通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销</li><li>缓冲代理，为某一个操作 的结果提供临时的缓存存储空间，以便在后续使用中能够共享这些结果，优化系统性能，缩短执行时间</li><li>保护代理，可以控制一个对象的访问权限，为不同用户提供不同级别的使用权限</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于增加了代理对象，可能会导致请求的处理速度变慢，如保护代理</li><li>实现代理模式需要额外的工作，实现过程可能变得十分复杂，如远程代理</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>当客户端对象需要访问远程主机中的对象时，可以使用远程代理</li><li>当需要用一个消耗资源较少的对象来代表一个消耗资源较多的对象时，可以使用虚拟代理<ol><li>从而降低系统开销、缩短运行时间</li></ol></li><li>为某一个需要频繁访问的操作结果提供一个临时存储空间，以供多个客户端共享访问时，可以使用缓冲代理</li><li>需要控制对象的访问权限时，可以使用保护代理</li><li>需要为一个对象的引用提供一些额外操作时，可以使用智能引用代理</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/12/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/07/12/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/5.%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 验证回文字符串 * 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 * &lt;p> * 说明：本题中，我们将空字符串定义为有效的回文串。 * &lt;p> * 示例 1: * &lt;p> * 输入: "A man, a plan, a canal: Panama" * 输出: true * 示例 2: * &lt;p> * 输入: "race a car" * 输出: false */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *  1. 比较两端的字符，如果存在不等，则直接返回false     *  2. 需要判断字符是否属于 字母或数字     *  3. 字母可以将其转换为小写之后比较     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">!=</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            start<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="LeetCode上执行时间最短的"><a href="#LeetCode上执行时间最短的" class="headerlink" title="LeetCode上执行时间最短的"></a>LeetCode上执行时间最短的</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>charMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            charMap<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// numeric</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            charMap<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> charMap<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//alphabetic, ignore cases</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>pChars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>end<span class="token operator">=</span>pChars<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> cS<span class="token punctuation">,</span>cE<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>            cS <span class="token operator">=</span> charMap<span class="token punctuation">[</span>pChars<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            cE <span class="token operator">=</span> charMap<span class="token punctuation">[</span>pChars<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cS<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cE<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cS<span class="token operator">!=</span>cE<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cS<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>start<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cE<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第十二章 享元模式</title>
      <link href="/2019/07/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/14.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/14.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十二章-享元模式"><a href="#第十二章-享元模式" class="headerlink" title="第十二章 享元模式"></a>第十二章 享元模式</h1><p>在Java开发或者面试过程中，经常会遇到一个面试题：</p><pre class=" language-java"><code class="language-java">String a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>问：a <span class="token operator">==</span> b <span class="token operator">?</span></code></pre><p>答案是肯定的，因为JVM在创建一个字符串后，会将其存储在 字符串池 中，下次new时会先去 字符串池 中查询是否已经存在。然后将引用地址返回。</p><p>这就是一个典型的 <code>享元模式</code> 案例。</p><h2 id="一、设计一个围棋软件"><a href="#一、设计一个围棋软件" class="headerlink" title="一、设计一个围棋软件"></a>一、设计一个围棋软件</h2><p>对于围棋软件而言，棋盘中包含大量的黑白色棋子，它们的形状、大小一致，但是出现的位置不同。如果将所有棋子都 new 一个对象存储在内存中，则该软件在运行时所需的内存空间会非常大。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>享元模式通过共享技术实现相同或相似对象的重用，在逻辑上每一个出现的字符都有一个对象与之对应，然而在物理上它们却共享同一个享元对象。</p><p>在享元模式中，存储这些共享实例对象的地方称为“享元池（Flyweight Pool）”</p><h2 id="二、享元模式"><a href="#二、享元模式" class="headerlink" title="二、享元模式"></a>二、享元模式</h2><p>享元模式以共享方式，高效地支持大量细粒度对象的重用，享元对象能做到共享的关键是区分了 内部状态（Intrinsic State）和外部状态（Extrinsic State）。</p><h3 id="内部状态"><a href="#内部状态" class="headerlink" title="内部状态"></a>内部状态</h3><p>内部状态是指存储在享元对象内部并且不会随环境变化而改变的状态，内部状态可以共享，但是不会被修改。</p><h3 id="外部状态"><a href="#外部状态" class="headerlink" title="外部状态"></a>外部状态</h3><p>外部状态是随环境变化而变化的、不可以共享的状态。</p><p>外部状态通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入享元对象内部。</p><h3 id="享元模式的定义"><a href="#享元模式的定义" class="headerlink" title="享元模式的定义"></a>享元模式的定义</h3><p>享元模式（Flyweight Pattern）：运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。</p><p>享元模式因其共享的是细粒度对象，因此又称为 <code>轻量级模式</code>，属于<code>对象结构型模式</code>。</p><h3 id="享元模式中的几个角色"><a href="#享元模式中的几个角色" class="headerlink" title="享元模式中的几个角色"></a>享元模式中的几个角色</h3><ol><li>Flyweight - 抽象享元类<ol><li>接口或者抽象类，声明了具体享元类的公共方法</li><li>这些方法可以向外界提供内部数据</li><li>也可以有外界来设计外部数据</li></ol></li><li>ConcreteFlyweight - 具体享元类<ol><li>实现了抽象享元类，实例被称为享元对象</li><li>具体享元类中为内部状态提供了存储空间</li><li>通常使用单例模式来设计具体享元类</li></ol></li><li>UnsharedConcreteFlyweight - 非共享具体享元类<ol><li>不能被共享的子类可以设计为 非共享具体享元类</li><li>在使用时可以直接通过实例化创建</li></ol></li><li>FlyweightFactory - 享元工厂类<ol><li>用于创建并管理享元对象，针对抽象享元类编程</li><li>存储享元池，一般设计为“键值对”的集合</li><li>可以结合工厂模式进行设计，返回唯一的实例</li></ol></li></ol><h2 id="三、享元模式的核心"><a href="#三、享元模式的核心" class="headerlink" title="三、享元模式的核心"></a>三、享元模式的核心</h2><h3 id="1-享元工厂类"><a href="#1-享元工厂类" class="headerlink" title="1. 享元工厂类"></a>1. 享元工厂类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义享元池</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Flyweight<span class="token operator">></span> flyweights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Flyweight <span class="token function">getFlyweight</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 对象存在，则直接从享元池中取</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flyweights<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> flyweights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 不存在，则创建一个享元对象，并放入享元池中返回</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            Flyweight fy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flyweights<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>fy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> fy<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-享元类"><a href="#2-享元类" class="headerlink" title="2. 享元类"></a>2. 享元类</h3><p>享元类将内部状态和外部状态分开处理，通常将内部状态作为享元类的成员变量，而外部状态通过注入的方式添加到享元模式中。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 内部状态，与享元对象的内部状态一致</span>    <span class="token keyword">private</span> String intrinsicState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Flyweight</span><span class="token punctuation">(</span>String intrinsicState<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>intrinsicState <span class="token operator">=</span> intrinsicState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 外部状态，在使用时由外部设置，不保存在享元对象中。</span>    <span class="token comment" spellcheck="true">// 即使是同一个享元对象，每次使用时也可以传入不同的外部状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>String extrinsicState<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、完整实现"><a href="#四、完整实现" class="headerlink" title="四、完整实现"></a>四、完整实现</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 享元模式 */</span><span class="token comment" spellcheck="true">// 围棋棋子类 - 抽象享元类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">IgoChessman</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象内部状态</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在方法调用时，注入外部状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>Integer x<span class="token punctuation">,</span> Integer y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"棋子颜色:"</span> <span class="token operator">+</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，当前棋子位置为："</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 黑色棋子类 - 具体享元类</span><span class="token keyword">class</span> <span class="token class-name">BlackIgoChessman</span> <span class="token keyword">extends</span> <span class="token class-name">IgoChessman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"黑色"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 白色棋子类 - 具体享元类</span><span class="token keyword">class</span> <span class="token class-name">WhiteIgoChessman</span> <span class="token keyword">extends</span> <span class="token class-name">IgoChessman</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"白色"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 围棋棋子工厂类 - 享元工厂类，使用单例模式进行设计</span><span class="token keyword">class</span> <span class="token class-name">IgoChessmanFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> IgoChessmanFactory instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IgoChessmanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Hashtable<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> IgoChessman<span class="token operator">></span> ht<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用 Hashtable 来存储享元对象，充当享元池</span>    <span class="token keyword">private</span> <span class="token function">IgoChessmanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ht <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IgoChessman black <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlackIgoChessman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IgoChessman white <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WhiteIgoChessman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> black<span class="token punctuation">)</span><span class="token punctuation">;</span>        ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回享元工厂类的唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IgoChessmanFactory <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过key来获取存储在 Hashtable 中的享元对象</span>    <span class="token keyword">public</span> IgoChessman <span class="token function">getIgoChessman</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ht<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取享元工厂对象</span>        IgoChessmanFactory factory <span class="token operator">=</span> IgoChessmanFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过享元工厂获取棋子</span>        IgoChessman black1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getIgoChessman</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IgoChessman black2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getIgoChessman</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IgoChessman black3 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getIgoChessman</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IgoChessman white1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getIgoChessman</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IgoChessman white2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getIgoChessman</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        black1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        black2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        black3<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        white1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        white2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="五、单纯享元模式与复合享元模式"><a href="#五、单纯享元模式与复合享元模式" class="headerlink" title="五、单纯享元模式与复合享元模式"></a>五、单纯享元模式与复合享元模式</h2><h3 id="5-1-单纯享元模式"><a href="#5-1-单纯享元模式" class="headerlink" title="5.1 单纯享元模式"></a>5.1 单纯享元模式</h3><p>单纯享元模式中，所有具体享元类都是可以共享的，不存在非共享具体享元类。</p><h3 id="5-2-复合享元模式"><a href="#5-2-复合享元模式" class="headerlink" title="5.2 复合享元模式"></a>5.2 复合享元模式</h3><p>将一些单纯享元对象使用组合模式进行组合，形成复合享元对象。复合享元对象本身不能共享，但是可以将组合后的享元对象分解为单纯享元对象，进行共享。</p><h2 id="六、补充"><a href="#六、补充" class="headerlink" title="六、补充"></a>六、补充</h2><p>享元模式与其他模式的联用：</p><ol><li>享元工厂类通常提供一个 <code>静态的工厂方法</code> 用于返回享元对象，使用 <code>简单工厂模式</code> 来生成享元对象</li><li>享元工厂通常是唯一的，可以使用 <code>单例模式</code> 进行设计</li><li>可以使用 <code>组合模式</code> 形成复合享元模式，统一对多个享元对象设置外部状态</li></ol><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>“节约内存，提高性能”</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>极大的减少内存中对象的数量，使得相同或相似对象在内存中只保存一份，从而节约系统资源，提高系统性能</li><li>享元模式的外部状态相对独立，且不影响其内部状态，从而使得享元对象可以在不同环境中被共享</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>享元模式需要分离 内部状态和外部状态，使程序的逻辑更复杂</li><li>为了使对象可以共享，享元模式需要将享元对象的部分状态外部化，而读取外部状态将使得运行时间变长</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>系统中有大量相同或相似的对象，造成大量的内存浪费</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中</li><li>享元模式在运行时需要维护一个享元池，势必会使内存一直占用，因此享元池中的享元对象需要多次重复使用时才值得</li></ol><h2 id="八、练习"><a href="#八、练习" class="headerlink" title="八、练习"></a>八、练习</h2><blockquote><p>Sunny软件公司欲开发一个多功能文档编辑器，在文本文档中可以插入图片、动画、视频等多媒体资料，为了节约系统资源，相同的图片、动画和视频在同一个文档中只需保存一份，但是可以多次重复出现，而且它们每次出现时位置和大小均可不同。试使用享元模式设计该文档编辑器。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抽象享元类 - 声明公共方法，向外界提供内部数据，由外界提供外部数据</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String location<span class="token punctuation">,</span> String size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入类型："</span> <span class="token operator">+</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"，位置："</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"，大小："</span> <span class="token operator">+</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体享元类 - 实现抽象方法，内部数据的状态与对象状态一致，内部状态不能被修改</span><span class="token keyword">class</span> <span class="token class-name">Picture</span> <span class="token keyword">extends</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"图片类型"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cartoon</span> <span class="token keyword">extends</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"动画类型"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Video</span> <span class="token keyword">extends</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"视频类型"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用单例模式，维持单一的工厂对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> FlyweightFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyweightFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Flyweight<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">FlyweightFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Flyweight picture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight cartoon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cartoon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight video <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Video</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"picture"</span><span class="token punctuation">,</span> picture<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cartoon"</span><span class="token punctuation">,</span> cartoon<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">,</span> video<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态工厂方法 - 返回工厂对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> FlyweightFactory <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Flyweight <span class="token function">getFlyweight</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"flyweight cann't support"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> FlyweightFactory factory <span class="token operator">=</span> FlyweightFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight picture1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"picture"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight picture2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"picture"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight cartoon1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"cartoon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight cartoon2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"cartoon"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Flyweight video <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"video"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        picture1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"/Pic 下"</span><span class="token punctuation">,</span><span class="token string">"273KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        picture2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"/Pic 下"</span><span class="token punctuation">,</span><span class="token string">"1.23MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cartoon1<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"/cartoon 下"</span><span class="token punctuation">,</span><span class="token string">"80MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cartoon2<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"/cartoon 下"</span><span class="token punctuation">,</span><span class="token string">"81MB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        video<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"/video 下"</span><span class="token punctuation">,</span><span class="token string">"1.3GB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><p><img src="https://i.loli.net/2019/07/12/5d28459ba725023617.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第十一章 外观模式</title>
      <link href="/2019/07/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/13.%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/13.%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十一章-外观模式"><a href="#第十一章-外观模式" class="headerlink" title="第十一章 外观模式"></a>第十一章 外观模式</h1><h2 id="一、外观模式"><a href="#一、外观模式" class="headerlink" title="一、外观模式"></a>一、外观模式</h2><p>在日常开发中，注册一个用户需要进行如下操作：验证手机验证码、生成用户类、存储至数据库、初始化用户积分等等操作。但是 客户端只需要调用一个 UserService.register() 即可，具体的其他对象的操作都交给 UserService 的实现来完成。</p><p>还有如 MVC 模式中，Controller 层中通过调用 service 来解耦 Controller 层与 Dao 层，隔离各个层次，实现层次化结构。</p><p>于 controller 而言，service 就是外观类，由service 来处理多个dao的交互。</p><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>外观模式，又称为门面模式，是一种使用频率非常高的结构型设计模式，通过引入一个外观对象来简化客户端与子系统之间的交互，为复杂的子系统调用提供一个统一的入口，降低子系统与客户端的耦合度，且客户端调用非常方便。</p><p>外观模式是迪米特法则的一种具体实现，通过引入一个新的外观角色可以降低原油系统的复杂度，同时降低客户类与子系统的耦合。</p><h3 id="1-2-外观模式"><a href="#1-2-外观模式" class="headerlink" title="1.2 外观模式"></a>1.2 外观模式</h3><p><img src="https://i.loli.net/2019/07/11/5d270855d1d7975835.png" alt="外观模式示意图"></p><p>在日常生活中，自己泡茶和去茶馆喝茶的区别类似于上图显示的这样。自己泡需要与 热水、差距、茶叶 进行交互（系统耦合度十分的高），而去茶馆喝茶只需要与服务员（Facade）进行交互即可。</p><h3 id="1-3-外观模式中的几个角色："><a href="#1-3-外观模式中的几个角色：" class="headerlink" title="1.3 外观模式中的几个角色："></a>1.3 外观模式中的几个角色：</h3><ol><li>Facade - 外观角色<ol><li>由客户端调用其中的方法，来访问相关子系统的功能</li><li>由外观角色将客户端的请求委派到具体子系统中</li></ol></li><li>SubSystem - 子系统角色<ol><li>系统中可以存在一个或多个子系统角色</li><li>每个可以被客户端调用，也可以被外观角色调用，用于处理请求</li><li>子系统并不知道外观的存在，与它而言，外观角色仅仅是另一个客户端</li></ol></li></ol><h2 id="二、完整实现"><a href="#二、完整实现" class="headerlink" title="二、完整实现"></a>二、完整实现</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 外观模式 */</span><span class="token keyword">class</span> <span class="token class-name">SubSystemA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家好，我是系统A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubSystemB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">byebye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再见，我是系统B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SubSystemC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i don't wanna see you anymore."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SubSystemA a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SubSystemB b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SubSystemC c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">byebye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FacadePattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过外观类 Facade 减少了客户端与各个子系统的直接交互，降低耦合度</span>        <span class="token keyword">final</span> Facade facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        facade<span class="token punctuation">.</span><span class="token function">bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、抽象外观类"><a href="#三、抽象外观类" class="headerlink" title="三、抽象外观类"></a>三、抽象外观类</h2><p>在标准外观模式中，如果需要增加、删除或更换与外观类交互的子系统类，必须修改外观类或客户端的代码。这将违背开闭原则。</p><p>可以引入抽象外观类来对系统进行改进，客户端针对抽象外观类进行编程。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>对客户端屏蔽子系统组件，减少客户端所需处理的对象数目，使子系统的使用更加容易</li><li>客户端与子系统间关联的对象会减少</li><li>实现了子系统和客户端之间的松耦合，子系统的变化只需要调整外观类即可</li><li>子系统的修改不会影响其他子系统，且子系统内部修改不会影响到外观类</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由外观类来调用子系统类，减少了客户端直接调用时的灵活性和可变性</li><li>如果设计不当，增加子系统时可能会修改外观类，违背了开闭原则</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>当需要为访问一系列复杂的子系统对象提供简单入口时，可以使用外观模式</li><li>外观类可以将子系统与客户端解耦，从而提高子系统的独立性和可移植性</li><li>在层次化结构中，可以使用外观模式定义系统中的每一层入口。层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第十章 装饰模式 - 扩展系统功能</title>
      <link href="/2019/07/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/12.%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/12.%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-装饰模式-扩展系统功能"><a href="#第十章-装饰模式-扩展系统功能" class="headerlink" title="第十章 装饰模式 - 扩展系统功能"></a>第十章 装饰模式 - 扩展系统功能</h1><p>如果你买了一个毛坯房，那么剩下的就是装修。装修并没有改变原有房屋用于居住的本质，但是增加了实用性、美观性等特征。</p><p>在软件设计中，装饰模式就是一种类似装修的技术，能对已有对象的功能进行扩展，以获得更符合用户需求的对象。</p><h2 id="一、设计一款图形界面库"><a href="#一、设计一款图形界面库" class="headerlink" title="一、设计一款图形界面库"></a>一、设计一款图形界面库</h2><p>设计一款图形界面构件库，该库提供了大量基础构件，如窗体、文本框、列表框等。由于在使用时，需要定制一些特效，如带滚动条的窗体、带黑色边框的文本框、即带滚动条又带黑色边框的列表框等。即对原有的基础构件进行扩展，以增强其功能。</p><h3 id="1-1-传统继承方式实现"><a href="#1-1-传统继承方式实现" class="headerlink" title="1.1 传统继承方式实现"></a>1.1 传统继承方式实现</h3><p><img src="https://i.loli.net/2019/07/11/5d269d7e4fdc421682.png" alt="传统继承的方式实现"></p><h3 id="1-2-问题与缺陷"><a href="#1-2-问题与缺陷" class="headerlink" title="1.2 问题与缺陷"></a>1.2 问题与缺陷</h3><p>按照 1.1 中的实现方式，虽然可以满足系统的设计需求。但是，存在的问题也十分严重：</p><ol><li>系统扩展十分麻烦。当我们需要 “带滚动条和黑色边框的窗体类” 时，需要同时继承两种类型的窗体类。这在 <code>不支持多重继承</code> 的语言中是无法使用的</li><li>代码重复。从设计图中可以看出，不只是 窗体类 需要滚动和边框，文本框类和列表框类同样需要。而设计滚动条与黑色边框的过程基本相同，代码重复。不利于对系统进行修改和维护。</li><li>系统庞大，类的数目非常多。如果增加新的控件或者新的扩展功能，系统都需要增加大量的具体类，这将导致系统变得非常庞大。<ol><li>如增加一个透明边框（基本控件）的功能，则需要对窗体、文本框、列表框各加一个实现类。</li><li>如果需要组合各个功能的话，3种扩展方式则存在7种组合关系。</li></ol></li></ol><h3 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h3><p>直接继承的设计方法的问题在于 类的扩展十分不便，而且会导致类数目的急剧增加。</p><p>其根本原因在于复用机制的不合理：上文采用了继承复用，如“带滚动的窗体”通过继承的方式来复用“窗体类”的“显示功能”，又增加了特定的方法。在复用父类的方法后再增加新的方法来扩展功能。</p><p>根据“合成复用原则”，在实现功能复用时，要多用关联，少用继承。如将 “滚动功能” 抽离，封装在单独的类中，在这个类中定义一个 Component 类型的对象，通过调用 Comonent 的 “显示方法”，在通过调用“滚动功能”的方法来实现功能的扩展。</p><p>根据“里氏替换原则”，只需要在程序运行时，向独立的类中注入具体的 Component 子类对象即可实现功能扩展。</p><p>这个独立的类一般称为“装饰器 Decorator” 或装饰类。</p><h2 id="二、装饰模式"><a href="#二、装饰模式" class="headerlink" title="二、装饰模式"></a>二、装饰模式</h2><p>装饰模式可以在不改变一个对象本身功能的基础上给对象增加额外的新行为。</p><p>装饰模式是一种用于替代继承的技术，它通过一种无须定义子类的方式来给对象动态增加职责，使用对象之间的关联关系取代类之间的继承关系。通过装饰类调用待装饰的原有类的方法，还可以增加新的方法，以扩充原有类的功能。</p><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>装饰模式：动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更加灵活。装饰模式是一种对象结构型模式。</p><p><img src="https://i.loli.net/2019/07/11/5d27016a49a1297684.png" alt="装饰模式"></p><h3 id="2-2-装饰模式中的几个角色"><a href="#2-2-装饰模式中的几个角色" class="headerlink" title="2.2 装饰模式中的几个角色"></a>2.2 装饰模式中的几个角色</h3><ol><li>Component - 抽象构件<ol><li>具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法</li><li>引入抽象构件，可以使客户端以一致的方式处理未被装饰的对象，以及装饰之后的对象</li><li>实现客户端的透明操作</li></ol></li><li>ConcreteComponent - 具体构件<ol><li>抽象构件的子类，用于定义具体的构件对象</li><li>装饰器可以给它增加额外的职责（方法）</li></ol></li><li>Decorator - 抽象装饰类<ol><li>抽象构件的子类，用于给具体构件增加职责，但是具体职责在其子类中实现</li><li>维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法</li><li>通过子类扩展该方法，以达到装饰的目的</li></ol></li><li>ConcreteDecorator - 具体装饰类<ol><li>抽象装饰类的子类，负责向构件添加新的职责</li><li>每个具体装饰类都定义了一些新的行为，可以调用抽象装饰类中定义的方法，并增加新的方法用以扩充对象的行为</li></ol></li></ol><h3 id="2-3-装饰模式的核心-抽象装饰类-代码"><a href="#2-3-装饰模式的核心-抽象装饰类-代码" class="headerlink" title="2.3 装饰模式的核心 - 抽象装饰类 - 代码"></a>2.3 装饰模式的核心 - 抽象装饰类 - 代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Component component<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 维护一个对抽象构件对象的引用</span>    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 注入一个抽象构件类型的对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 调用原有业务方法</span>        component<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象装饰类可以做到对装饰类进行再装饰，如对一张图表增加一个相框，还能继续在小相框外套大相框。因为它们都是 Component 的子类。</p><p>抽象装饰类只是调用原有的 component 对象的 operation() 方法，它并没有真正的实施装饰，而是提供一个统一的接口，将具体装饰过程交给子类完成。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ConcreteDecorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用原有业务方法</span>        <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 调用新增业务方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 新增的业务方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>装饰模式中是否存在独立变化的两个维度？ 试比较装饰模式和桥接模式的相同之处和不同之处？</p></blockquote><h2 id="三、完整实现"><a href="#三、完整实现" class="headerlink" title="三、完整实现"></a>三、完整实现</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 装饰模式 */</span><span class="token comment" spellcheck="true">// 抽象界面构件类 - 抽象构件类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 窗体类 - 具体构件类</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示窗体!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 文本框类 - 具体构件类</span><span class="token keyword">class</span> <span class="token class-name">TextBox</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示文本框!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 列表框类 - 具体构件类</span><span class="token keyword">class</span> <span class="token class-name">ListBox</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示列表框!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 构件装饰类 - 抽象装饰类</span><span class="token keyword">class</span> <span class="token class-name">ComponentDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 维持对抽象构件类型对象的引用</span>    <span class="token keyword">private</span> Component component<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注入抽象构件类型的对象</span>    <span class="token keyword">public</span> <span class="token function">ComponentDecorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        component<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 滚动条装饰类 - 具体装饰类</span><span class="token keyword">class</span> <span class="token class-name">ScrollBarDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ScrollBarDecorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setScrollBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setScrollBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为构件增加滚动条!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 黑色边框装饰类 - 具体装饰类</span><span class="token keyword">class</span> <span class="token class-name">BlackBorderDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BlackBorderDecorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setBlackBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlackBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为构件增加黑色边框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Component window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Component scrollBarWindow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScrollBarDecorator</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>        scrollBarWindow<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、透明装饰模式和半透明装饰模式"><a href="#四、透明装饰模式和半透明装饰模式" class="headerlink" title="四、透明装饰模式和半透明装饰模式"></a>四、透明装饰模式和半透明装饰模式</h2><p>如果我们需要在 “黑色边框装饰类” 中增加一个方法用于设置边框宽度。则修改后的类如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 黑色边框装饰类 - 具体装饰类</span><span class="token keyword">class</span> <span class="token class-name">BlackBorderDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">ComponentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BlackBorderDecorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setBlackBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBlackBorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"为构件增加黑色边框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBorderWidth</span><span class="token punctuation">(</span>Integer width<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果我们继续使用 <code>抽象构件类</code> ，则客户端无法调用新增的业务方法 <code>setBorderWidth(Integer width)</code>。因为在抽象构建类中，没有对该方法的声明。</p><p>在实际使用中，必须使用具体装饰类对象来调用该方法，这种装饰模式就是 <code>半透明(Semi-transparent)装饰模式</code>，而标准的装饰模式是透明装饰模式。</p><h3 id="透明装饰模式与半透明装饰模式的区别"><a href="#透明装饰模式与半透明装饰模式的区别" class="headerlink" title="透明装饰模式与半透明装饰模式的区别"></a>透明装饰模式与半透明装饰模式的区别</h3><p>透明装饰模式要求客户端完全针对抽象编程，所有的装饰类必须声明为抽象构件类型。</p><ol><li>优点：客户端无需关心具体构件类型，可以让客户端透明地使用装饰之前的对象和装饰之后的对象，无须关系它们的区别</li><li>优点：能够对装饰过的对象进行多次装饰，得到更复杂、功能更强大的对象。</li></ol><p>而半透明装饰模式的设计难度较大，对于新增特有的方法，必须使用具体装饰类型来定义装饰后的对象。</p><ol><li>优点：半透明装饰模式可以给系统带来更多灵活性，设计相对简单，使用也比较方便</li><li>缺点：不能对使用同一对象的多次装饰，且客户端需要区别对待装饰之前和装饰之后的对象</li></ol><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>对于扩展对象的功能，装饰模式比继承更加灵活，且类的个数不会急剧增加</li><li>能够动态扩展对象功能，比如通过配置文件决定运行时的具体装饰类</li><li>能够对一个对象进行多次装饰，通过使用不同的具体装饰类来获得不同行为的组合</li><li>具体构件类和具体装饰类可以独立变化，符合“开闭原则”</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>装饰模式在使用时，会产生许多的对象。<ol><li>例如通过对一个对象的多次包装，会产生多个具体包装类</li><li>大量对象势必会占用更多的系统资源，一定程度上影响程序的性能</li></ol></li><li>装饰模式虽然比继承更加灵活，但也意味着更加容易出错，排查问题更加困难。<ol><li>对于多次装饰后的对象，调试问题可能需要逐级排查，较为繁琐</li></ol></li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责</li><li>不能采用继承方式对系统扩展时。<ol><li>系统中存在大量独立的扩展，增加扩展时会导致子类爆炸性增长</li><li>类被定义为不能继承（如final修饰的类）</li></ol></li></ol><h2 id="六、练习"><a href="#六、练习" class="headerlink" title="六、练习"></a>六、练习</h2><blockquote><p>Sunny软件公司欲开发了一个数据加密模块，可以对字符串进行加密。最简单的加密算法通过对字母进行移位来实现，同时还提供了稍复杂的逆向输出加密，还提供了更为高级的求模加密。用户先使用最简单的加密算法对字符串进行加密，如果觉得还不够可以对加密之后的结果使用其他加密算法进行二次加密，当然也可以进行第三次加密。试使用装饰模式设计该多重加密系统。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/10/http/websocket/websocket/"/>
      <url>/2019/07/10/http/websocket/websocket/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Handle incoming WebSocket messages from clients.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessageFromClient</span><span class="token punctuation">(</span>WebSocketSession session<span class="token punctuation">,</span>            WebSocketMessage<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> webSocketMessage<span class="token punctuation">,</span> MessageChannel outputChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Message<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span> messages<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ByteBuffer byteBuffer<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>webSocketMessage <span class="token keyword">instanceof</span> <span class="token class-name">TextMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TextMessage<span class="token punctuation">)</span> webSocketMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>webSocketMessage <span class="token keyword">instanceof</span> <span class="token class-name">BinaryMessage</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                byteBuffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BinaryMessage<span class="token punctuation">)</span> webSocketMessage<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            BufferingStompDecoder decoder <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>decoders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>decoder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No decoder for session id '"</span> <span class="token operator">+</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            messages <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Incomplete STOMP frame content received in session "</span> <span class="token operator">+</span>                            session <span class="token operator">+</span> <span class="token string">", bufferSize="</span> <span class="token operator">+</span> decoder<span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                            <span class="token string">", bufferSizeLimit="</span> <span class="token operator">+</span> decoder<span class="token punctuation">.</span><span class="token function">getBufferSizeLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to parse "</span> <span class="token operator">+</span> webSocketMessage <span class="token operator">+</span>                        <span class="token string">" in session "</span> <span class="token operator">+</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">". Sending STOMP ERROR to client."</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">handleError</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Message<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> message <span class="token operator">:</span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                StompHeaderAccessor headerAccessor <span class="token operator">=</span>                        MessageHeaderAccessor<span class="token punctuation">.</span><span class="token function">getAccessor</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> StompHeaderAccessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>headerAccessor <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No StompHeaderAccessor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                headerAccessor<span class="token punctuation">.</span><span class="token function">setSessionId</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                headerAccessor<span class="token punctuation">.</span><span class="token function">setSessionAttributes</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                headerAccessor<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span><span class="token function">getUser</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                headerAccessor<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>SimpMessageHeaderAccessor<span class="token punctuation">.</span>HEART_BEAT_HEADER<span class="token punctuation">,</span> headerAccessor<span class="token punctuation">.</span><span class="token function">getHeartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">detectImmutableMessageInterceptor</span><span class="token punctuation">(</span>outputChannel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    headerAccessor<span class="token punctuation">.</span><span class="token function">setImmutable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"From client: "</span> <span class="token operator">+</span> headerAccessor<span class="token punctuation">.</span><span class="token function">getShortLogMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                StompCommand command <span class="token operator">=</span> headerAccessor<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> isConnect <span class="token operator">=</span> StompCommand<span class="token punctuation">.</span>CONNECT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token operator">||</span> StompCommand<span class="token punctuation">.</span>STOMP<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isConnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>stats<span class="token punctuation">.</span><span class="token function">incrementConnectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StompCommand<span class="token punctuation">.</span>DISCONNECT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>stats<span class="token punctuation">.</span><span class="token function">incrementDisconnectCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    SimpAttributesContextHolder<span class="token punctuation">.</span><span class="token function">setAttributesFromMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> sent <span class="token operator">=</span> outputChannel<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isConnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Principal user <span class="token operator">=</span> headerAccessor<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> user <span class="token operator">!=</span> session<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>stompAuthentications<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            Principal user <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>isConnect<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SessionConnectEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StompCommand<span class="token punctuation">.</span>SUBSCRIBE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SessionSubscribeEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StompCommand<span class="token punctuation">.</span>UNSUBSCRIBE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventPublisher<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SessionUnsubscribeEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    SimpAttributesContextHolder<span class="token punctuation">.</span><span class="token function">resetAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to send client message to application via MessageChannel"</span> <span class="token operator">+</span>                            <span class="token string">" in session "</span> <span class="token operator">+</span> session<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">". Sending STOMP ERROR to client."</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">handleError</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第九章 组合模式 - 树形结构的处理</title>
      <link href="/2019/07/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/11.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/11.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-组合模式-树形结构的处理"><a href="#第九章-组合模式-树形结构的处理" class="headerlink" title="第九章 组合模式 - 树形结构的处理"></a>第九章 组合模式 - 树形结构的处理</h1><h2 id="一、杀毒软件的框架结构"><a href="#一、杀毒软件的框架结构" class="headerlink" title="一、杀毒软件的框架结构"></a>一、杀毒软件的框架结构</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>开发一个杀毒软件，既可以对某个文件夹（Folder）杀毒，也可以对指定文件（File）进行杀毒。</p><h3 id="2-面向对象的解法"><a href="#2-面向对象的解法" class="headerlink" title="2. 面向对象的解法"></a>2. 面向对象的解法</h3><p>按照面向对象的设计思路，应该在 Folder 中包含图像、文本等文件类型的集合，以及文件夹的集合。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ImageFile</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// image property</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TextFile</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// text property</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Folder</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>ImageFile<span class="token operator">></span> images <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>TextFile<span class="token operator">></span> texts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Folder<span class="token operator">></span> folders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addFolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... remove/find etc.</span><span class="token punctuation">}</span></code></pre><h3 id="3-存在的问题"><a href="#3-存在的问题" class="headerlink" title="3. 存在的问题"></a>3. 存在的问题</h3><ol><li>Folder 的设计和实现十分复杂，需要定义多个集合存储不同类型的成员，且需要针对不同成员提供各自的 增删改查方法，存在大量冗余代码，系统维护困难</li><li>由于系统没有抽象层，客户端必须有区别地对待 文件夹和各类型的文件，无法对其进行统一处理</li><li>系统灵活性和可扩展性差，增加新类型的叶子和容器都需要对原有代码进行修改</li></ol><h3 id="4-解决思路"><a href="#4-解决思路" class="headerlink" title="4. 解决思路"></a>4. 解决思路</h3><p>整个架构中包含两类不同的元素，文件夹和文件。文件夹中可以包含文件或文件夹、而文件不能再包含子文件或子文件夹。因此，我们可以将文件夹成为 容器（Container），不同类型的文件是其成员，也称为 叶子（Leaf）。</p><h2 id="二、组合模式"><a href="#二、组合模式" class="headerlink" title="二、组合模式"></a>二、组合模式</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>对于树形结构，当容器对象（如文件夹）的某一个方法被调用时，将遍历整个属性结构，其中使用了递归调用的机制来对整个结构进行处理。由于容器对象和叶子对象在功能上的区别，在使用时必须有区别地对待。而大多数情况下我们希望一致地处理它们，因为对于这些对象的使用具有一致性。</p><p>组合模式：组合多个对象形成树形结构，以表示具有“整体 - 部分” 关系的层次结构。组合模式对单个对象（叶子对象）和组合对象（容器对象）的使用具有一致性，组合模式又可以成为“整体 - 部分”模式，属于对象结构性模式。</p><h3 id="2-组合模式中的几个角色"><a href="#2-组合模式中的几个角色" class="headerlink" title="2. 组合模式中的几个角色"></a>2. 组合模式中的几个角色</h3><ol><li>Component - 抽象构件<ol><li>接口或抽象类，为 Leaf 和 Composite 对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现</li></ol></li><li>Leaf - 叶子构件<ol><li>叶子节点，没有子节点，实现了在抽象构件中定义的行为</li><li>对于访问及管理子构件的方法，可以通过异常等方式进行处理</li></ol></li><li>Composite - 容器构件<ol><li>容器节点对象，包含子节点</li><li>子节点可以是叶子节点，也可以是容器节点</li><li>提供一个集合用于存储子节点，实现了抽象构件中定义的行为，包含那些访问及管理子节点的方法</li><li>在业务方法中可以递归调用子节点的业务方法</li></ol></li></ol><h2 id="三、-完整解决方案"><a href="#三、-完整解决方案" class="headerlink" title="三、 完整解决方案"></a>三、 完整解决方案</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 组合模式</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> AbstractFile <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">killVirus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ImageFile</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFile</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ImageFile</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持该方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持该方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AbstractFile <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持该方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">killVirus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对图像进行["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]杀毒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TextFile</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFile</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TextFile</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持该方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持该方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AbstractFile <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持该方法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">killVirus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对文本进行["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]杀毒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Folder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFile</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>AbstractFile<span class="token operator">></span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Folder</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        files<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        files<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AbstractFile <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> files<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">killVirus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对文件夹["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]进行杀毒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>AbstractFile file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            file<span class="token punctuation">.</span><span class="token function">killVirus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompositePattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractFile folder1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"图像文件夹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractFile folder2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"文本文件夹"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractFile file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageFile</span><span class="token punctuation">(</span><span class="token string">"图片一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractFile file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageFile</span><span class="token punctuation">(</span><span class="token string">"图片二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractFile file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageFile</span><span class="token punctuation">(</span><span class="token string">"文本一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractFile file4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageFile</span><span class="token punctuation">(</span><span class="token string">"文本二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        folder1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        folder1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>        folder2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file3<span class="token punctuation">)</span><span class="token punctuation">;</span>        folder2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file4<span class="token punctuation">)</span><span class="token punctuation">;</span>        folder2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>folder1<span class="token punctuation">)</span><span class="token punctuation">;</span>        folder2<span class="token punctuation">.</span><span class="token function">killVirus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、透明组合模式和安全组合模式"><a href="#四、透明组合模式和安全组合模式" class="headerlink" title="四、透明组合模式和安全组合模式"></a>四、透明组合模式和安全组合模式</h2><p>通过引入 组合模式，该杀毒软件具有良好的可扩展性，在新增文件类型时，只需要新增一个文件类继承 AbstractFile 即可。</p><p>但是 Abstract 中声明了大量用于管理和访问成员构件的方法，如 add() remove() 等方法，提供对应的错误提示和异常处理。</p><p>解决方案一：将叶子构件的add()、remove() 方法移至AbstractFile中，提供默认实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractFile</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起，不支持该方法！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>AbstractFile file<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起，不支持该方法！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> AbstractFile <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对不起，不支持该方法！"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">killVirus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解决方案二：不提供 add()、remove() 等抽象方法，由具体需要的子构件自己提供。但是会导致客户端不得不使用容器类本身来声明容器构件对象，否则无法访问其中新增的方法。客户端代码无法通过容器构件的抽象构件来定义。</p><h3 id="1-透明组合模式"><a href="#1-透明组合模式" class="headerlink" title="1. 透明组合模式"></a>1. 透明组合模式</h3><p>上面的解决方案一，就是透明组合模式的实现。由抽象构件提供子构件方法的默认实现。</p><p>好处是确保所有构件类都有相同的接口，对客户端来说，叶子对象和容器对象的方法一致。</p><p>缺点是，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一层对象，因此不应该有 add()/remove() 等方法，在运行时可能会出现异常。</p><h3 id="2-安全组合模式"><a href="#2-安全组合模式" class="headerlink" title="2. 安全组合模式"></a>2. 安全组合模式</h3><p>解决方案二，就是安全组合模式的实现。抽象构件中不声明管理成员对象的方法，而是在 Composite类中声明并实现这些方法。</p><p>这种做法是安全的，因为叶子对象没有了管理成员对象的方法，客户端也就不能对叶子对象调用这些方法了。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>组合模式使用面向对象的思想来实现树形结构的构建与处理，描述了如何将容器对象和叶子对象进行递归组合，实现简单，灵活型号。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，使客户端忽略了层次的差异，方便对整个层次结构进行控制</li><li>客户端可以一致地使用一个组合结构或其中的单个对象，不必关系处理的是单个对象还是整个组合结构，简化客户端代码</li><li>组合模式为树形结构的面向对象实现，提供了一种灵活的解决方案，通过叶子对象和容器对象的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>增加新构件时很难对容器中的构件类型进行限制</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>在具有整合和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，客户端可以一致地对待它们</li><li>在一种使用面向对象语言开发的系统中需要处理一个树形结构</li><li>在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新的类型</li></ol><h2 id="六、练习"><a href="#六、练习" class="headerlink" title="六、练习"></a>六、练习</h2><blockquote><p>Sunny软件公司欲开发一个界面控件库，界面控件分为两大类，一类是单元控件，例如按钮、文本框等，一类是容器控件，例如窗体、中间面板等，试用组合模式设计该界面控件库。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 组合模式： * Sunny软件公司欲开发一个界面控件库， * 界面控件分为两大类，一类是单元控件，例如按钮、文本框等， * 一类是容器控件，例如窗体、中间面板等， * 试用组合模式设计该界面控件库。 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">UI</span> <span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>UI ui<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持该方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ButtonUI</span> <span class="token keyword">extends</span> <span class="token class-name">UI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示按钮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">InputUI</span> <span class="token keyword">extends</span> <span class="token class-name">UI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示输入框"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">UI</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>UI<span class="token operator">></span> uis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--开始显示窗口--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UI ui <span class="token operator">:</span> uis<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ui<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>UI ui<span class="token punctuation">)</span> <span class="token punctuation">{</span>        uis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dashboard</span> <span class="token keyword">extends</span> <span class="token class-name">UI</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>UI<span class="token operator">></span> uis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--开始显示面板--"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>UI ui <span class="token operator">:</span> uis<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ui<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>UI ui<span class="token punctuation">)</span> <span class="token punctuation">{</span>        uis<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompositePattern</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> UI ui1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> UI ui2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ButtonUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> UI ui3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> UI ui4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> UI window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> UI dashboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dashboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dashboard<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ui1<span class="token punctuation">)</span><span class="token punctuation">;</span>        dashboard<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ui4<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ui1<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ui3<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ui2<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dashboard<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/09/spring/spring-messaging/spring-message%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/07/09/spring/spring-messaging/spring-message%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="spring-messaging模块解析"><a href="#spring-messaging模块解析" class="headerlink" title="spring-messaging模块解析"></a>spring-messaging模块解析</h1><p>spring-messaging 模块为集成 messaging api 和消息协议提供支持。</p><p><img src="https://i.loli.net/2019/07/09/5d2435f4c338214322.png" alt="springframework:spring-messaging"></p><p>从其目录结构可以看出，spring-messaging 共包含六个基本模块：</p><h3 id="1-base模块"><a href="#1-base模块" class="headerlink" title="1. base模块"></a>1. base模块</h3><p>base模块中定义了 消息Message(MessageHeader和body)、消息处理 MessageHandler、发送消息 MessageChannel。</p><h3 id="2-converter-模块"><a href="#2-converter-模块" class="headerlink" title="2. converter 模块"></a>2. converter 模块</h3><p>converter模块主要对消息转换提供支持，如 string、json、byte[] 之间的相互转换。</p><h3 id="3-core-模块"><a href="#3-core-模块" class="headerlink" title="3. core 模块"></a>3. core 模块</h3><p>提供消息的模板方法</p><h3 id="4-handler-模块"><a href="#4-handler-模块" class="headerlink" title="4. handler 模块"></a>4. handler 模块</h3><ul><li>HandlerMethod 封装了一个 Bean 的方法相关信息，提供了访问方法参数的便捷工具。可以将HandlerMathod 认为是将 conditions 映射到 message 的约定</li><li>HandlerMethodArgumentResolver 解析方法参数到 Context 中指定 Message 的参数值的策略接口</li><li>HandlerMethodReturnValueHandler 处理从触发一个 Message 的method handling 返回值的策略接口</li></ul><h3 id="5-simp-模块"><a href="#5-simp-模块" class="headerlink" title="5. simp 模块"></a>5. simp 模块</h3><p>包含诸如 STOMP 协议的简单消息协议的通用支持。</p><h3 id="6-support-模块"><a href="#6-support-模块" class="headerlink" title="6. support 模块"></a>6. support 模块</h3><p>提供了 Message 的实现，及创建消息的 MessageBuilder 和获取消息头的 MessageHeaderAccessor，还有各种不同的 MessageChannel 实现和 channel interceptor 支持。</p><h3 id="7-tcp-模块"><a href="#7-tcp-模块" class="headerlink" title="7. tcp 模块"></a>7. tcp 模块</h3><p>通过 TcpOperations 建立 TCP connection</p><p>通过 TcpConnectionHandler 处理消息和通过 TcpConnectionf 发送消息的抽象及实现</p><p>包含了基于 Reactor 的 tcp 消息支持。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第八章 桥接模式 - 处理多维度变化</title>
      <link href="/2019/07/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/10.%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/10.%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-桥接模式-处理多维度变化"><a href="#第八章-桥接模式-处理多维度变化" class="headerlink" title="第八章 桥接模式 - 处理多维度变化"></a>第八章 桥接模式 - 处理多维度变化</h1><h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h3 id="1-1-场景"><a href="#1-1-场景" class="headerlink" title="1.1 场景"></a>1.1 场景</h3><p>有两种文具，分别是毛笔和蜡笔。如果需要大中小三种型号的蜡笔，且每种型号需要有12种不同的颜色。</p><p>则蜡笔需要各种型号的各种颜色 3*12 = 36支，而毛笔只需要大中小型号和12中颜色的颜料盒 3 + 12 = 15支。</p><p>在蜡笔的模式中，无论是增加颜色，还是增加型号，都会影响另一个维度。耦合度非常的强。</p><p>但在毛笔中，型号与颜色进行了解耦，只是在使用时组合使用，非常灵活，扩展也十分方便。</p><h3 id="1-2-场景二-跨平台图像浏览系统"><a href="#1-2-场景二-跨平台图像浏览系统" class="headerlink" title="1.2 场景二 - 跨平台图像浏览系统"></a>1.2 场景二 - 跨平台图像浏览系统</h3><p>现有一个系统，需要该系统支持BMP、JPG、GIF等格式的图形文件，并且能在Windows、Linux、MacOS等多个系统上运行。首先将文件解析为像素矩阵，然后各系统使用各自的绘制函数，将矩阵显示在屏幕上。</p><p>如果使用上面的“蜡笔模式” - 多层继承模式，可能会存在 Image -&gt; BMPImage、JPGImage、GIFIMAGE -&gt; BMPWindowsImage/BMPLinuxImage/BMPMacOSImage、JPGWindowsImage/JPGLinuxImage/JPGMacOSImage、GIFWindowsImage/GIFLinuxImage/GIFMacOSImage。</p><h4 id="存在的问题："><a href="#存在的问题：" class="headerlink" title="存在的问题："></a>存在的问题：</h4><ol><li>由于采用了多层继承，系统中的类个数非常多。具体类的个数 = 所支持的图像格式 * 所支持的操作系统</li><li>系统扩展麻烦，如BMPWindowsImage，即包含图像文件格式，又包含操作系统信息。无论是增加图像格式还是操作系统，都需要增加大量具体类。</li><li>违反了“单一职责原则”，因为具体类将图像文件解析和像素矩阵显示这两个完全不同的职责融合，任意职责发生改变，都需要修改所有。</li></ol><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>引入桥接模式，将两个独立变化的维度设计为两个独立的继承等级结构，并且在抽象层建立一个抽象关联。</p><h2 id="二、桥接模式"><a href="#二、桥接模式" class="headerlink" title="二、桥接模式"></a>二、桥接模式</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>桥接模式，又称为柄体模式或接口模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。是一种非常实用的结构性设计模式。</p><p>如果软件系统中某个类存在两个独立变化的维度，通过该模式可以将这两个维度分离出来，使两者可以独立扩展，让系统更加符合“单一职责原则”。</p><p>桥接模式用一种巧妙的方式处理多层继承存在的问题，用抽象关联取代传统的多层继承，将类之间的静态继承关系转换为动态的对象组合关系，使系统更加灵活，更易于扩展，同时有效控制了系统中类的个数。</p><blockquote><p>桥接模式是一个非常有用的模式，包含了很多面向对象设计原则的思想，如“单一职责原则”、“开闭原则”、“合成复用原则”、“里氏替换原则”、“依赖倒转原则”等。有助于我们深入理解设计原则，形成正确的设计思想和培养良好的设计风格。</p></blockquote><h3 id="2-2-桥接模式中的几个角色"><a href="#2-2-桥接模式中的几个角色" class="headerlink" title="2.2 桥接模式中的几个角色"></a>2.2 桥接模式中的几个角色</h3><ol><li>Abstraction - 抽象类<ol><li>用于定义抽象类的接口，他一般是抽象类而不是接口</li><li>定义了一个 <code>Implementor实现类接口</code> 类型的对象，并可以维护该对象，它与实现类接口之间具有关联关系</li><li>既可以包含抽象业务方法，也可以包含具体业务方法</li></ol></li><li>RefinedAbstraction - 扩充抽象类<ol><li>一般为具体类，实现了 <code>Abstraction抽象类</code> 中的抽象方法</li><li>因为 <code>Abstraction抽象类</code> 中定义了实现类接口对象，所以<code>RefinedAbstraction扩充抽象类</code>中可以调用 <code>Implementor具体实现了类</code> 中定义的业务方法</li></ol></li><li>Implementor - 实现类接口<ol><li>定义实现类接口，提供基本操作</li><li>具体实现交给其子类</li><li>通过关联关系，在 <code>Abstraction抽象类</code> 中，可以直接调用 <code>Implementor及其子类</code> 的方法</li><li>使用关联关系来代替继承关系</li></ol></li><li>ConcreteImplementor - 具体实现类<ol><li>实现 <code>Implementor接口</code>，不同的具体实现类提供不同的方法实现</li><li>用于提供给 <code>Abstraction抽象类</code> 调用的具体实现</li></ol></li></ol><h3 id="2-3-具体实现"><a href="#2-3-具体实现" class="headerlink" title="2.3 具体实现"></a>2.3 具体实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 桥接模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BridgePattern</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 像素矩阵类：辅助类，各种格式的文件最终都被转化为像素矩阵，不同的操作系统提供不同的方式显示像素矩阵</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Matrix</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 抽象图像类：抽象类</span>    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Image</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> ImageImp imp<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImp</span><span class="token punctuation">(</span>ImageImp imp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>imp <span class="token operator">=</span> imp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">parseFile</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// JPG格式图像：扩充抽象类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">JPGImage</span> <span class="token keyword">extends</span> <span class="token class-name">Image</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseFile</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Matrix matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            imp<span class="token punctuation">.</span><span class="token function">doPaint</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName <span class="token operator">+</span> <span class="token string">",格式为JPG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// PNG格式图像：扩充抽象类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PNGImage</span> <span class="token keyword">extends</span> <span class="token class-name">Image</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parseFile</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Matrix matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            imp<span class="token punctuation">.</span><span class="token function">doPaint</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName <span class="token operator">+</span> <span class="token string">",格式为PNG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 抽象操作系统实现类：实现类接口</span>    <span class="token keyword">static</span> <span class="token keyword">interface</span> <span class="token class-name">ImageImp</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPaint</span><span class="token punctuation">(</span>Matrix m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示像素矩阵 m</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Windows 操作系统实现类：具体实现类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WindowsImp</span> <span class="token keyword">implements</span> <span class="token class-name">ImageImp</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPaint</span><span class="token punctuation">(</span>Matrix m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用Windows系统的绘制函数，绘制像素矩阵</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Windows操作系统中显示图像"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Linux 操作系统实现类：具体实现类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LinuxImp</span> <span class="token keyword">implements</span> <span class="token class-name">ImageImp</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPaint</span><span class="token punctuation">(</span>Matrix m<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用Linux系统的绘制函数，绘制像素矩阵</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在Linux操作系统中显示图像"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Image img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PNGImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImageImp imp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsImp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span><span class="token function">setImp</span><span class="token punctuation">(</span>imp<span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span><span class="token function">parseFile</span><span class="token punctuation">(</span><span class="token string">"死了都要爱.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>在使用桥接模式时，我们应该先识别出一个类所具有的两个独立变化的维度，将它们设计为两个独立的继承等级结构，为两个维度都提供抽象层，并建立抽象耦合。通常情况下，我们将具有两个独立变化维度的类的一些普通业务方法，和与之关系最密切的维度设计为“抽象类”层次结构（抽象部分），而将另一个维度设计为“实现类”层次结构（实现部分）。</p><p>如毛笔，由于型号是固有的维度，可以设计为抽象毛笔类，在该类中声明并部分实现毛笔的业务方法，将各种型号的毛笔作为子类。将颜色作为毛笔的另一个维度。</p><p>增加新的毛笔类型，只需扩展左侧的“抽象部分”；增加新的颜色，只需扩展右侧的“实现部分”。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>分离抽象解耦及其实现部分。解耦了抽象和实现之间的绑定关系，使抽象部分和实现部分都有自己的维度变化</li><li>很多情况下，桥接模式可以取代多层继承方案。多层继承违背了“单一职责原则”，复用性较差，且类的个数较多</li><li>桥接模式提供了系统的可扩展性，两个维度的扩展都不需要修改原有系统，符合“开闭原则”</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>桥接模式的使用，会增加系统的理解和设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计和编程</li><li>桥接模式要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>如果一个系统需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，通过桥接模式可以使它们在抽象层建立一个关联关系</li><li>“抽象部分”和“实现部分”可以以继承的方式独立扩展而不受影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合，即系统需要对抽象化角色和实现化角色进行动态耦合</li><li>一个类存在两个（或多个）独立变化的维度，且各维度都需要独立进行扩展</li><li>对于不希望使用继承或多层继承的系统，导致系统类的个数急剧增加的系统，桥接模式非常适用</li></ol><h2 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h2><blockquote><p>开发一个数据转换工具，可以将数据库中的数据转换成多种文件格式，例如txt、xml、pdf等格式，同时该工具需要支持多种不同的数据库。试使用桥接模式对其进行设计。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 桥接模式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BridgePattern</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据库抽象类</span>    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>        <span class="token keyword">protected</span> FileFormat fileFormat<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFileFormat</span><span class="token punctuation">(</span>FileFormat fileFormat<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fileFormat <span class="token operator">=</span> fileFormat<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Oracle 数据库 - 抽象扩展类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OracleDatabase</span> <span class="token keyword">extends</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Oracle数据库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fileFormat<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Microsoft 数据库 - 抽象扩展类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MCDatabase</span> <span class="token keyword">extends</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Microsoft数据库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fileFormat<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 文件格式 - 实现类接口</span>    <span class="token keyword">interface</span> <span class="token class-name">FileFormat</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// txt 文件 - 具体实现类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TxtFileFormat</span> <span class="token keyword">implements</span> <span class="token class-name">FileFormat</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TXT 格式文本输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// pdf 文件 - 具体实现类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PDFFileFormat</span> <span class="token keyword">implements</span> <span class="token class-name">FileFormat</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"PDF 格式文本输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Database db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OracleDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileFormat ff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TxtFileFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">setFileFormat</span><span class="token punctuation">(</span>ff<span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第七章 适配器模式 - 不兼容结构的协调</title>
      <link href="/2019/07/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/9.%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/9.%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-适配器模式-不兼容结构的协调"><a href="#第七章-适配器模式-不兼容结构的协调" class="headerlink" title="第七章 适配器模式 - 不兼容结构的协调"></a>第七章 适配器模式 - 不兼容结构的协调</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>如笔记本的电源接口只支持20V电压，而家庭用电的电压为220V，肯定无法直接通过一根电线直接为笔记本提供电源。此时，就需要一个变压器电源，来将220V电压转换为20V电压。这个变压器就是适配器模式的一种。</p><p>适配器模式：将一个类的接口与另一个类的接口匹配利用，而无须修改原来的适配者，解耦合抽象目标类接口。</p><p>适配器模式可以是类结构型模式，也可以是对象结构型模式。</p><h2 id="1-2-适配器模式中的几个角色"><a href="#1-2-适配器模式中的几个角色" class="headerlink" title="1.2 适配器模式中的几个角色"></a>1.2 适配器模式中的几个角色</h2><ol><li>Target - 目标抽象类<ol><li>目标抽象类定义客户所需接口</li><li>抽象类、接口或具体类</li><li>类似上面的笔记本</li></ol></li><li>Adapter - 适配器类<ol><li>适配器可以调用另一个接口，作为一个转换器，对 Adaptee 和 Target 进行适配</li></ol></li><li>Adaptee - 适配者类<ol><li>被适配的角色（如220V的家庭电源，我们需要将其转换为20V电压输出）</li><li>它定义了一个已经存在的接口，这个接口需要适配</li><li>适配者类一般是个具体类，包含了客户希望使用的业务方法</li></ol></li></ol><h3 id="1-3-对象适配器-实例"><a href="#1-3-对象适配器-实例" class="headerlink" title="1.3 对象适配器 - 实例"></a>1.3 对象适配器 - 实例</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抽象成绩操作类 - Target目标接口</span><span class="token keyword">interface</span> <span class="token class-name">ScoreOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 成绩排序</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 成绩查找</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 快速排序类 - Adaptee 适配者类</span><span class="token keyword">class</span> <span class="token class-name">QuickSort</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自己实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 二分查找类 - Adaptee 适配者类</span><span class="token keyword">class</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>intkey<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自己实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 操作适配器 - Adapter 适配器</span><span class="token keyword">class</span> <span class="token class-name">OperationAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ScoreOperation</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> QuickSort sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuickSort</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> BinarySearch search <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用适配者类QuickSort的排序方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> sort<span class="token punctuation">.</span><span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用适配者类BinarySearch的查找方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> search<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-4-类适配器"><a href="#1-4-类适配器" class="headerlink" title="1.4 类适配器"></a>1.4 类适配器</h3><p>类适配器与对象适配器的区别在于：</p><p>对象适配器与适配者之间的关系是<code>关联关系</code>，而类适配器中的关系则是<code>继承关系</code>。</p><p>如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>由于Java、C#等语言不支持多重继承，因此类适配器在使用时受到诸多限制。如Target必须是接口，Adapter不能是Final类等等。</p></blockquote><h3 id="1-5-双向适配器"><a href="#1-5-双向适配器" class="headerlink" title="1.5 双向适配器"></a>1.5 双向适配器</h3><p>在对象适配器的使用过程中，如果在适配器中同时包含对目标类和适配者类的引用，适配者和目标类可以通过它调用彼此的方法，那么该适配器就是一个双向适配器。如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">Adaptee</span><span class="token punctuation">,</span>Target<span class="token punctuation">{</span>    <span class="token keyword">private</span> Target target<span class="token punctuation">;</span>    <span class="token keyword">private</span> Adaptee adaptee<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Adapter</span><span class="token punctuation">(</span>Target target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Adapter</span><span class="token punctuation">(</span>Adaptee adpatee<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-6-缺省适配器"><a href="#1-6-缺省适配器" class="headerlink" title="1.6 缺省适配器"></a>1.6 缺省适配器</h3><p>缺省适配器模式(Default Adapter Pattern)：当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情况，又称为单接口适配器模式。</p><h2 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>目标类与适配者类解耦，通过引入一个适配器类来重用现有的适配者类</li><li>增加类的透明性和复用性，具体业务过程封装在适配者类中，对客户端透明，提供了适配者的复用性，同一个适配者类可以在多个不同系统中复用</li><li>灵活性和扩展性好，可以通过配置文件的方式更换适配器，符合“开闭原则”</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>Java、C#不支持多重继承，一次只能适配一个适配者类</li><li>适配者类不能为最终类</li><li>Java、C#中，类适配器模式的目标抽象类必须是接口</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>系统需要使用一些现有的类，但该类的接口不符合系统需要</li><li>创建一个可重复使用的类，如上面的快速排序，可以做成一个适配者，为其它适配器类所调用</li></ol><h2 id="三、练习"><a href="#三、练习" class="headerlink" title="三、练习"></a>三、练习</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// SD卡接口及其具体实现</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SDCard</span> <span class="token punctuation">{</span>    String <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读SD卡</span>    <span class="token keyword">int</span> <span class="token function">writeSD</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写SD卡</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SDCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SDCard</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"读取SD卡"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">writeSD</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 假装写入数据至SD卡中了</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 电脑类，具有读取SD卡的功能</span><span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    String <span class="token function">readSD</span><span class="token punctuation">(</span>SDCard sdCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sdCard<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ----- 新版的TF卡上市，系统需要在不修改原有SD卡接口的情况下，支持新版的TF卡  -----</span><span class="token comment" spellcheck="true">// TF卡接口及其实现</span><span class="token keyword">interface</span> <span class="token class-name">TFCard</span> <span class="token punctuation">{</span>    String <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读TF卡</span>    <span class="token keyword">int</span> <span class="token function">writeTF</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 写TF卡</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TFCardImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TFCard</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"读取TF卡"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">writeTF</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// TF卡的适配器，继承与目标接口，但是将SD卡接口适配为TF卡的接口</span><span class="token keyword">class</span> <span class="token class-name">TFCardAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">SDCard</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TFCard tfCard<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">TFCardAdapter</span><span class="token punctuation">(</span>TFCard tfCard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tfCard <span class="token operator">=</span> tfCard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">readSD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tfCard<span class="token punctuation">.</span><span class="token function">readTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">writeSD</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> tfCard<span class="token punctuation">.</span><span class="token function">writeTF</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试客户端</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SDCard sdCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SDCardImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SDCard tfCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TFCardAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TFCardImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 通过适配器，将TFCard适配为SDCard</span>        Computer computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>sdCard<span class="token punctuation">)</span><span class="token punctuation">;</span>        String s1 <span class="token operator">=</span> computer<span class="token punctuation">.</span><span class="token function">readSD</span><span class="token punctuation">(</span>tfCard<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><blockquote><p>适配器类的名称尽量做到见名知意，因为客户端表面上调用的是SDCard，但是内部却被适配成了TFCard，如果系统中存在大量这种代码，会使系统十分的混乱。</p></blockquote></blockquote><p>如果适配器大量存在的话，可以考虑重构代码，而不是继续适配下去。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第六章 建造者模式 - 复杂对象的组装与创建</title>
      <link href="/2019/07/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/8.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/8.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-建造者模式-复杂对象的组装与创建"><a href="#第六章-建造者模式-复杂对象的组装与创建" class="headerlink" title="第六章 建造者模式 - 复杂对象的组装与创建"></a>第六章 建造者模式 - 复杂对象的组装与创建</h1><h2 id="一、设计一个游戏角色"><a href="#一、设计一个游戏角色" class="headerlink" title="一、设计一个游戏角色"></a>一、设计一个游戏角色</h2><p>作为 RPG 游戏的一个重要组成部分，游戏角色拥有其特定的性别、脸型、服装、发型等外部特性。</p><p>无论何种造型的游戏角色，它们的创建步骤都大同小异，都需要逐步创建其组成部分，再将各组成部分装配成一个完整的游戏角色。</p><p>而建造者模式就是为了解决，各个组件组合为复杂对象的问题。</p><p><img src="https://i.loli.net/2019/07/09/5d23ff6fa777253811.png" alt="建造者模式"></p><a id="more"></a><h2 id="二、建造者模式"><a href="#二、建造者模式" class="headerlink" title="二、建造者模式"></a>二、建造者模式</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>建造者模式，将客户端与包含多个组成部分的复杂对象的创建过程分离，客户端无须知道复杂对象的内部组成部分与装配方式，只需要知道所需建造者的类型即可。</p><p>建造者模式：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。属于一种对象创建型模式。</p><h3 id="2-2-建造者模式中的几个角色"><a href="#2-2-建造者模式中的几个角色" class="headerlink" title="2.2 建造者模式中的几个角色"></a>2.2 建造者模式中的几个角色</h3><ol><li>Builder - 抽象建造者<ol><li>为创建一个产品对象的各个部件指定抽象接口</li><li>一般声明两类方法：一类方法是buildPartX()，用于创建复杂对象的各个部件；另一类是getResult()，用于返回复杂对象</li><li>抽象类或接口</li></ol></li><li>ConcreteBuilder - 具体建造者<ol><li>实现了Builder接口，实现各个部件的具体构造和装配方法</li></ol></li><li>Product - 产品角色<ol><li>被构建的复杂对象，包含多个组成部件</li><li>由具体建造者创建该产品的内部表示并定义它的装配过程</li></ol></li><li>Director - 指挥者<ol><li>又称为导演类，负责安排复杂对象的建造次序</li><li>客户端一般只需与指挥者交互，由客户端确定具体建造者的类型，并实例化具体建造者对象，然后通过指挥者类的构造函数或setter方法将对象传入指挥类中</li></ol></li></ol><h3 id="2-3-复杂对象、建造者与指挥者"><a href="#2-3-复杂对象、建造者与指挥者" class="headerlink" title="2.3 复杂对象、建造者与指挥者"></a>2.3 复杂对象、建造者与指挥者</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 复杂对象，主要是包含多种不同类型的成员属性(部件)</span><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String partA<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object partB<span class="token punctuation">;</span>    <span class="token keyword">private</span> User partC<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建产品对象</span>    <span class="token keyword">protected</span> Product product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// buildPartX() 方法为产品对象的成员属性设值</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildPartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// getResult 返回复杂对象</span>    <span class="token keyword">public</span> Product <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Builder builder<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 通过构造方法或者setter方法注入一个抽象建造者，由调用者确定使用何种类型的建造者     */</span>    <span class="token keyword">public</span> <span class="token function">Direct</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * construct 方法中调用builder对象的构造部件方法，返回一个产品对象     */</span>    <span class="token keyword">public</span> Product <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        build<span class="token punctuation">.</span><span class="token function">buildPartA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        build<span class="token punctuation">.</span><span class="token function">buildPartB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        build<span class="token punctuation">.</span><span class="token function">buildPartC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>需要扩展新的建造者时，只需要重新实现抽象建造者即可，无需修改源代码，系统扩展十分方便。</p><p>在客户端代码中，无需关系产品对象的具体组装过程，只需要指定具体建造者的类型即可。</p><h3 id="2-4-建造者模式的使用"><a href="#2-4-建造者模式的使用" class="headerlink" title="2.4 建造者模式的使用"></a>2.4 建造者模式的使用</h3><pre class=" language-java"><code class="language-java">Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Director director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>Product product <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-5-建造者模式与抽象工厂模式"><a href="#2-5-建造者模式与抽象工厂模式" class="headerlink" title="2.5 建造者模式与抽象工厂模式"></a>2.5 建造者模式与抽象工厂模式</h3><p>建造者模式与抽象工厂模式很类似：</p><p>抽象工厂模式返回一系列相关的产品，而建造者模式返回一个完整的复杂产品。</p><p>抽象工厂模式中，客户端通过选择具体工厂来生成所需对象，而建造者模式中，客户端通过指定具体建造者类型并指导Director类去生成对象，侧重于一步步构建复杂对象，然后将结果返回。</p><p>类似于：抽象工厂生产出不同类型的汽车配件，而建造者模式就是汽车组装厂。</p><h2 id="三、完整案例"><a href="#三、完整案例" class="headerlink" title="三、完整案例"></a>三、完整案例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 角色类 - 复杂产品</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Actor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 角色类型</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 性别</span>    <span class="token keyword">private</span> String face<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 脸型</span>    <span class="token keyword">private</span> String costume<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 服装</span>    <span class="token keyword">private</span> String hairStyle<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 发型</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 角色建造器 - 抽象建造者</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ActorBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Actor actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工厂方法，返回一个完整的游戏角色对象</span>    <span class="token keyword">public</span> Actor <span class="token function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> actor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 天使角色建造器 - 具体建造者</span><span class="token keyword">class</span> <span class="token class-name">AngelBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ActorBuilder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"天使"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setFace</span><span class="token punctuation">(</span><span class="token string">"漂亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setCostume</span><span class="token punctuation">(</span><span class="token string">"白裙子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setHairStyle</span><span class="token punctuation">(</span><span class="token string">"披肩长发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 恶魔角色建造器 - 具体建造者</span><span class="token keyword">class</span> <span class="token class-name">DevilBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ActorBuilder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token string">"恶魔"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setFace</span><span class="token punctuation">(</span><span class="token string">"丑陋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setCostume</span><span class="token punctuation">(</span><span class="token string">"丑陋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        actor<span class="token punctuation">.</span><span class="token function">setHairStyle</span><span class="token punctuation">(</span><span class="token string">"光头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 游戏角色创建控制器 - 指挥者</span><span class="token keyword">class</span> <span class="token class-name">ActorController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 逐步构建复杂产品对象</span>    <span class="token keyword">public</span> Actor <span class="token function">construct</span><span class="token punctuation">(</span>ActorBuilder buidler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buidler<span class="token punctuation">.</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> buidler<span class="token punctuation">.</span><span class="token function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试客户端，调用指挥者通过具体建造者来构建完整的复杂对象</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ActorBuilder actorBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AngelBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ActorController actorController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActorController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Actor actor <span class="token operator">=</span> actorController<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span>actorBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>actor<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> actor<span class="token punctuation">.</span><span class="token function">getFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h2><h3 id="4-1-省略Director指挥者"><a href="#4-1-省略Director指挥者" class="headerlink" title="4.1 省略Director指挥者"></a>4.1 省略Director指挥者</h3><p>为了简化系统结构，可以将Director与抽象建造者Builder合并，如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 角色建造器 - 抽象建造者</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ActorBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> Actor actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 工厂方法，返回一个完整的游戏角色对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Actor <span class="token function">construct</span><span class="token punctuation">(</span>ActorBuilder buidler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buidler<span class="token punctuation">.</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> actor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-钩子方法"><a href="#4-2-钩子方法" class="headerlink" title="4.2 钩子方法"></a>4.2 钩子方法</h3><p>建造者模式除了逐步构建一个复杂产品对象外，还可以通过Director类来精细控制产品的创建过程，如增加一个钩子方法来控制是否构建某个buildPartX()的调用。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ActorBuilder</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> Actor actor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Actor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 钩子方法 - 是否是光头，true则不进行buildHairStyle</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBareheaded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 游戏角色创建控制器 - 指挥者</span><span class="token keyword">class</span> <span class="token class-name">ActorController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 逐步构建复杂产品对象</span>    <span class="token keyword">public</span> Actor <span class="token function">construct</span><span class="token punctuation">(</span>ActorBuilder buidler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        buidler<span class="token punctuation">.</span><span class="token function">buildType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildFace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buidler<span class="token punctuation">.</span><span class="token function">buildCostume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isBareheaded<span class="token punctuation">)</span><span class="token punctuation">{</span>            buidler<span class="token punctuation">.</span><span class="token function">buildHairStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buidler<span class="token punctuation">.</span><span class="token function">createActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>在建造者模式中，客户端不必知道产品内部组成细节，将产品本身和产品的创建过程解耦，使得相同创建过程能够创建出不同的产品对象</li><li>每个具体建造者都相对独立，可以方便地替换或增加具体建造者，符合“开闭原则”</li><li>将复杂产品的创建步骤分解在不同方法中，使创建过程更清晰，也更方便程序控制创建的过程</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>建造者模式所创建的产品具有许多共同点，其组成部分相似。如果产品间差异过大，则不适合建造者模式，使用范围有限</li><li>如果产品内部变化复杂，会导致需要许多具体建造者来实现该变化，会导致系统庞大，增加系统理解难度和运行成本</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>需要生成的产品对象有复杂的内部结构，即多个成员属性</li><li>产品对象的属性相互依赖，需要指定其生成顺序</li><li>对象的创建过程独立于创建该对象的类。在建造者模式中，创建过程封装在指挥者类中，而不再建造者和客户端中</li><li>隔离复杂对象的创建和使用，且相同的创建过程能够创建不同的产品</li></ol><h2 id="六、练习"><a href="#六、练习" class="headerlink" title="六、练习"></a>六、练习</h2><blockquote><p>Sunny软件公司欲开发一个视频播放软件，为了给用户使用提供方便，该播放软件提供多种界面显示模式，如完整模式、精简模式、记忆模式、网络模式等。在不同的显示模式下主界面的组成元素有所差异，如在完整模式下将显示菜单、播放列表、主窗口、控制条等，在精简模式下只显示主窗口和控制条，而在记忆模式下将显示主窗口、控制条、收藏列表等。尝试使用建造者模式设计该软件。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 视频播放显示界面 - 具体产品 * 具体播放界面，包含显示菜单、播放列表、主窗口、控制条 * 可能包含的显示模式，完整模式、精简模式、网络模式 */</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TechWeb</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String menu<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 菜单</span>    <span class="token keyword">private</span> String list<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 播放列表</span>    <span class="token keyword">private</span> String window<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 主窗口</span>    <span class="token keyword">private</span> String control<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 控制条</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 显示模式 - 抽象建造者 */</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ShowPattern</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> TechWeb techWeb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TechWeb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TechWeb <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">buildControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buildList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buildMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buildWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> techWeb<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 完整模式 - 具体建造者 */</span><span class="token keyword">class</span> <span class="token class-name">FullPattern</span> <span class="token keyword">extends</span> <span class="token class-name">ShowPattern</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setControl</span><span class="token punctuation">(</span><span class="token string">"完整控制条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span><span class="token string">"显示50条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setMenu</span><span class="token punctuation">(</span><span class="token string">"菜单列表50条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setWindow</span><span class="token punctuation">(</span><span class="token string">"带所有菜单的窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 精简模式 */</span><span class="token keyword">class</span> <span class="token class-name">SimpPattern</span> <span class="token keyword">extends</span> <span class="token class-name">ShowPattern</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setControl</span><span class="token punctuation">(</span><span class="token string">"完整的控制条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span><span class="token string">"不显示播放列表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setMenu</span><span class="token punctuation">(</span><span class="token string">"不显示菜单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        techWeb<span class="token punctuation">.</span><span class="token function">setWindow</span><span class="token punctuation">(</span><span class="token string">"不带菜单的窗口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShowPattern simpPattern <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TechWeb web <span class="token operator">=</span> simpPattern<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>web<span class="token punctuation">.</span><span class="token function">getMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/6.MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/6.MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-MySQL-中的存储引擎"><a href="#第六章-MySQL-中的存储引擎" class="headerlink" title="第六章 MySQL 中的存储引擎"></a>第六章 MySQL 中的存储引擎</h1><h2 id="一、查询-MySQL-的存储引擎"><a href="#一、查询-MySQL-的存储引擎" class="headerlink" title="一、查询 MySQL 的存储引擎"></a>一、查询 MySQL 的存储引擎</h2><blockquote><p>SHOW ENGINES;</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/20.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/20.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-MySQL-中的存储引擎"><a href="#第六章-MySQL-中的存储引擎" class="headerlink" title="第六章 MySQL 中的存储引擎"></a>第六章 MySQL 中的存储引擎</h1><h2 id="Init-Database"><a href="#Init-Database" class="headerlink" title="Init Database"></a>Init Database</h2><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE IF NOT EXISTS mc_customer DEFAULT CHARSET utf8 COLLATE utf8_general_ci;CREATE DATABASE IF NOT EXISTS mc_product DEFAULT CHARSET utf8 COLLATE utf8_general_ci;CREATE DATABASE IF NOT EXISTS mc_order DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</code></pre><h2 id="Init-User"><a href="#Init-User" class="headerlink" title="Init User"></a>Init User</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>customer_login<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>login_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户登录名'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'md5加密的密码'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 禁止使用枚举类型，而采用约定的整型</span> <span class="token punctuation">`</span>user_stats<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户状态，1 可用，0 冻结'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- modified_time 在更新数据时自动更新</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_customerid <span class="token punctuation">(</span><span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户登录表'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>customer_login<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>login_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>password<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_stats<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'admin'</span><span class="token punctuation">,</span> <span class="token string">'D959CAADAC9B13DCB3E609440135CF54'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'D959CAADAC9B13DCB3E609440135CF54'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'D959CAADAC9B13DCB3E609440135CF54'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'guest'</span><span class="token punctuation">,</span> <span class="token string">'D959CAADAC9B13DCB3E609440135CF54'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>customer_inf<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_inf_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户信息ID'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 关联外键，但是不使用外键约束，而在程序中维护表关系，避免在增删父表数据时还需要检查外键约束</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'customer_login表的自增ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户真实姓名'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>identity_card_type<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">comment</span> <span class="token string">'证件类型：1 身份证，2 军官证，3 护照'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>identity_card_no<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'证件号码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>mobile_phone<span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机号'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_email<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 使用最短长度设置属性的宽度</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'性别：0 女，1 男'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_point<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户积分'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>register_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'注册时间'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 使用日期类型，能够使用日期函数，且存储只需8字节</span> <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token keyword">COMMENT</span> <span class="token string">'会员生日'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_level<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'会员级别：1 普通会员，2 青铜会员，3 白银会员，4 黄金会员，5 钻石会员'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 金额类数据，必须使用 decimal 类型，精确浮点型，计算时不会丢失精度</span> <span class="token punctuation">`</span>user_money<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0.00</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户余额'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_customerinfid<span class="token punctuation">(</span><span class="token punctuation">`</span>customer_inf_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户信息表'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>customer_inf<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_inf_id<span class="token punctuation">`</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>identity_card_type<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>identity_card_no<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>mobile_phone<span class="token punctuation">`</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>customer_email<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>gender<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_point<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>register_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>birthday<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_level<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>user_money<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'管理员'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'+86 13700001111'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'用户'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'+86 18800001111'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'超级管理员'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'+86 18822223333'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'测试'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">'+86 18844445555'</span><span class="token punctuation">,</span> <span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>customer_level_inf<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_level<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'会员级别ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>level_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'会员级别名称'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 积分上下线，使用无符号标识，无符号数值的上限为2^32</span> <span class="token punctuation">`</span>min_point<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'该级别最低积分'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>max_point<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'该级别最高积分'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_levelid<span class="token punctuation">(</span><span class="token punctuation">`</span>customer_level<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户级别信息表'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>customer_level_inf<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_level<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>level_name<span class="token punctuation">`</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>min_point<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>max_point<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'普通会员'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'青铜会员'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'白银会员'</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">499</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'黄金会员'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'钻石会员'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>customer_addr<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_addr_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'自增主键ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'customer_login表的自增ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>zip<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮编'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'地区表中的省份ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'地区表中的城市ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>district<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'地区表中的区ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'具体的地址门牌号'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>is_default<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否默认：1 默认，0 不默认'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_customeraddrid<span class="token punctuation">(</span><span class="token punctuation">`</span>customer_addr_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户地址表'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>customer_addr<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>customer_addr_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>zip<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>province<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>city<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>district<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>is_default<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'湄浦路310弄B栋405室'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'大柏树凉城四村100栋301室'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'长逸路15号复旦软件园B栋1111室'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>customer_point_log<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>point_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'积分日志ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>source<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'积分来源：0 订单，1 登录，2 活动'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>refer_number<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'积分来源相关编号'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 变更积分可能为负值，因此为有符号数，有符号数的范围为 -2^31 ~ 2^31-1</span> <span class="token punctuation">`</span>change_point<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'变更积分数'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'积分日志生成时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_pointid<span class="token punctuation">(</span><span class="token punctuation">`</span>point_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'用户积分日志表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>customer_balance_log<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>balance_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'余额日志ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>source<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'记录来源：1 订单，2 退货单'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>source_sn<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'相关单据ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>create_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'记录生成时间'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>amount<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0.00</span> <span class="token keyword">COMMENT</span> <span class="token string">'变动金额'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_blanceid <span class="token punctuation">(</span><span class="token punctuation">`</span>balance_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户余额变动表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>customer_login_log<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">-- 分区表不建议创建主键，因为主键会创建一个唯一性全局索引，在 drop 分区表时会使索引失效，导致数据无法入库。</span> <span class="token comment" spellcheck="true">-- login_id INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '登录日志ID',</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录用户ID'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">-- 用户登录只有登录时间，因此不设置修改时间</span> <span class="token punctuation">`</span>login_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户登录时间'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>login_ip<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录IP'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>login_type<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录类型：0 未成功，1 成功'</span> <span class="token comment" spellcheck="true">-- PRIMARY KEY pk_loginid (login_id)</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户登录日志表'</span><span class="token comment" spellcheck="true">-- 对用户登录日志表进行分区，规则为 login_time 以年为范围分区，这样方便对用户登录日志做归档及删除操作</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span>UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token punctuation">`</span>login_time<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2018-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2019-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span>UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token string">'2020-01-01 00:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>customer_login_log<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>login_time<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>login_ip<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>login_type<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2015-01-02'</span><span class="token punctuation">,</span>INET_ATON<span class="token punctuation">(</span><span class="token string">'192.168.10.101'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2018-01-02'</span><span class="token punctuation">,</span>INET_ATON<span class="token punctuation">(</span><span class="token string">'192.168.10.102'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2019-01-02'</span><span class="token punctuation">,</span>INET_ATON<span class="token punctuation">(</span><span class="token string">'192.168.10.103'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2017-01-02'</span><span class="token punctuation">,</span>INET_ATON<span class="token punctuation">(</span><span class="token string">'192.168.10.101'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'2019-01-02'</span><span class="token punctuation">,</span>INET_ATON<span class="token punctuation">(</span><span class="token string">'192.168.10.102'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Init-Product"><a href="#Init-Product" class="headerlink" title="Init Product"></a>Init Product</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>brand_info<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>brand_id<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>brand_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌名称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>telephone<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'联系电话'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>brand_web<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌网站'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>brand_logo<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌LOGO'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>brand_desc<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌描述'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>brand_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌状态：0 禁用，1 启用'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>brand_order<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'排序'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_brandid<span class="token punctuation">(</span><span class="token punctuation">`</span>brand_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌信息表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>product_category<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类名称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>parent_id<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'父分类ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_level<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类层级'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类状态'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_categoryid<span class="token punctuation">(</span><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品分类表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>supplier_info<span class="token punctuation">`</span><span class="token punctuation">(</span> <span class="token punctuation">`</span>supplier_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>supplier_code<span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商编码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>supplier_name<span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商名称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>supplier_type<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商类型：1 自营，2 平台'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>link_man<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商联系人'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>phone_number<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'联系电话'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>bank_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商开户银行名称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>bank_account<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'银行账号'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>address<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商地址'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>supplier_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'状态：0 禁用，1 启用'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_supplierid<span class="token punctuation">(</span><span class="token punctuation">`</span>supplier_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">COMMENT</span> <span class="token string">'供应商信息表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>product_info<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>product_code<span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品编码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>product_name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>bar_code<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'条形码'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>brand_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'品牌表的ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>one_category_id<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'一级分类ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>two_category_id<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'二级分类ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>three_category_id<span class="token punctuation">`</span> <span class="token keyword">SMALLINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'三级分类ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>supplier_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品的供应商ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>price<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品销售价格'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>average_cose<span class="token punctuation">`</span> <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品加权平均成本'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>publish_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'上下架状态：0 下架，1 上架'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>audit_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'审核状态：0 未审核，1 已审核'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>weight<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品重量'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>length<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token keyword">COMMENT</span> <span class="token string">'商量长度'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>height<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品高度'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>width<span class="token punctuation">`</span> <span class="token keyword">FLOAT</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品宽度'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>color_type<span class="token punctuation">`</span> <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">'红'</span><span class="token punctuation">,</span><span class="token string">'黄'</span><span class="token punctuation">,</span><span class="token string">'绿'</span><span class="token punctuation">,</span><span class="token string">'紫'</span><span class="token punctuation">,</span><span class="token string">'蓝'</span><span class="token punctuation">,</span><span class="token string">'白'</span><span class="token punctuation">,</span><span class="token string">'黑'</span><span class="token punctuation">,</span><span class="token string">'粉'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>production_date<span class="token punctuation">`</span> <span class="token keyword">DATETIME</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'生产日期'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>shelf_life<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品有效期'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>descript<span class="token punctuation">`</span> <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品描述'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>indate<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品录入时间'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_productid<span class="token punctuation">(</span><span class="token punctuation">`</span>product_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品信息表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>product_pic_info<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>product_pic_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品图片ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pic_desc<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'图片描述'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pic_url<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'图片url'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>is_master<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'是否主图：0 非主图，1 主图'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pic_order<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'图片排序'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pic_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span> <span class="token keyword">COMMENT</span> <span class="token string">'图片是否有效：0 无效，1 有效'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_picid<span class="token punctuation">(</span><span class="token punctuation">`</span>product_pic_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品图片信息表'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>product_comment<span class="token punctuation">`</span> <span class="token punctuation">(</span> <span class="token punctuation">`</span>comment_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token keyword">AUTO_INCREMENT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>product_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>order_id<span class="token punctuation">`</span> <span class="token keyword">BIGINT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'订单ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>customer_id<span class="token punctuation">`</span> <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户ID'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论标题'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论内容'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>audit_status<span class="token punctuation">`</span> <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'审核状态：0 未审核，1 已审核'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>audit_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'评论时间'</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>modified_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'最后修改时间'</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> pk_commentid<span class="token punctuation">(</span><span class="token punctuation">`</span>comment_id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品评论表'</span><span class="token punctuation">;</span></code></pre><h2 id="Init-Order"><a href="#Init-Order" class="headerlink" title="Init Order"></a>Init Order</h2><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE `order_master`( `order_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '订单ID', `order_sn` BIGINT UNSIGNED NOT NULL COMMENT '订单编号 yyyymmddnnnnnn', `customer_id` INT UNSIGNED NOT NULL COMMENT '下单人ID', `shipping_user` VARCHAR(10) NOT NULL COMMENT '收货人姓名', `province` SMALLINT NOT NULL COMMENT '省', `city` SMALLINT NOT NULL COMMENT '市', `district` SMALLINT NOT NULL COMMENT '区', `address` VARCHAR(200) NOT NULL COMMENT '地址', `payment_method` TINYINT NOT NULL COMMENT '支付方式：1 现金，2 余额，3 网银，4 支付宝，5 微信', `order_money` DECIMAL(8,2) NOT NULL COMMENT '订单金额', `district_monry` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT '优惠金额', `shipping_money` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT '运费金额', `payment_money` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT '支付金额', `shipping_comp_name` VARCHAR(10) NOT NULL COMMENT '快递公司名称', `shipping_sn` VARCHAR(50) NOT NULL COMMENT '快递单号', `create_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '下单时间', `shipping_time` DATETIME COMMENT '发货时间', `pay_time` DATETIME COMMENT '支付时间', `receive_time` DATETIME COMMENT '收货时间', `order_status` TINYINT NOT NULL DEFAULT 0 COMMENT '订单状态', `order_point` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT '订单积分', `invoice_title` VARCHAR(100) NOT NULL COMMENT '发票抬头', `modified_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后修改时间', PRIMARY KEY pk_orderid(`order_id`)) ENGINE = INNODB COMMENT '订单主表';CREATE TABLE `order_detail`( `order_detail_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '订单详情ID', `order_id` INT UNSIGNED NOT NULL COMMENT '订单表ID', `product_id` INT UNSIGNED NOT NULL COMMENT '订单商品ID', `product_name` VARCHAR(50) NOT NULL COMMENT '商品名称', `product_cnt` INT UNSIGNED NOT NULL DEFAULT 1 COMMENT '购买商品数量', `product_price` DECIMAL(8,2) NOT NULL COMMENT '购买商品单价', `average_cost` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT '平均成本价格', `weight` FLOAT COMMENT '商品重量', `fee_money` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT '优惠分摊金额', `w_id` INT UNSIGNED NOT NULL COMMENT '仓库ID', `modified_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后修改时间', PRIMARY KEY pk_orderdetailid(`order_detail_id`)) ENGINE = INNODB COMMENT '订单详情表';CREATE TABLE `order_cart`( `cart_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '购物车ID', `customer_id` INT UNSIGNED NOT NULL COMMENT '用户ID', `product_id` INT UNSIGNED NOT NULL COMMENT '商品ID', `product_amount` INT UNSIGNED NOT NULL COMMENT '加入购物车商品数量', `price` DECIMAL(8,2) NOT NULL COMMENT '商品价格', `add_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '加入购物车时间', `modified_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后修改时间', PRIMARY KEY pk_cartid(`cart_id`)) ENGINE = INNODB COMMENT '购物车表';CREATE TABLE `warehouse_info`( `w_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '仓库ID', `warehouse_sn` CHAR(5) NOT NULL COMMENT '仓库编码', `warehouse_name` VARCHAR(10) NOT NULL COMMENT '仓库名称', `warehouse_phone` VARCHAR(20) NOT NULL COMMENT '仓库电话', `contact` VARCHAR(10) NOT NULL COMMENT '仓库联系人', `province` SMALLINT NOT NULL COMMENT '省', `city` SMALLINT NOT NULL COMMENT '市', `district` SMALLINT NOT NULL COMMENT '区', `address` VARCHAR(200) NOT NULL COMMENT '仓库地址', `warehouse_status` TINYINT NOT NULL DEFAULT 1 COMMENT '仓库状态：0 禁用，1 启用', `modified_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后修改时间', PRIMARY KEY pk_wid(`w_id`)) ENGINE = INNODB COMMENT '仓库信息表';CREATE TABLE `warehouse_product`( `wp_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '商品库存ID', `product_id` INT UNSIGNED NOT NULL COMMENT '商品ID', `w_id` INT UNSIGNED NOT NULL COMMENT '仓库ID', `current_cnt` INT NOT NULL DEFAULT 0 COMMENT '当前商品数量', `lock_cnt` INT NOT NULL DEFAULT 0 COMMENT '当前占用数据', `in_transit_cnt` INT NOT NULL DEFAULT 0 COMMENT '在途数据', `average_cost` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT '移动加权成本', `modified_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后修改时间', PRIMARY KEY pk_wpid(`wp_id`)) ENGINE = INNODB COMMENT '商品库存表';CREATE TABLE `shipping_info`( `ship_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '物流公司ID', `ship_name` VARCHAR(20) NOT NULL COMMENT '物流公司名称', `ship_contact` VARCHAR(20) NOT NULL COMMENT '物流公司联系人', `telphone` VARCHAR(20) NOT NULL COMMENT '物流公司联系电话', `price` DECIMAL(8,2) NOT NULL DEFAULT 0.00 COMMENT '配送价格', `modified_time` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后修改时间', PRIMARY KEY pk_shipid(`ship_id`)) ENGINE = INNODB COMMENT '物流公司信息表';</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/11.MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/11.MySQL%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ol><li><p>检查 MySQL 数据库存放目录</p><ol><li><p>进入MySQL，执行 `show variables like ‘%dir%’</p></li><li><pre class=" language-text"><code class="language-text">+-----------------------------------------+----------------------------+| Variable_name                           | Value                      |+-----------------------------------------+----------------------------+| basedir                                 | /usr/                      || binlog_direct_non_transactional_updates | OFF                        || character_sets_dir                      | /usr/share/mysql/charsets/ || datadir                                 | /var/lib/mysql/            || ignore_db_dirs                          |                            || innodb_data_home_dir                    |                            || innodb_log_group_home_dir               | ./                         || innodb_max_dirty_pages_pct              | 75.000000                  || innodb_max_dirty_pages_pct_lwm          | 0.000000                   || innodb_tmpdir                           |                            || innodb_undo_directory                   | ./                         || lc_messages_dir                         | /usr/share/mysql/          || plugin_dir                              | /usr/lib/mysql/plugin/     || slave_load_tmpdir                       | /tmp                       || tmpdir                                  | /tmp                       |+-----------------------------------------+----------------------------+</code></pre></li><li><p>其中 datadir 为 具体存储路径</p></li></ol></li><li><p>使用命令导入 sql</p><ol><li>创建数据库：<code>mysql -u root -p -e &#39;create database mc_user&#39;</code></li><li>导入当前目录下的sql文件：<code>mysql -u root -p mc_user &lt; mc_user.sql</code></li></ol></li><li><p>1.如果文件比较小的话，使用 vim 直接查看 </p><p>2.如果想要查看正在滚动的日志文件。<br>tail -f<br>Ctrl + c 终止 tail 命令<br>Ctrl + s 暂停 tail 命令<br>Ctrl + q 继续 tail 命令</p><p>\3. 如果文件比较大的话，可以使用 less 命令。<br>shift + f(即 F) less 查看滚动的命令，实现效果类似 tail -f 效果<br>Ctrl + c 退出滚动模式。</p><p>\4. 如果你已经知道日志输出的关键字的话，使用 grep , 通常需要打印关键字前后的日志。</p><p>grep ‘key word’ log.txt -A 20 列出包括匹配行之后 20 的行。<br>grep ‘key word’ log.txt -B 20 列出包括匹配行之前 20 的行。<br>grep ‘key word’ log.txt -C 20 列出包括匹配行前后各 20 行。</p><p>\5. 有时候需要将 tail 和 less 命令结合起来使用</p><p>tail -n +10000 | less 多第 10000 开始,使用 less 查看  </p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B/2.%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B/2.%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 递归测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Recursion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> l1 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">forEach</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l2 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l3 <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sum2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * for循环     *     * @param arr 需循环的数组     * @return 结果和     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 线性递归     *     * @param arr   需递归的数组     * @param value 当前递归的下标     * @return 结果和     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> value <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 二分递归     *     * @param arr  需递归的数组     * @param low  低值下标     * @param high 高值下标     * @return 结果和     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">==</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">sum2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> middle<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sum2</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B/1.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E3%80%8B/1.%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p>常见的大O运行时间</p><ol><li>O(log n) ：对数时间，如二分查找</li><li>O(n) ：线性时间，如简单查找</li><li>O(n * log n) ：包括快速排序— 一种速度较快的排序算法</li><li>O(n^2) ：包括选择排序 — 一种速度较慢的排序算法</li><li>O(n!) ：包括旅行商问题的解决方案 — 一种非常慢的算法</li></ol><p>选择排序：</p><p>​    算法时间复杂度为 O(n)</p><p>​    例如将数组从小到大排序，每一次遍历都取出最小的值，然后依次将最小值插入新数组中</p><p>递归：</p><pre><code> 1. 递归是指自己调用自己的函数 2. 每个递归函数都有两个条件：基线条件和递归条件 3. 栈有两种操作：压入和弹出 4. 所有函数的调用都进入调用栈 5. 调用栈可能很长，这将占用大量的内存（可以使用尾递归优化）</code></pre><p>尾递归：</p><p>​    即递归调用在整个函数体的最末尾处执行，且它的返回值不属于表达式的一部分</p><p>​    优势在于，当编译器检测到一个函数调用是尾递归时，他就覆盖当前的活动记录而不是在栈中新创建新的</p><p>研究一下旅行商问题的几种算法：</p><p>​    分支定界法、线性规划法、动态规划法；遗传算法、模拟退火法、蚁群算法、禁忌搜索算法、贪婪算法、神经网络等</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/9.%E6%97%A5%E5%BF%97/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/9.%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/8.%E7%BD%91%E7%BB%9C/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/8.%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/7.Netty%E4%B8%8ERPC/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/7.Netty%E4%B8%8ERPC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/6.%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/6.%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-微服务"><a href="#第六章-微服务" class="headerlink" title="第六章 微服务"></a>第六章 微服务</h1><h2 id="一、服务注册与发现"><a href="#一、服务注册与发现" class="headerlink" title="一、服务注册与发现"></a>一、服务注册与发现</h2><h2 id="二、API-网关"><a href="#二、API-网关" class="headerlink" title="二、API 网关"></a>二、API 网关</h2><h2 id="三、配置中心"><a href="#三、配置中心" class="headerlink" title="三、配置中心"></a>三、配置中心</h2><h2 id="四、事件调度"><a href="#四、事件调度" class="headerlink" title="四、事件调度"></a>四、事件调度</h2><h2 id="五、服务跟踪"><a href="#五、服务跟踪" class="headerlink" title="五、服务跟踪"></a>五、服务跟踪</h2><h2 id="六、服务熔断"><a href="#六、服务熔断" class="headerlink" title="六、服务熔断"></a>六、服务熔断</h2><h2 id="七、API-管理"><a href="#七、API-管理" class="headerlink" title="七、API 管理"></a>七、API 管理</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/4.Java%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/4.Java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-Java-基础"><a href="#第四章-Java-基础" class="headerlink" title="第四章 Java 基础"></a>第四章 Java 基础</h1><h2 id="一、Java-异常分类及处理"><a href="#一、Java-异常分类及处理" class="headerlink" title="一、Java 异常分类及处理"></a>一、Java 异常分类及处理</h2><h2 id="二、Java-反射"><a href="#二、Java-反射" class="headerlink" title="二、Java 反射"></a>二、Java 反射</h2><h2 id="三、Java-注解"><a href="#三、Java-注解" class="headerlink" title="三、Java 注解"></a>三、Java 注解</h2><h2 id="四、Java-内部类"><a href="#四、Java-内部类" class="headerlink" title="四、Java 内部类"></a>四、Java 内部类</h2><h2 id="五、Java-泛型"><a href="#五、Java-泛型" class="headerlink" title="五、Java 泛型"></a>五、Java 泛型</h2><h2 id="六、Java-序列化"><a href="#六、Java-序列化" class="headerlink" title="六、Java 序列化"></a>六、Java 序列化</h2><h2 id="七、Java-复制"><a href="#七、Java-复制" class="headerlink" title="七、Java 复制"></a>七、Java 复制</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/5.Spring%E5%8E%9F%E7%90%86/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/5.Spring%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-Spring-原理"><a href="#第五章-Spring-原理" class="headerlink" title="第五章 Spring 原理"></a>第五章 Spring 原理</h1><h2 id="一、Spring-特性"><a href="#一、Spring-特性" class="headerlink" title="一、Spring 特性"></a>一、Spring 特性</h2><h2 id="二、Spring-核心组件"><a href="#二、Spring-核心组件" class="headerlink" title="二、Spring 核心组件"></a>二、Spring 核心组件</h2><h2 id="三、Spring-常用模块"><a href="#三、Spring-常用模块" class="headerlink" title="三、Spring 常用模块"></a>三、Spring 常用模块</h2><h2 id="四、Spring-主要包"><a href="#四、Spring-主要包" class="headerlink" title="四、Spring 主要包"></a>四、Spring 主要包</h2><h2 id="五、Spring-常用注解"><a href="#五、Spring-常用注解" class="headerlink" title="五、Spring 常用注解"></a>五、Spring 常用注解</h2><h2 id="六、Spring-第三方结合"><a href="#六、Spring-第三方结合" class="headerlink" title="六、Spring 第三方结合"></a>六、Spring 第三方结合</h2><h2 id="七、Spring-IOC-原理"><a href="#七、Spring-IOC-原理" class="headerlink" title="七、Spring IOC 原理"></a>七、Spring IOC 原理</h2><h2 id="八、Spring-AOP-原理"><a href="#八、Spring-AOP-原理" class="headerlink" title="八、Spring AOP 原理"></a>八、Spring AOP 原理</h2><h2 id="九、Spring-MVC-原理"><a href="#九、Spring-MVC-原理" class="headerlink" title="九、Spring MVC 原理"></a>九、Spring MVC 原理</h2><h2 id="十、Spring-Boot-原理"><a href="#十、Spring-Boot-原理" class="headerlink" title="十、Spring Boot 原理"></a>十、Spring Boot 原理</h2><h2 id="十一、-JPA-原理"><a href="#十一、-JPA-原理" class="headerlink" title="十一、 JPA 原理"></a>十一、 JPA 原理</h2><h2 id="十二、Mybatis-缓存"><a href="#十二、Mybatis-缓存" class="headerlink" title="十二、Mybatis 缓存"></a>十二、Mybatis 缓存</h2><h2 id="十三、Tomcat-架构"><a href="#十三、Tomcat-架构" class="headerlink" title="十三、Tomcat 架构"></a>十三、Tomcat 架构</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/3.Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/3.Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-JAVA-多线程并发"><a href="#第三章-JAVA-多线程并发" class="headerlink" title="第三章 JAVA 多线程并发"></a>第三章 JAVA 多线程并发</h1><h2 id="一、Java-并发知识库"><a href="#一、Java-并发知识库" class="headerlink" title="一、Java 并发知识库"></a>一、Java 并发知识库</h2><h2 id="二、Java-线程实现-创建方法"><a href="#二、Java-线程实现-创建方法" class="headerlink" title="二、Java 线程实现/创建方法"></a>二、Java 线程实现/创建方法</h2><h2 id="三、四种线程池"><a href="#三、四种线程池" class="headerlink" title="三、四种线程池"></a>三、四种线程池</h2><h2 id="四、线程的生命周期"><a href="#四、线程的生命周期" class="headerlink" title="四、线程的生命周期"></a>四、线程的生命周期</h2><h2 id="五、终止线程的四种方式"><a href="#五、终止线程的四种方式" class="headerlink" title="五、终止线程的四种方式"></a>五、终止线程的四种方式</h2><h2 id="六、sleep-与-wait-的区别"><a href="#六、sleep-与-wait-的区别" class="headerlink" title="六、sleep 与 wait 的区别"></a>六、sleep 与 wait 的区别</h2><h2 id="七、start-与-run-的区别"><a href="#七、start-与-run-的区别" class="headerlink" title="七、start 与 run 的区别"></a>七、start 与 run 的区别</h2><h2 id="八、Java-后台线程"><a href="#八、Java-后台线程" class="headerlink" title="八、Java 后台线程"></a>八、Java 后台线程</h2><h2 id="九、Java-中的锁"><a href="#九、Java-中的锁" class="headerlink" title="九、Java 中的锁"></a>九、Java 中的锁</h2><h2 id="十、线程的基本方法"><a href="#十、线程的基本方法" class="headerlink" title="十、线程的基本方法"></a>十、线程的基本方法</h2><h2 id="十一、线程上下文切换"><a href="#十一、线程上下文切换" class="headerlink" title="十一、线程上下文切换"></a>十一、线程上下文切换</h2><h2 id="十二、同步锁与死锁"><a href="#十二、同步锁与死锁" class="headerlink" title="十二、同步锁与死锁"></a>十二、同步锁与死锁</h2><h2 id="十三、线程池原理"><a href="#十三、线程池原理" class="headerlink" title="十三、线程池原理"></a>十三、线程池原理</h2><h2 id="十四、Java-阻塞队列原理"><a href="#十四、Java-阻塞队列原理" class="headerlink" title="十四、Java 阻塞队列原理"></a>十四、Java 阻塞队列原理</h2><h2 id="十五、volatile-关键字的作用"><a href="#十五、volatile-关键字的作用" class="headerlink" title="十五、volatile 关键字的作用"></a>十五、volatile 关键字的作用</h2><h2 id="十六、CyclicBarrier、CountDownLatch、Semaphore-的用法"><a href="#十六、CyclicBarrier、CountDownLatch、Semaphore-的用法" class="headerlink" title="十六、CyclicBarrier、CountDownLatch、Semaphore 的用法"></a>十六、CyclicBarrier、CountDownLatch、Semaphore 的用法</h2><h2 id="十七、线程共享数据"><a href="#十七、线程共享数据" class="headerlink" title="十七、线程共享数据"></a>十七、线程共享数据</h2><h2 id="十八、ThreadLocal-的作用"><a href="#十八、ThreadLocal-的作用" class="headerlink" title="十八、ThreadLocal 的作用"></a>十八、ThreadLocal 的作用</h2><h2 id="十九、synchronized-和-ReentrantLock-的区别"><a href="#十九、synchronized-和-ReentrantLock-的区别" class="headerlink" title="十九、synchronized 和 ReentrantLock 的区别"></a>十九、synchronized 和 ReentrantLock 的区别</h2><h2 id="二十、ConcurrentHashMap-并发"><a href="#二十、ConcurrentHashMap-并发" class="headerlink" title="二十、ConcurrentHashMap 并发"></a>二十、ConcurrentHashMap 并发</h2><h2 id="二十一、Java-中用到的线程调度"><a href="#二十一、Java-中用到的线程调度" class="headerlink" title="二十一、Java 中用到的线程调度"></a>二十一、Java 中用到的线程调度</h2><h2 id="二十二、线程调度算法"><a href="#二十二、线程调度算法" class="headerlink" title="二十二、线程调度算法"></a>二十二、线程调度算法</h2><h2 id="二十三、CAS"><a href="#二十三、CAS" class="headerlink" title="二十三、CAS"></a>二十三、CAS</h2><h2 id="二十四、AQS"><a href="#二十四、AQS" class="headerlink" title="二十四、AQS"></a>二十四、AQS</h2><p>以上章节多来自于 <a href="">《Java并发编程的艺术》</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/29.%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/29.%E4%BA%91%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/27.Yarn/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/27.Yarn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/28.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/28.%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/25.Spark/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/25.Spark/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/26.Storm/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/26.Storm/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/24.Hadoop/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/24.Hadoop/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/23.%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/23.%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/22.%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/22.%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/21.%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/21.%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/2.Java%E9%9B%86%E5%90%88/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/2.Java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-JAVA-集合"><a href="#第二章-JAVA-集合" class="headerlink" title="第二章 JAVA 集合"></a>第二章 JAVA 集合</h1><h2 id="一、接口继承关系和实现"><a href="#一、接口继承关系和实现" class="headerlink" title="一、接口继承关系和实现"></a>一、接口继承关系和实现</h2><h2 id="二、List-接口"><a href="#二、List-接口" class="headerlink" title="二、List 接口"></a>二、List 接口</h2><h2 id="三、Set-接口"><a href="#三、Set-接口" class="headerlink" title="三、Set 接口"></a>三、Set 接口</h2><h2 id="四、Map-接口"><a href="#四、Map-接口" class="headerlink" title="四、Map 接口"></a>四、Map 接口</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/20.%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/20.%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/18.Java%E7%AE%97%E6%B3%95/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/18.Java%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/17.%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/17.%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/19.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/19.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/15.Cassandra/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/15.Cassandra/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/14.HBase/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/14.HBase/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/12.RabbitMQ/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/12.RabbitMQ/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/13.MongoDB/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/13.MongoDB/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/10.Zookeeper/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/10.Zookeeper/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/11.Kafka/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/11.Kafka/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/1.JVM%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/1.JVM%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM-基础"><a href="#JVM-基础" class="headerlink" title="JVM 基础"></a>JVM 基础</h1><h2 id="一、线程"><a href="#一、线程" class="headerlink" title="一、线程"></a>一、线程</h2><h2 id="二、JVM-内存区域"><a href="#二、JVM-内存区域" class="headerlink" title="二、JVM 内存区域"></a>二、JVM 内存区域</h2><h3 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1. 程序计数器"></a>1. 程序计数器</h3><h3 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2. 虚拟机栈"></a>2. 虚拟机栈</h3><h3 id="3-本地方法区"><a href="#3-本地方法区" class="headerlink" title="3. 本地方法区"></a>3. 本地方法区</h3><h3 id="4-堆（Heap-线程共享）-运行时数据区"><a href="#4-堆（Heap-线程共享）-运行时数据区" class="headerlink" title="4. 堆（Heap-线程共享）- 运行时数据区"></a>4. 堆（Heap-线程共享）- 运行时数据区</h3><h3 id="5-方法区-永久代（线程共享）"><a href="#5-方法区-永久代（线程共享）" class="headerlink" title="5. 方法区/永久代（线程共享）"></a>5. 方法区/永久代（线程共享）</h3><h2 id="三、JVM-运行时内存"><a href="#三、JVM-运行时内存" class="headerlink" title="三、JVM 运行时内存"></a>三、JVM 运行时内存</h2><h3 id="1-新生代"><a href="#1-新生代" class="headerlink" title="1. 新生代"></a>1. 新生代</h3><h3 id="2-老年代"><a href="#2-老年代" class="headerlink" title="2. 老年代"></a>2. 老年代</h3><h3 id="3-永久代"><a href="#3-永久代" class="headerlink" title="3. 永久代"></a>3. 永久代</h3><h2 id="四、垃圾回收算法"><a href="#四、垃圾回收算法" class="headerlink" title="四、垃圾回收算法"></a>四、垃圾回收算法</h2><h3 id="1-如何确定垃圾"><a href="#1-如何确定垃圾" class="headerlink" title="1. 如何确定垃圾"></a>1. 如何确定垃圾</h3><h3 id="2-标记清除算法（Mark-Sweep）"><a href="#2-标记清除算法（Mark-Sweep）" class="headerlink" title="2. 标记清除算法（Mark-Sweep）"></a>2. 标记清除算法（Mark-Sweep）</h3><h3 id="3-复制算法（Copying）"><a href="#3-复制算法（Copying）" class="headerlink" title="3. 复制算法（Copying）"></a>3. 复制算法（Copying）</h3><h3 id="4-标记整理算法（Mark-Compact）"><a href="#4-标记整理算法（Mark-Compact）" class="headerlink" title="4. 标记整理算法（Mark-Compact）"></a>4. 标记整理算法（Mark-Compact）</h3><h3 id="5-分代收集算法"><a href="#5-分代收集算法" class="headerlink" title="5. 分代收集算法"></a>5. 分代收集算法</h3><h2 id="五、Java中的四种引用类型"><a href="#五、Java中的四种引用类型" class="headerlink" title="五、Java中的四种引用类型"></a>五、Java中的四种引用类型</h2><h3 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1. 强引用"></a>1. 强引用</h3><h3 id="2-软引用"><a href="#2-软引用" class="headerlink" title="2. 软引用"></a>2. 软引用</h3><h3 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3. 弱引用"></a>3. 弱引用</h3><h3 id="4-虚引用"><a href="#4-虚引用" class="headerlink" title="4. 虚引用"></a>4. 虚引用</h3><h3 id="六、GC分代收集算法-VS-分区收集算法"><a href="#六、GC分代收集算法-VS-分区收集算法" class="headerlink" title="六、GC分代收集算法 VS 分区收集算法"></a>六、GC分代收集算法 VS 分区收集算法</h3><h2 id="七、GC垃圾收集器"><a href="#七、GC垃圾收集器" class="headerlink" title="七、GC垃圾收集器"></a>七、GC垃圾收集器</h2><h2 id="八、JAVA-IO-NIO"><a href="#八、JAVA-IO-NIO" class="headerlink" title="八、JAVA IO/NIO"></a>八、JAVA IO/NIO</h2><h2 id="九、JVM-类加载机制"><a href="#九、JVM-类加载机制" class="headerlink" title="九、JVM 类加载机制"></a>九、JVM 类加载机制</h2><h2 id="十、类加载器"><a href="#十、类加载器" class="headerlink" title="十、类加载器"></a>十、类加载器</h2><h2 id="十一、双亲委派"><a href="#十一、双亲委派" class="headerlink" title="十一、双亲委派"></a>十一、双亲委派</h2><h2 id="十二、OSGI（动态模型系统）"><a href="#十二、OSGI（动态模型系统）" class="headerlink" title="十二、OSGI（动态模型系统）"></a>十二、OSGI（动态模型系统）</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E3%80%8B/Readme/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E3%80%8B/Readme/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E3%80%8B/1.GarbageFirst/"/>
      <url>/2019/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%8C%87%E5%8D%97%E3%80%8B/1.GarbageFirst/</url>
      
        <content type="html"><![CDATA[<h1 id="Garbage-First-G1垃圾收集器"><a href="#Garbage-First-G1垃圾收集器" class="headerlink" title="Garbage First(G1垃圾收集器)"></a>Garbage First(G1垃圾收集器)</h1><p>串行GC：内存占用空间以及并发开销最小化</p><p>并行GC：应用吞吐量最大化</p><p>并发标记清除GC(CMS)：GC相关中断时间最小化</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/9%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/9%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 移动零 * &lt;p> * 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 * &lt;p> * 示例: * &lt;p> * 输入: [0,1,0,3,12] * 输出: [1,3,12,0,0] * 说明: * &lt;p> * 必须在原数组上操作，不能拷贝额外的数组。 * 尽量减少操作次数。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Nine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">moveZeroes1</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *  直接遍历数组，将不为0的元素依次排序，剩余的元素标记为0即可。     *  这种方法的执行次数较少，不关注移动元素的过程，只关注最终结果     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *  从后向前遍历，记录出现0前的位数，将后几位依次前移     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">moveZeroes1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> count<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                count <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                count <span class="token operator">++</span> <span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/8%E5%8A%A0%E4%B8%80/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/8%E5%8A%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  加一 * * 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。 * * 最高位数字存放在数组的首位， 数组中每个元素只存储一个数字。 * * 你可以假设除了整数 0 之外，这个整数不会以零开头。 * * 示例 1: * * 输入: [1,2,3] * 输出: [1,2,4] * 解释: 输入数组表示数字 123。 * 示例 2: * * 输入: [4,3,2,1] * 输出: [4,3,2,2] * 解释: 输入数组表示数字 4321。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Eight</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intersect <span class="token operator">=</span> <span class="token function">plusOne</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> intersect<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *  只有当所有数字都是9时，才会产生进位；即第[0]位在运算后为0     *  如果任一位不为0，则加一返回     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digits <span class="token operator">==</span> null <span class="token operator">||</span> digits<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> digits<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> digits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> digits<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            digits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>digits<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> digits<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/7%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/7%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 两个数组的交集 II * * 给定两个数组，编写一个函数来计算它们的交集。 * * 示例 1: * * 输入: nums1 = [1,2,2,1], nums2 = [2,2] * 输出: [2,2] * 示例 2: * * 输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4] * 输出: [4,9] * 说明： * * 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。 * 我们可以不考虑输出结果的顺序。 * 进阶: * * 如果给定的数组已经排好序呢？你将如何优化你的算法？ * 如果 nums1 的大小比 nums2 小很多，哪种方法更优？ * 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Seven</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intersect <span class="token operator">=</span> <span class="token function">intersect</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> intersect<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法共执行了："</span><span class="token operator">+</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用集合的特性     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums1 <span class="token operator">==</span> null <span class="token operator">||</span> nums2 <span class="token operator">==</span> null <span class="token operator">||</span> nums1<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> nums2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>                integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>integers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> integers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>point<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> integer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 效率高于第一种方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 先将数组排序，数组将按照从小到大的顺序排列</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义下标指针</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个数组，长度为小数组的长度</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length <span class="token operator">></span> nums2<span class="token punctuation">.</span>length <span class="token operator">?</span> nums2<span class="token punctuation">.</span>length <span class="token operator">:</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 两个数组同时遍历，比较 i与j所在的值，只会有三种情况：大、小、等</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 等于则保存起来，i,j 向前+1</span>                result<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// i&lt;j i向前+1</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/6%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/6%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 只出现一次的数字 *  * &lt;p> * 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 * &lt;p> * 说明： * 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ * &lt;p> * 示例 1: * &lt;p> * 输入: [2,2,1] * 输出: 1 * 示例 2: * &lt;p> * 输入: [4,1,2,1,2] * 输出: 4 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Six</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">singleNumber</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">singleNumber</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用异或的方式，取出唯一不同的那个值     * eg : 20 ^ 18 ^ 3     *     = 10100 ^ 10010 ^ 00011     *     = 00101     *     = 5     * 即 : 20 ^ 20 ^ 3     *     = 10100 ^ 10100 ^ 00011     *     = 00011     *     = 3     * 可以得出： [a,b,a,c,b]     *      = a ^ a ^ b ^ b ^ c     *      = c     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> result <span class="token operator">^</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/5%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/5%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 存在重复 *  * &lt;p> * 给定一个整数数组，判断是否存在重复元素。 * &lt;p> * 如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。 * &lt;p> * 示例 1: * &lt;p> * 输入: [1,2,3,1] * 输出: true * 示例 2: * &lt;p> * 输入: [1,2,3,4] * 输出: false * 示例 3: * &lt;p> * 输入: [1,1,1,3,3,4,3,2,4,2] * 输出: true */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Five</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">containsDuplicate</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">containsDuplicate</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 先排序，再比较前后两个值     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/4%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/4%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 旋转数组 *  * 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 * &lt;p> * 示例 1: * &lt;p> * 输入: [1,2,3,4,5,6,7] 和 k = 3 * 输出: [5,6,7,1,2,3,4] * 解释: * 向右旋转 1 步: [7,1,2,3,4,5,6] * 向右旋转 2 步: [6,7,1,2,3,4,5] * 向右旋转 3 步: [5,6,7,1,2,3,4] * 示例 2: * &lt;p> * 输入: [-1,-100,3,99] 和 k = 2 * 输出: [3,99,-1,-100] * 解释: * 向右旋转 1 步: [99,-1,-100,3] * 向右旋转 2 步: [3,99,-1,-100] * 说明: * &lt;p> * 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。 * 要求使用空间复杂度为 O(1) 的原地算法。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Four</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">rotate</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 1. 倒置所有的元素     * 2. 倒置 前k个元素     * 3. 倒置 nums.length - k 个元素     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果不能翻转，直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> k <span class="token operator">></span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> k <span class="token operator">%=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右移次数大于所有元素个数，直接取余即可</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>begin<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            begin<span class="token operator">++</span><span class="token punctuation">;</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/3/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/3/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 阿里巴巴 Java 开发手册： *  不要在 foreach 循环中进行元素的 remove/add 操作。 remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Three</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println(filter(list)); // false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">filter2</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">filter3</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * fail-fast 快速错误机制所检查出来的错误     *  增强 for 循环其实相当于做了一次 iterator，且在执行 iterator() 方法时，就已经确定了循环的次数     *  但是 remove/add 操作，修改了集合的个数，导致集合个数与循环次数不匹配，进而抛出异常     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> input<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// throw Exception : java.util.ConcurrentModificationException</span>                input<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> input<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filter2</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> input<span class="token punctuation">)</span><span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接使用 Iterator 的 remove() 方法，能够直接修改循环次数，所以不会发生异常</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> input<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">filter3</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> input<span class="token punctuation">)</span><span class="token punctuation">{</span>        input<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>val <span class="token operator">-</span><span class="token operator">></span> val<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> input<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 还有一种解决方式，就是在 foreach 循环中，使用break跳出循环     * 即当满足条件后，不执行下一个 next() 方法，也就不会触发异常     */</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/2%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/2%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数组(二)：买卖股票的最佳时机 II * * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 * * 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 * * 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 * * 示例 1: * * 输入: [7,1,5,3,6,4] * 输出: 7 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 *      随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。 * 示例 2: * * 输入: [1,2,3,4,5] * 输出: 4 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 *      注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 *      因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。 * 示例 3: * * 输入: [7,6,4,3,1] * 输出: 0 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Two</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">greed</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">greed</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">greed</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 贪婪算法：不从整体最优上考虑，只考虑当前最优。使用前需要考虑是否满足无后效性     * 如我们花钱时的找零， 100 - 3 = 50 + 20 * 2 + 5 + 1 * 2     *  在本题中，表现为：     *   如果第二天大于第一天收益，则算作收益     *     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">greed</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面是 <code>LeetCode</code> 上执行用时最少的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> valley <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> peak <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxprofit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            valley <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> prices<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            peak <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            maxprofit <span class="token operator">+=</span> peak <span class="token operator">-</span> valley<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxprofit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/1%E4%BB%8E%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/1%E4%BB%8E%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="从排序数组中删除重复项"><a href="#从排序数组中删除重复项" class="headerlink" title="从排序数组中删除重复项"></a>从排序数组中删除重复项</h1><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/%E4%BB%8E%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E9%A1%B9.jpg" alt="解题思路"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 数组(一)：从排序数组中删除重复项 * 给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 * &lt;p> * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 * &lt;p> * 示例 1: * &lt;p> * 给定数组 nums = [1,1,2], * &lt;p> * 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 * &lt;p> * 你不需要考虑数组中超出新长度后面的元素。 * 示例 2: * &lt;p> * 给定 nums = [0,0,1,1,1,2,2,3,3,4], * &lt;p> * 函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。 * &lt;p> * 你不需要考虑数组中超出新长度后面的元素。 * 说明: * &lt;p> * 为什么返回数值是整数，但输出的答案是数组呢? * &lt;p> * 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 * &lt;p> * 你可以想象内部操作如下: * &lt;p> * // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝 * int len = removeDuplicates(nums); * &lt;p> * // 在函数里修改输入数组对于调用者是可见的。 * // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。 * for (int i = 0; i &lt; len; i++) { * print(nums[i]); * } */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">One</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">distinct</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">distinct</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用快慢指针算法：     *  i 为快指针，不停向前增长，遍历数组     *  j 为慢指针，当 nums[i] != nums[j] 时，j向前加一，且将 nums[i] 赋值给 nums[j]     * eg:     *  测试参数：[1,1,2]     *  第一次循环：i=0,j=0 ; nums[i] == nums[j] => [1,1,2]     *  第二次循环：i=1,j=0 ; nums[j] == nums[i] => [1,1,2]     *  第三次循环：i=2,j=0 ; nums[j] != nums[i] => [1,2,1] (此时nums[0]与nums[1]已经进行了交换)     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面是 <code>LeetCode</code> 上执行用时最短的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span><span class="token operator">++</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/11%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/11%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="11-旋转图像"><a href="#11-旋转图像" class="headerlink" title="11.旋转图像"></a>11.旋转图像</h1><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F.jpg" alt="解题思路"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 旋转图像 * &lt;p> * 给定一个 n × n 的二维矩阵表示一个图像。 * &lt;p> * 将图像顺时针旋转 90 度。 * &lt;p> * 说明： * &lt;p> * 你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。 * &lt;p> * 示例 1: * &lt;p> * 给定 matrix = * [ * [1,2,3], * [4,5,6], * [7,8,9] * ], * &lt;p> * 原地旋转输入矩阵，使其变为: * [ * [7,4,1], * [8,5,2], * [9,6,3] * ] * 示例 2: * &lt;p> * 给定 matrix = * [ * [ 5, 1, 9,11], * [ 2, 4, 8,10], * [13, 3, 6, 7], * [15,14,12,16] * ], * &lt;p> * 原地旋转输入矩阵，使其变为: * [ * [15,13, 2, 5], * [14, 3, 4, 1], * [12, 6, 8, 9], * [16, 7,10,11] * ] */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RotatePicture</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">rotate</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面是 <code>LeetCode</code> 上执行时间最短的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/10%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E6%95%B0%E7%BB%84/10%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 两数之和 * &lt;p> * 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 * &lt;p> * 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 * &lt;p> * 示例: * &lt;p> * 给定 nums = [2, 7, 11, 15], target = 9 * &lt;p> * 因为 nums[0] + nums[1] = 2 + 7 = 9 * 所以返回 [0, 1] */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ten</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token function">twoSum1</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>anInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     * 遍历两遍数组，比较i、j之和是否等于target     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> j<span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *  遍历数组，保存当前的值与下标(以值为key，下标为value)     *  计算target与当前值的差，如果差在map中，则返回map中差的下标以及当前的下标     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> consult<span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            consult <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>consult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>consult<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/4%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/4%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 有效的字母异位词 * &lt;p> * 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。 * &lt;p> * 示例 1: * &lt;p> * 输入: s = "anagram", t = "nagaram" * 输出: true * 示例 2: * &lt;p> * 输入: s = "rat", t = "car" * 输出: false * 说明: * 你可以假设字符串只包含小写字母。 * &lt;p> * 进阶: * 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"anagram"</span><span class="token punctuation">;</span>        String t <span class="token operator">=</span> <span class="token string">"nagbram"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isAnagram</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *  因为字符串只包含小写字母，故使用两个数组，分别记录s、t的各字母位数，然后比较各个位数值是否相同     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count1<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count2<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> count1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> count2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> count2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/3%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/3%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 字符串中的第一个唯一字符 * &lt;p> * 给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。 * * 案例: * * s = "leetcode" * 返回 0. * * s = "loveleetcode", * 返回 2. * * * 注意事项：您可以假定该字符串只包含小写字母。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"loveleetcode"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">firstUniqChar2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *  遍历字符串转换的字符数组，判断第一次查找和最后一次查找的索引是否相同，相同返回下标     * 缺点：     *  s.toCharArray()、以及 chars[i] 耗费了较多查找和转换的时间。本例执行时长 37ms     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 优化     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar2</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// i++ 改变的是i的ascII值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> res <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> res<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这一步是为了取最小下标</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/1%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/1%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 反转字符串 * &lt;p> * 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。 * &lt;p> * 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。 * &lt;p> * 你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。 * &lt;p> * 示例 1： * &lt;p> * 输入：["h","e","l","l","o"] * 输出：["o","l","l","e","h"] * 示例 2： * &lt;p> * 输入：["H","a","n","n","a","h"] * 输出：["h","a","n","n","a","H"] */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">reverseString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     * 对半遍历，使用临时变量替换收尾数据      */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/2%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/2019/07/01/leetcode/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%88%9D%E7%BA%A7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/2%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>common<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 整数反转 * &lt;p> * 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 * &lt;p> * 示例 1: * &lt;p> * 输入: 123 * 输出: 321 * 示例 2: * &lt;p> * 输入: -123 * 输出: -321 * 示例 3: * &lt;p> * 输入: 120 * 输出: 21 * 注意: * &lt;p> * 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1534236469</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 解题思路：     *   1. x 不停取10的余数，即位数从后向前保存即可。     *   2. 注意：如果x反转之后溢出，是会报错的。因此result需要使用long，并判断是否超过int的最大最小值。     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">></span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">||</span> result <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 优化：来自 LeetCode 中最短解答时间     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">reverse2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> rev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> pop <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rev <span class="token operator">></span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rev <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> pop <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rev <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token operator">/</span><span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rev <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MIN_VALUE <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> pop <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            rev <span class="token operator">=</span> rev <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> pop<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/01/hello-world/"/>
      <url>/2019/07/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringSecurity/7.Spring+Cloud+Security/"/>
      <url>/2019/07/01/SpringSecurity/7.Spring+Cloud+Security/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security-Oauth2-Spring-Cloud"><a href="#Spring-Security-Oauth2-Spring-Cloud" class="headerlink" title="Spring Security + Oauth2 + Spring Cloud"></a>Spring Security + Oauth2 + Spring Cloud</h1><p>Spring Security：<a href="http://docs.spring.io/spring-security/site/docs/4.2.2.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">http://docs.spring.io/spring-security/site/docs/4.2.2.RELEASE/reference/htmlsingle/</a><br>OAuth2（重点），参考文档：<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html</a><br>Spring Security OAuth2，参考文档：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-security-oauth2" target="_blank" rel="noopener">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-security-oauth2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringSecurity/6.SpringSecurity%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/"/>
      <url>/2019/07/01/SpringSecurity/6.SpringSecurity%E6%8A%80%E6%9C%AF%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security-技术图谱"><a href="#Spring-Security-技术图谱" class="headerlink" title="Spring Security 技术图谱"></a>Spring Security 技术图谱</h1><p><img src="http://upload-images.jianshu.io/upload_images/3424642-80ef85bd506cd2c4.PNG" alt="Spring Security 技术图谱"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringSecurity/5.Spring%20Security%E8%BF%87%E6%BB%A4%E9%93%BE/"/>
      <url>/2019/07/01/SpringSecurity/5.Spring%20Security%E8%BF%87%E6%BB%A4%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security-过滤链"><a href="#Spring-Security-过滤链" class="headerlink" title="Spring Security 过滤链"></a>Spring Security 过滤链</h1><p>HttpSecurity 有三个常用方法来配置过滤链：</p><ul><li>addFilterBefore(Filter filter,Class&lt;? extends Filter&gt; beforeFilter) 在beforeFilter 之前添加 filter</li><li>addFilterAfter(Filter filter,Class&lt;? extends Filter&gt; afterFilter) 在afterFilter 之后添加 filter</li><li>addFilterAt(Filter filter,Class&lt;? extends Filter&gt; atFilter) 在 atFilter 相同位置添加 filter，但不会覆盖它</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// todo 测试doFilter的执行顺序</span></code></pre><p>例如：配置自定义 Filter 在 SpringSecurity 过滤链中的位置：<br>自定义 <code>Filter</code> 建议继承 <code>GenericFilterBean</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义 Filter 过滤器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeforeLoginFilter</span> <span class="token keyword">extends</span> <span class="token class-name">GenericFilterBean</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span>ServletRespone servletRespone<span class="token punctuation">,</span>FilterChain chain<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is a filter before UsernamePasswordAuthenticationFilter."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 继续调用 Filter 链</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 向 HttpSecurity 添加过滤器</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    http        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// "/" 路径下都可以访问</span>        <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// "user"路径下的文件需要 "user"权限</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 指定登录页面</span>            <span class="token punctuation">.</span><span class="token function">defaultSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 登录成功后的默认页面</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 指定退出路径</span>            <span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 退出成功后的默认页面</span>    <span class="token comment" spellcheck="true">// 在 UsernamePasswordAuthenticationFilter 前添加 BeforeLoginFilter</span>    http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeforeLoginFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UsernamePasswordAuthenticationFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在 CrsfFilter 后添加 AfterCrsfFilter</span>    http<span class="token punctuation">.</span><span class="token function">addFilterAfter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AfterCsrfFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CsrfFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Spring-Security-默认的过滤链"><a href="#Spring-Security-默认的过滤链" class="headerlink" title="Spring Security 默认的过滤链"></a>Spring Security 默认的过滤链</h2><table><thead><tr><th>别名</th><th>类名称</th><th>Namespace Element or Attribute</th></tr></thead><tbody><tr><td>CHANNEL_FILTER</td><td>ChannelProcessingFilter</td><td>http/intercept-url@requires-channel</td></tr><tr><td>SECURITY_CONTEXT_FILTER</td><td>SecurityContextPersistenceFilter</td><td>http</td></tr><tr><td>CONCURRENT_SESSION_FILTER</td><td>ConcurrentSessionFilter</td><td>session-management/concurrency-control</td></tr><tr><td>HEADERS_FILTER</td><td>HeaderWriterFilter</td><td>http/headers</td></tr><tr><td>CSRF_FILTER</td><td>CsrfFilter</td><td>http/csrf</td></tr><tr><td>LOGOUT_FILTER</td><td>LogoutFilter</td><td>http/logout</td></tr><tr><td>X509_FILTER</td><td>X509AuthenticationFilter</td><td>http/x509</td></tr><tr><td>PRE_AUTH_FILTER</td><td>AbstractPreAuthenticatedProcessingFilter( Subclasses)</td><td>N/A</td></tr><tr><td>CAS_FILTER</td><td>CasAuthenticationFilter</td><td>N/A</td></tr><tr><td>FORM_LOGIN_FILTER</td><td>UsernamePasswordAuthenticationFilter</td><td>http/form-login</td></tr><tr><td>BASIC_AUTH_FILTER</td><td>BasicAuthenticationFilter</td><td>http/http-basic</td></tr><tr><td>SERVLET_API_SUPPORT_FILTER</td><td>SecurityContextHolderAwareRequestFilter</td><td>http/@servlet-api-provision</td></tr><tr><td>JAAS_API_SUPPORT_FILTER</td><td>JaasApiIntegrationFilter</td><td>http/@jaas-api-provision</td></tr><tr><td>REMEMBER_ME_FILTER</td><td>RememberMeAuthenticationFilter</td><td>http/remember-me</td></tr><tr><td>ANONYMOUS_FILTER</td><td>AnonymousAuthenticationFilter</td><td>http/anonymous</td></tr><tr><td>SESSION_MANAGEMENT_FILTER</td><td>SessionManagementFilter</td><td>session-management</td></tr><tr><td>EXCEPTION_TRANSLATION_FILTER</td><td>ExceptionTranslationFilter</td><td>http</td></tr><tr><td>FILTER_SECURITY_INTERCEPTOR</td><td>FilterSecurityInterceptor</td><td>http</td></tr><tr><td>SWITCH_USER_FILTER</td><td>SwitchUserFilter</td><td>N/A</td></tr></tbody></table><p><a href="http://www.spring4all.com/article/422" target="_blank" rel="noopener">文章来源：Spring4all 社区</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringSecurity/3.%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81/"/>
      <url>/2019/07/01/SpringSecurity/3.%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="kaishi"><a href="#kaishi" class="headerlink" title="kaishi"></a>kaishi</h1><p>导入security-login-db<br>创建数据库 any<br>执行 user.sql<br>启动项目</p><h2 id="Spring-Security-校验登录流程"><a href="#Spring-Security-校验登录流程" class="headerlink" title="Spring Security 校验登录流程"></a>Spring Security 校验登录流程</h2><p><img src="http://upload-images.jianshu.io/upload_images/3424642-7418a70abdfc7287.jpg" alt="Spring Security 校验登录流程"></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><h2 id="AbstractAuthenticationProcessingFilter-抽象类"><a href="#AbstractAuthenticationProcessingFilter-抽象类" class="headerlink" title="AbstractAuthenticationProcessingFilter 抽象类"></a>AbstractAuthenticationProcessingFilter 抽象类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 调用 #requiresAuthentication(HttpServletRequest, HttpServletResponse) 决定是否需要进行验证操作。     * 如果需要验证，则会调用 #attemptAuthentication(HttpServletRequest, HttpServletResponse) 方法。     * 有三种结果：     * 1、返回一个 Authentication 对象。     * 配置的 SessionAuthenticationStrategy` 将被调用，     * 然后 然后调用 #successfulAuthentication(HttpServletRequest，HttpServletResponse，FilterChain，Authentication) 方法。     * 2、验证时发生 AuthenticationException。     * #unsuccessfulAuthentication(HttpServletRequest, HttpServletResponse, AuthenticationException) 方法将被调用。     * 3、返回Null，表示身份验证不完整。假设子类做了一些必要的工作（如重定向）来继续处理验证，方法将立即返回。     * 假设后一个请求将被这种方法接收，其中返回的Authentication对象不为空。     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse res<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> req<span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">requiresAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果不需要验证，则直接放行</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Request is to process authentication"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Authentication authResult<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 需要验证则通过 attemptAuthentication 尝试验证</span>            authResult <span class="token operator">=</span> <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>authResult <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 返回值为Null，表示身份验证不完整</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sessionStrategy<span class="token punctuation">.</span><span class="token function">onAuthentication</span><span class="token punctuation">(</span>authResult<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 出现异常则抛出对应的错误信息</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>                    <span class="token string">"An internal error occurred while trying to authenticate the user."</span><span class="token punctuation">,</span>                    failed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Authentication failed</span>            <span class="token function">unsuccessfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Authentication success</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>continueChainBeforeSuccessfulAuthentication<span class="token punctuation">)</span> <span class="token punctuation">{</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 验证成功，进入下一步</span>        <span class="token function">successfulAuthentication</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> authResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="UsernamePasswordAuthenticationFilter-AbstractAuthenticationProcessingFilter的子类"><a href="#UsernamePasswordAuthenticationFilter-AbstractAuthenticationProcessingFilter的子类" class="headerlink" title="UsernamePasswordAuthenticationFilter (AbstractAuthenticationProcessingFilter的子类)"></a>UsernamePasswordAuthenticationFilter (AbstractAuthenticationProcessingFilter的子类)</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 尝试验证的方法 */</span><span class="token keyword">public</span> Authentication <span class="token function">attemptAuthentication</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>            HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>postOnly <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 必须是Post方式的请求</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationServiceException</span><span class="token punctuation">(</span>                <span class="token string">"Authentication method not supported: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String username <span class="token operator">=</span> <span class="token function">obtainUsername</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token function">obtainPassword</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        username <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        password <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    username <span class="token operator">=</span> username<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将Request域中的 username 和 password 生成 UsernamePasswordAuthenticationToken 对象，用于 AuthenticationManager 的验证</span>    UsernamePasswordAuthenticationToken authRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>            username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 允许子类设置 Details 对象</span>    <span class="token function">setDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAuthenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>#attemptAuthentication ()</code> 方法将 request 中的 username 和 password 生成 UsernamePasswordAuthenticationToken 对象，用于 <code>AuthenticationManager</code> 的验证（即 this.getAuthenticationManager().authenticate(authRequest) ）。</p><p>默认情况下注入 Spring 容器的 <code>AuthenticationManager</code> 是 <code>ProviderManager</code>。</p><h2 id="ProviderManager-AuthenticationManager-的实现类"><a href="#ProviderManager-AuthenticationManager-的实现类" class="headerlink" title="ProviderManager(AuthenticationManager 的实现类)"></a>ProviderManager(AuthenticationManager 的实现类)</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 尝试验证 Authentication 对象 * AuthenticationProvider 列表将被连续尝试，直到 AuthenticationProvider 表示它能够认证传递的过来的  Authentication 对象。然后将使用该 AuthenticationProvider 尝试身份验证。 * 如果有多个 AuthenticationProvider 支持验证传递过来的Authentication 对象，那么由第一个来确定结果，覆盖早期支持AuthenticationProviders 所引发的任何可能的AuthenticationException。 成功验证后，将不会尝试后续的AuthenticationProvider。 * 如果最后所有的 AuthenticationProviders 都没有成功验证 Authentication 对象，将抛出 AuthenticationException。 */</span><span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span>        <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Authentication</span><span class="token operator">></span> toTest <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AuthenticationException lastException <span class="token operator">=</span> null<span class="token punctuation">;</span>    Authentication result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> debug <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>AuthenticationProvider provider <span class="token operator">:</span> <span class="token function">getProviders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>provider<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>toTest<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>debug<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Authentication attempt using "</span>                    <span class="token operator">+</span> provider<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">copyDetails</span><span class="token punctuation">(</span>authentication<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccountStatusException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">prepareException</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// SEC-546: Avoid polling additional providers if auth failure is due to</span>            <span class="token comment" spellcheck="true">// invalid account status</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InternalAuthenticationServiceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">prepareException</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastException <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Allow the parent to try.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ProviderNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ignore as we will throw below if no other exception occurred prior to</span>            <span class="token comment" spellcheck="true">// calling parent and the parent</span>            <span class="token comment" spellcheck="true">// may throw ProviderNotFound even though a provider in the child already</span>            <span class="token comment" spellcheck="true">// handled the request</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastException <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>eraseCredentialsAfterAuthentication                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">CredentialsContainer</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Authentication is complete. Remove credentials and other secret data</span>            <span class="token comment" spellcheck="true">// from authentication</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>CredentialsContainer<span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eraseCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        eventPublisher<span class="token punctuation">.</span><span class="token function">publishAuthenticationSuccess</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Parent was null, or didn't authenticate (or throw an exception).</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastException <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lastException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProviderNotFoundException</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>                <span class="token string">"ProviderManager.providerNotFound"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> toTest<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"No AuthenticationProvider found for {0}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">prepareException</span><span class="token punctuation">(</span>lastException<span class="token punctuation">,</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> lastException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此处的 provider 是 AbstractUserDetailsAuthenticationProvider，<br>AbstractUserDetailsAuthenticationProvider 是AuthenticationProvider的实现，看看它的 #authenticate(authentication) 方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 验证 authentication</span><span class="token keyword">public</span> Authentication <span class="token function">authenticate</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">)</span>            <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> authentication<span class="token punctuation">,</span>                messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>                        <span class="token string">"AbstractUserDetailsAuthenticationProvider.onlySupports"</span><span class="token punctuation">,</span>                        <span class="token string">"Only UsernamePasswordAuthenticationToken is supported"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Determine username</span>        String username <span class="token operator">=</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"NONE_PROVIDED"</span>                <span class="token operator">:</span> authentication<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> cacheWasUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        UserDetails user <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">getUserFromCache</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                user <span class="token operator">=</span> <span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>                        <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> notFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"User '"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"' not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>hideUserNotFoundExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span>messages<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>                            <span class="token string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span><span class="token punctuation">,</span>                            <span class="token string">"Bad credentials"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> notFound<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>                    <span class="token string">"retrieveUser returned null - a violation of the interface contract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// There was a problem, so try again after checking</span>                <span class="token comment" spellcheck="true">// we're using latest data (i.e. not from the cache)</span>                cacheWasUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                user <span class="token operator">=</span> <span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>                        <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>                preAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">additionalAuthenticationChecks</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>                        <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> exception<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        postAuthenticationChecks<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cacheWasUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>userCache<span class="token punctuation">.</span><span class="token function">putUserInCache</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object principalToReturn <span class="token operator">=</span> user<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>forcePrincipalAsString<span class="token punctuation">)</span> <span class="token punctuation">{</span>            principalToReturn <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">createSuccessAuthentication</span><span class="token punctuation">(</span>principalToReturn<span class="token punctuation">,</span> authentication<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>AbstractUserDetailsAuthenticationProvider 内置了缓存机制，从缓存中获取不到的 UserDetails 信息的话，就调用如下方法获取用户信息，然后和 用户传来的信息进行对比来判断是否验证成功。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取用户信息</span>UserDetails user <span class="token operator">=</span> <span class="token function">retrieveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token punctuation">(</span>UsernamePasswordAuthenticationToken<span class="token punctuation">)</span> authentication<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>#retrieveUser()</code> 方法在 <code>DaoAuthenticationProvider</code> 中实现，<code>DaoAuthenticationProvider</code> 是 <code>AbstractUserDetailsAuthenticationProvider</code> 的子类。具体实现如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> UserDetails <span class="token function">retrieveUser</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span>            UsernamePasswordAuthenticationToken authentication<span class="token punctuation">)</span>            <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>    UserDetails loadedUser<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        loadedUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UsernameNotFoundException</span> notFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String presentedPassword <span class="token operator">=</span> authentication<span class="token punctuation">.</span><span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            passwordEncoder<span class="token punctuation">.</span><span class="token function">isPasswordValid</span><span class="token punctuation">(</span>userNotFoundEncodedPassword<span class="token punctuation">,</span>                    presentedPassword<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> notFound<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> repositoryProblem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span>                repositoryProblem<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repositoryProblem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadedUser <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalAuthenticationServiceException</span><span class="token punctuation">(</span>                <span class="token string">"UserDetailsService returned null, which is an interface contract violation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> loadedUser<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到此处的返回对象 userDetails 是由 UserDetailsService 的 #loadUserByUsername(username) 来获取的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringSecurity/4.%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/"/>
      <url>/2019/07/01/SpringSecurity/4.%E5%AF%86%E7%A0%81%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h1><h2 id="在-WebSecurityConfig-中的登录校验，添加密码加密"><a href="#在-WebSecurityConfig-中的登录校验，添加密码加密" class="headerlink" title="在 WebSecurityConfig 中的登录校验，添加密码加密"></a>在 WebSecurityConfig 中的登录校验，添加密码加密</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 添加 UserDetailsService ，实现自定义登录校验 */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder builder<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    builder        <span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>anyUserDetailsService<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 密码加密 */</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> BCryptPasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在登录时用到了 <code>DaoAuthenticationProvider</code>,它有一个方法 <code>#additionalAuthenticationChecks(UserDetails userDetails,UsernamePasswordAuthenticationToken authentication)</code>，此方法用来校验从数据库取得的用户信息和用户输入的信息是否匹配.</p><p>在注册时，也需要对用户密码进行加密。即在 post:register() 方法中，将密码使用 BCrptPasswordEncoder进行加密。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 加密密码 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">encryptPassword</span><span class="token punctuation">(</span>UserEntity userEntity<span class="token punctuation">)</span><span class="token punctuation">{</span>    String password <span class="token operator">=</span> userEntity<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    userEntity<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringSecurity/2.@EnableWebSecurity%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/07/01/SpringSecurity/2.@EnableWebSecurity%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="EnableWebSecurity-注解"><a href="#EnableWebSecurity-注解" class="headerlink" title="@EnableWebSecurity 注解"></a>@EnableWebSecurity 注解</h1><p>在 Spring Boot 应用中使用 Spring Security ，用到了 @EnableWebSecurity 注解，该注解和 @Configuration 注解一起使用，注解 WebSecurityConfigurer 类型的类，或者利用 @EnableWebSecurity 注解 + 继承 WebSecurityConfigurerAdapter 的类，构成 Spring Security 的配置。</p><h2 id="WebSecurityConfigurerAdapter"><a href="#WebSecurityConfigurerAdapter" class="headerlink" title="WebSecurityConfigurerAdapter"></a>WebSecurityConfigurerAdapter</h2><p>一般情况下，会选择继承 WebSecurityConfigurerAdapter 类，它提供了一种遍历的方式去创建 WebSecurityConfigurer 的实例，只需要重写其中的方法，即可配置拦截URL、设置权限等安全控制。从下图中可以看到能进行重写的方法：</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-6a633a7a38615007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可重写的方法"></p><h3 id="具体的方法描述"><a href="#具体的方法描述" class="headerlink" title="具体的方法描述"></a>具体的方法描述</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KoralSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 其父类 WebSecurityConfigurerAdapter 中通过构造默认构造函数     *  创建启用了默认配置的实例     */</span>    <span class="token keyword">protected</span> <span class="token function">KoralSecurityConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 是否重新设置一个实例     * @param disableDefaults 是否启用默认的配置，default:true     */</span>    <span class="token keyword">protected</span> <span class="token function">KoralSecurityConfig</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> disableDefaults<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>disableDefaults<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用 AuthenticationManagerBuilder 来指定重写后的 AuthenticationManager     * @param auth AuthenticationManager 的 构造器     * @throws Exception 异常     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重写此方法,通过其返回值来暴露 AuthenticationManager     * @return AuthenticationManager     * @throws Exception Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AuthenticationManager <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 如果默认的 AuthenticationManagerBuilder 策略被重写的话，则传入重写的     *  否则，自动装入 AuthenticationManager     * @return AuthenticationManager     * @throws Exception Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationManager <span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetailsService <span class="token function">userDetailsServiceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">userDetailsServiceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> UserDetailsService <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>WebSecurity web<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>web<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 可以通过该方法来过滤一些web请求     * @param web WebSecurity     * @throws Exception ex     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>WebSecurity web<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>web<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过该方法配置 HttpSecurity     *  默认配置为：     *      http.authorizeRequests().anyRequest().authenticated().and().formLogin().and().httpBasic();     *  注意：     *      该方法最好不要调用 super() 方法，因为可能会覆盖你的配置     * @param http HttpSecurity     * @throws Exception ex     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重新配置应用上下文     * @param context ApplicationContext     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setApplicationContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 重新配置 认证评估标记     * @param trustResolver AuthenticationTrustResolver     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTrustResolver</span><span class="token punctuation">(</span>AuthenticationTrustResolver trustResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setTrustResolver</span><span class="token punctuation">(</span>trustResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置 请求的相应策略     * @param contentNegotiationStrategy 策略     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContentNegotationStrategy</span><span class="token punctuation">(</span>ContentNegotiationStrategy contentNegotiationStrategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setContentNegotationStrategy</span><span class="token punctuation">(</span>contentNegotiationStrategy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置 对象请求的生命周期     * @param objectPostProcessor 对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObjectPostProcessor</span><span class="token punctuation">(</span>ObjectPostProcessor<span class="token operator">&lt;</span>Object<span class="token operator">></span> objectPostProcessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setObjectPostProcessor</span><span class="token punctuation">(</span>objectPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 身份认证的配置     * @param authenticationConfiguration configure     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthenticationConfiguration</span><span class="token punctuation">(</span>AuthenticationConfiguration authenticationConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setAuthenticationConfiguration</span><span class="token punctuation">(</span>authenticationConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="详解-HttpSecurity"><a href="#详解-HttpSecurity" class="headerlink" title="详解 HttpSecurity"></a>详解 HttpSecurity</h2><p>final HttpSecurity 的常用方法如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>openIDLogin()</td><td>用于基于OpenID的验证</td></tr><tr><td>headers()</td><td>将安全标头添加到响应</td></tr><tr><td>cors()</td><td>配置跨域资源共享（CORS）</td></tr><tr><td>sessionManagement()</td><td>允许配置会话管理</td></tr><tr><td>portMapper()</td><td>允许配置一个PortMapper(HttpSecurity#(getSharedObject(class))),其他提供SecurityConfigurer 的对象使用 PortMapper 从 HTTP 重定向到HTTPS或者返回来。默认情况下，SpringSecurity 使用一个 PortMapperImpl 映射 HTTP 端口 8080 到Https 端口 8443，Http端口 80 到 https 端口 8443</td></tr><tr><td>jee()</td><td>配置基于容器的预认证。在这种情况下，认证由Servlet容器管理</td></tr><tr><td>x509()</td><td>配置基于X509的认证</td></tr><tr><td>rememberMe</td><td>允许配置“记住我”的验证</td></tr><tr><td>authorizeRequests()</td><td>允许基于使用 HttpServletRequest 限制访问</td></tr><tr><td>requestCache()</td><td>允许配置请求缓存</td></tr><tr><td>exceptionHandling()</td><td>允许配置错误处理</td></tr><tr><td>securityContext()</td><td>在HttpServletRequests之间的SecurityContextHolder上设置SecurityContext的管理。 当使用WebSecurityConfigurerAdapter时，这将自动应用</td></tr><tr><td>servletApi()</td><td>将 HttpServletRequests 方法与在其上找到的值集成到 SecurityContext 中。当时用 WebSecurityConfigurerAdapter 时，将自动应用。</td></tr><tr><td>csrf()</td><td>添加 CSRF 支持，使用WebSecurityConfigurerAdapter时，默认启用</td></tr><tr><td>logout()</td><td>添加退出登录支持。当使用WebSecurityConfigurerAdapter时，这将自动应用。默认情况是，访问URL”/ logout”，使HTTP Session无效来清除用户，清除已配置的任何#rememberMe()身份验证，清除SecurityContextHolder，然后重定向到”/login?success”</td></tr><tr><td>anonymous()</td><td>允许配置匿名用户的表示方法。 当与WebSecurityConfigurerAdapter结合使用时，这将自动应用。 默认情况下，匿名用户将使用org.springframework.security.authentication.AnonymousAuthenticationToken表示，并包含角色 “ROLE_ANONYMOUS”</td></tr><tr><td>formLogin()</td><td>指定支持基于表单的身份验证。如果未指定FormLoginConfigurer#loginPage(String)，则将生成默认登录页面</td></tr><tr><td>oauth2Login()</td><td>根据外部OAuth 2.0或OpenID Connect 1.0提供程序配置身份验证</td></tr><tr><td>requiresChannel()</td><td>配置通道安全。为了使该配置有用，必须提供至少一个到所需信道的映射</td></tr><tr><td>httpBasic()</td><td>配置 Http Basic 验证</td></tr><tr><td>addFilterAt()</td><td>在指定的Filter类的位置添加过滤器</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用以下配置在内存中进行注册公开内存的身份验证{@link UserDetailsService}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span><span class="token punctuation">{</span>    auth        <span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">,</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将 UserDetailsService 注册为 Bean</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> UserDetailsService <span class="token function">userDeatilsServiceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">userDetailsServiceBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 覆盖 HTTPSecurity 的配置 * 默认配置为：http.authorizeRequests().anyRequest().authenticated().formLogin().and().httpBasic(); */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    http        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许基于使用HttpServletRequest限制访问</span>            <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">autheticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 指定支持基于表单的身份验证。如果未指定，则将默认生成登录页面</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">httpBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 配置HttpBasic 验证</span><span class="token punctuation">}</span></code></pre><p><a href="&#39;http://www.spring4all.com/article/419&#39;">文章来源:Spring4all</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringSecurity/1.%E5%88%9D%E8%AF%86SpringSecurity/"/>
      <url>/2019/07/01/SpringSecurity/1.%E5%88%9D%E8%AF%86SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>创建一个 Web 工程，需要引入 <code>spring-boot-starter-web</code> 的包</li><li>引入 <code>spring-boot-starter-security</code> 的包</li><li>引入 thymeleaf 的包 <code>spring-boot-starter-thymeleaf</code> （实测，如果不引入 thymeleaf，则无法从控制器请求到 html 视图）</li></ol><h3 id="Web-层实现请求映射"><a href="#Web-层实现请求映射" class="headerlink" title="Web 层实现请求映射"></a>Web 层实现请求映射</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 映射到 index.html</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 映射到 hello.html</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="实现映射的页面"><a href="#实现映射的页面" class="headerlink" title="实现映射的页面"></a>实现映射的页面</h3><p>映射的页面统一放在 <code>src/main/resources/teamplates</code> 下</p><ul><li>index.html</li></ul><p>在该页面中，通过链接直接请求到 hello 方法，并通过 hello 映射到 hello.html 页面</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-springsecurity3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring Security入门<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>欢迎使用Spring Security!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>点击 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这里<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> 打个招呼吧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>hello.html</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-springsecurity3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="整合-Spring-Security"><a href="#整合-Spring-Security" class="headerlink" title="整合 Spring Security"></a>整合 Spring Security</h2><p>这里会对 <code>/hello</code> 请求进行权限控制，必须是授权用户才能访问。如果是未授权用户，则直接跳转到登录页面。</p><h3 id="配置-Spring-Security"><a href="#配置-Spring-Security" class="headerlink" title="配置 Spring Security"></a>配置 Spring Security</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http            <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "/"、"/home" 不需要被验证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 其他路径的请求都需要验证</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 指定登录页面，谁都可以访问</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// 登出页面不需要验证</span>                <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureGlobal</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        auth            <span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>通过 @EnableWebSecurity 注解开启 Spring Security</li><li>继承 WebSecurityConfigurerAdapter ，并通过重写方法来设置一些安全细节</li><li>configure(HttpSecurity http) 方法<ul><li>通过 authorizeRequests() 定义哪些URL需要被保护、哪些不需要被保护。</li><li>通过 formLogin() 定义当需要用户登录时候，转到的登录页面。并且通过 loginPage(String) 的方法指定登录页面</li></ul></li><li>configureGlobal(AuthenticationManagerBuilder auth) 方法，在内存中创建了一个用户，该用户的名称为 user，密码为 password，用户角色为 USER。</li></ul><h2 id="新增登录请求与页面"><a href="#新增登录请求与页面" class="headerlink" title="新增登录请求与页面"></a>新增登录请求与页面</h2><ul><li>login.html</li></ul><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-springsecurity3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Spring Security Example <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${param.error}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            用户名或密码错        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${param.logout}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            您已注销成功        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/login}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span> 用户名 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span> 密  码 : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><ul><li>/login</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略之前的内容...</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根据配置，Spring Security 提供了一个过滤器来拦截请求并验证用户身份。</p><p>如果用户身份验证失败，页面就会重定向到 <code>/login?error</code>，并且页面中会展现相应的错误信息。</p><p>若用户想要注销登录，可以通过访问 <code>/login?logout</code> 请求，在完成注销之后，页面展现相应的成功消息。</p><p>因为 <code>/hello</code> 请求需要验证用户信息，因此在未登录状态下被重定向到 <code>/login</code> 方法中，通过用户名与密码登录之后，就会跳转到 <code>/hello</code> 页面。</p><p><a href="https://docs.spring.io/spring-security/site/docs/4.1.0.RELEASE/reference/htmlsingle/" target="_blank" rel="noopener">Spring Security 官方文档</a> ,<a href="http://blog.didispace.com/springbootsecurity/" target="_blank" rel="noopener">本文来源’程序员DD’的博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringBoot/SpringSecurity/"/>
      <url>/2019/07/01/SpringBoot/SpringSecurity/</url>
      
        <content type="html"><![CDATA[<h1 id="根据踏瑞云的权限架构，所认知的SpringSecurity"><a href="#根据踏瑞云的权限架构，所认知的SpringSecurity" class="headerlink" title="根据踏瑞云的权限架构，所认知的SpringSecurity"></a>根据踏瑞云的权限架构，所认知的SpringSecurity</h1><h2 id="一、-实体类"><a href="#一、-实体类" class="headerlink" title="一、 实体类"></a>一、 实体类</h2><h2 id="1-1-CoreUser"><a href="#1-1-CoreUser" class="headerlink" title="1.1 CoreUser"></a>1.1 CoreUser</h2><pre><code>用于存储用户的基本信息，如用户名、密码、真实姓名、手机号、邮箱、是否是管理员、是否禁用、学号、备注、学校备注、组织、权限集合</code></pre><h2 id="1-2-Organization"><a href="#1-2-Organization" class="headerlink" title="1.2 Organization"></a>1.2 Organization</h2><pre><code>组织，包含编号、管理员备注、产品、是否禁用</code></pre><h2 id="1-3-OrganizationMemeber"><a href="#1-3-OrganizationMemeber" class="headerlink" title="1.3 OrganizationMemeber"></a>1.3 OrganizationMemeber</h2><pre><code>组织成员，包含 用户Id、组织Id、组织权限role</code></pre><h2 id="1-4-OrganizationMemeberRole"><a href="#1-4-OrganizationMemeberRole" class="headerlink" title="1.4 OrganizationMemeberRole"></a>1.4 OrganizationMemeberRole</h2><pre><code>组织权限：Administrator 管理员、Teacher 教师、Student 学生</code></pre><h2 id="1-5-OrganizationAuthorization"><a href="#1-5-OrganizationAuthorization" class="headerlink" title="1.5 OrganizationAuthorization"></a>1.5 OrganizationAuthorization</h2><pre><code>组织授权： 授权Id、过期时间、授权的课程集合</code></pre><h2 id="二、权限类"><a href="#二、权限类" class="headerlink" title="二、权限类"></a>二、权限类</h2><h2 id="2-1-CoreUserDetails"><a href="#2-1-CoreUserDetails" class="headerlink" title="2.1 CoreUserDetails"></a>2.1 CoreUserDetails</h2><pre><code>该类包含了 CoreUser 的信息，和权限的方法，因此需要继承 CoreUser 类和实现 CoreUserDetails 类：UserDetails extends CoreUser implements UserDetails即：CoreUserDetails = CoreUser用户信息 + UserDetails的方法 + Organization组织 + OrganizationMember组织内的权限 + OrganizationAuthorization组织授权课程新增参数：    organizations：List&lt;Organization&gt;  组织集合    loginName : String  用户名    organizationMemebers：List&lt;OrganizationMember&gt;    成员与组织对应的权限    organizationAuthorizations： List&lt;OrganizationAuthorization&gt;    授权内容三个构造方法：    1. 无参构造    2. 含有 登录名 loginName 的构造函数    3. 含有 组织集合、组织授权集合、登录名 的构造函数实现了 UserDetails 的 7 个方法    getAuthorities()        得到权限集合    getPassword()           密码    getUsername()           用户名    isAccountNonExpired()   账户是否未过期    isAccountNonLocked()    账户是否未被锁    isCredentialsNonExpired()   证书是否未过期    isEnabled()             是否可用</code></pre><h2 id="2-2-LoginUserService"><a href="#2-2-LoginUserService" class="headerlink" title="2.2 LoginUserService"></a>2.2 LoginUserService</h2><pre><code>用户登录的 Service，实现 UserDetailsService 类的 UserDetails loadUserByUsername(String loginName) 方法，该方法返回 UserDetails，因此需要 CoreUserDetails 实现 CoreUserDetails 类，来将 CoreUserDetails 返回。在实现的方法中：    1. 通过 loginName (手机号、邮箱、用户名) 查询数据库中是否存在该用户 --&gt; 得到 CoreUser    2. 构造一个 带 loginName 的 CoreUserDetails，将 CoreUser 注入 CoreUserDetails &lt;&lt;**1**&gt;&gt;    3. 查询用户对应的 组织权限(memberList)，并添加到 CoreUserDetails，即 coreUserDetails.setOrganizationMembers(memberList) &lt;&lt;**2**&gt;&gt;    4. 提取 用户组织权限 中的所有组织Id，得到所有的组织信息(organizations)，添加到 CoreUserDetails，即coreUserDetails.setOrganizations(organizations) &lt;&lt;**3**&gt;&gt;    5. 通过 组织Id ，得到组织下所有的授权信息(authorizations)，添加到 CoreUserDetails，即 coreUserDetails.setOrganizationAuthorizations(authorizations) &lt;&lt;**4**&gt;&gt;    6. 最后，将注入之后的 coreUserDetails 返回</code></pre><h2 id="2-3-MethodSecurityConfig"><a href="#2-3-MethodSecurityConfig" class="headerlink" title="2.3 MethodSecurityConfig"></a>2.3 MethodSecurityConfig</h2><blockquote><p>开启方法级别的权限验证。<br>    // @EnableGlocalMethodSecurity()在任何 @Configuration 实例上使用，用来开启基于注解的安全验证<br>    //      prePostEnabled = true ； 表示在方法执行之前进行验证<br>    @EnableGlobalMethodSecurity(prePostEnabled = true)<br>    @Configuration<br>    // GlobalMethodSecurityConfiguration 表示基于方法的安全验证<br>    public class MethodSecurityConfig extends GlobalMethodSecurityConfiguration {</p></blockquote><pre><code>    @Override    protected MethodSecurityExpressionHandler createExpressionHandler() {        // 返回一个 表达式验证的方法级控制器        return new ResourceMethodSecurityExpressionHandler();    }}</code></pre><h2 id="2-4-ResourceMethodSecurityExpressionHandler"><a href="#2-4-ResourceMethodSecurityExpressionHandler" class="headerlink" title="2.4 ResourceMethodSecurityExpressionHandler"></a>2.4 ResourceMethodSecurityExpressionHandler</h2><pre><code>实现 DefaultMethodSecurityExpressionHandler 控制器的 createSecurityExpressionRoot 方法，重写ResourceMethodSecurityExpressionRootpublic class ResourceMethodSecurityExpressionHandler extends DefaultMethodSecurityExpressionHandler {    private AuthenticationTrustResolver trustResolver =            new AuthenticationTrustResolverImpl();    @Override    protected MethodSecurityExpressionOperations createSecurityExpressionRoot(Authentication authentication, MethodInvocation invocation) {        ResourceMethodSecurityExpressionRoot root =                new ResourceMethodSecurityExpressionRoot(authentication);        root.setPermissionEvaluator(getPermissionEvaluator());        root.setTrustResolver(this.trustResolver);        root.setRoleHierarchy(getRoleHierarchy());        return root;    }}</code></pre><h2 id="2-5-ResourceMethodSecurityExpressionRoot"><a href="#2-5-ResourceMethodSecurityExpressionRoot" class="headerlink" title="2.5 ResourceMethodSecurityExpressionRoot"></a>2.5 ResourceMethodSecurityExpressionRoot</h2><pre><code>自定义 MethodSecurity 的表达式，eg：public class ResourceMethodSecurityExpressionRoot extends SecurityExpressionRoot implements MethodSecurityExpressionOperations {    private static final Logger logger = LoggerFactory.getLogger(ResourceMethodSecurityExpressionRoot.class);    private Object filterObject;    private Object returnObject;    private Object target;    public ResourceMethodSecurityExpressionRoot(Authentication authentication) {        super(authentication);    }    // 用来在 @PreAuthorize 注解中使用的方法    public boolean canReadCourse(String courseId) {        logger.debug(&quot;method params courseId : {}&quot;, courseId);        logger.debug(&quot;current principal {}&quot;, getPrincipal());        return true;    }    /** setter and getter */}</code></pre><h1 id="三、大致的流程："><a href="#三、大致的流程：" class="headerlink" title="三、大致的流程："></a>三、大致的流程：</h1><pre><code>1. 用户登录，判定用户名密码是否正确，登录成功此时会将登录名交给 UserSetailsService2. 在 loadUserByUsername(String loginName) 方法中，填充用户的组织等信息，并返回    此时的用户已经通过 验证了2. 在请求资源时，在需要判定的方法上加上注解：@PreAuthorize(&quot;hasRole(&#39;Administrator&#39;)&quot;) </code></pre><h1 id="四、常用的注解"><a href="#四、常用的注解" class="headerlink" title="四、常用的注解"></a>四、常用的注解</h1><pre><code>access()                    SpringEL表达式结果为true时可访问anonymous()                 匿名可访问denyAll()                   用户不可访问fullyAuthenticated()        用户完全认证可访问（非Remeber me下自动登录）hasAnyAuthority(String...)  参数中任意 权限 的用户可访问hasAnyRole(String...)       参数中任意 角色 的用户可访问hasAuthority(String)        某一 权限 的用户可访问hasRole(String)             某一 角色 的用户可访问permitAll()                 所有用户可访问rememberMe()                允许通过 remeber me 登录的用户访问hasIpAddress(String)        用户来自参数中的ip时可访问</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringBoot/Sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2019/07/01/SpringBoot/Sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><h2 id="一、单点登录机制"><a href="#一、单点登录机制" class="headerlink" title="一、单点登录机制"></a>一、单点登录机制</h2><pre><code>web 应用采用的是 b/s 架构，以 http 作为通信协议。而 http 是无状态协议，浏览器每一次请求，服务器都会独立处理，不与之前或者之后的请求产生关联。</code></pre><p><img src="https://images2015.cnblogs.com/blog/797930/201611/797930-20161129155231912-1627010726.png" alt=""></p><pre><code>在三次请求、响应对之间没有任何联系。这同时也意味着，任何用户都能通过浏览器访问服务器资源，如果想保护服务器的某些资源，必须限制浏览器请求；要限制浏览器请求，必须鉴别浏览器请求，响应合法请求；要鉴别浏览器请求，必须清楚浏览器请求状态。既然http协议无状态，就需要服务器和浏览器共同维护一个状态，这就是会话机制。</code></pre><h2 id="二、会话机制"><a href="#二、会话机制" class="headerlink" title="二、会话机制"></a>二、会话机制</h2><pre><code>浏览器第一次请求服务器，服务器创建一个会话，并将会话 id 作为响应的一部分发送给浏览器，浏览器存储会话 id ，并在后续的第二次和第三次请求中带上会话 id ，服务器取得请求中的会话 id 就知道是不是同一个用户了。</code></pre><blockquote><p>  服务器在内存中保存会话对象，浏览器怎么保存会话 id 呢？  </p></blockquote><pre><code>1.请求参数：将会话 id 作为每一次请求的参数，服务器接收请求自然能解析参数获得会话 id ，并借此判断是否来自同一会话，很明显不靠谱。2.cookie：是浏览器用来存储少量数据的一种机制，数据以&quot; key/value&quot;形式存储，浏览器发送 http 请求时自动附带 cookie 信息。</code></pre><p><img src="https://images2015.cnblogs.com/blog/797930/201611/797930-20161129155234443-99011212.png" alt=""></p><pre><code>tomcat会话机制中也实现了cookie，访问tomcat服务器时，浏览器中可以看到一个名为“JSESSIONID” 的cookie，这就是 tomcat 会话机制维护的会话 id 。</code></pre><h2 id="三、登录状态"><a href="#三、登录状态" class="headerlink" title="三、登录状态"></a>三、登录状态</h2><pre><code>我们假设浏览器第一次请求服务器需要输入用户名与密码来验证身份，服务器拿到用户名密码去数据库比对，正确的话说明当持有这个会话的用户是合法用户，应该将这个会话标记为“已授权”或者“一登录”之类的状态，既然是会话的状态，自然要保存在会话对象中，tomcat在会话对象那个中的登录状态如下：    HttpSession session = request.getSession();    session.setAttribution(&quot;isLogin&quot;,true);再次访问时，tomcat会在会话对象中查看登录状态。每次请求受保护资源时都会检查会话对象中的登录状态，只有 isLogin 时才能访问，登录机制因此实现。</code></pre><p><img src="https://images2015.cnblogs.com/blog/797930/201611/797930-20161129155235693-1708276896.png" alt=""></p><h2 id="四、多系统的复杂性"><a href="#四、多系统的复杂性" class="headerlink" title="四、多系统的复杂性"></a>四、多系统的复杂性</h2><pre><code>web系统由原始的单系统发展成为如今由多系统组成的应用群，面对多个系统，用户不可能以一个个登录再一个个注销。而且由多系统组成的应用群，复杂性应该由系统内部承担，而不是用户。无论web系统内部多么复杂，对用户而言，都是一个统一的整体。虽然cookie是解决单系统登录的核心，但是cookie的限制在于cookie的域，浏览器发送 http 请求时会自动携带与该域匹配的 cookie ，而不是所有 cookie。在早些年，很多登录系统就采用同域名共享 cookie 的方式，将 web 应用群中所有子系统的域名统一在一个顶级域名下，然后将它们的 cookie 域设置为“baidu.com”。这样做虽然可行，但并不好。共享 cookie 的方式存在众多局限：首先，应用群域名得统一；其次，应用群各系统使用的技术(至少是 web 服务器)要相同，不然 cookie 的key值不相同（例如 tomcat 的是 JSESSIONID），无法维持会话，共享 cookie 的方式是无法实现跨语言技术平台登录的，比如 java、php、.net 系统之间；第三，cookie本身并不安全。因此，我们需要一种全新的登录方式来实现多系统应用群的登录，这就是单点登录。</code></pre><h2 id="五、单点登录"><a href="#五、单点登录" class="headerlink" title="五、单点登录"></a>五、单点登录</h2><pre><code>单点登录(Single Sign On)，指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录与单点注销两部分。</code></pre><p><img src="http://images2015.cnblogs.com/blog/797930/201611/797930-20161129155238365-788619473.png" alt=""></p><h3 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h3><pre><code>对比单系统登录，sso 需要一个独立的认证中心，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso 认证中心验证用户的用户名密码没问题，创建授权令牌吗，在跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即通过了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。这个过程就是单点登录的原理。</code></pre><p><img src="https://images2015.cnblogs.com/blog/797930/201612/797930-20161203152650974-276822362.png" alt=""></p><p>简要描述</p><ol><li>用户访问系统1的受保护资源，系统1发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统1</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统2的受保护资源</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统2</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源</li></ol><h3 id="2-注销"><a href="#2-注销" class="headerlink" title="2.注销"></a>2.注销</h3><pre><code>单点登录的注销，在一个子系统中注销，所有子系统的会话都将被销毁：sso认证中心一直坚挺全局会话的状态，一旦全局会话销毁，监听器将通知所有注册系统执行注销操作　　</code></pre><p><img src="https://images2015.cnblogs.com/blog/797930/201611/797930-20161129155243068-1378377736.png" alt=""></p><p>简要说明</p><ol><li>用户向系统1发起注销请求</li><li>系统1根据用户与系统1建立的会话id拿到令牌，向sso认证中心发起注销请求</li><li>sso认证中心校验令牌有效，销毁全局会话，同时取出所有用此令牌注册的系统地址</li><li>sso认证中心向所有注册系统发起注销请求</li><li>各注册系统接收sso认证中心的注销请求，销毁局部会话</li><li>sso认证中心引导用户至登录页面</li></ol><h2 id="六、部署图"><a href="#六、部署图" class="headerlink" title="六、部署图"></a>六、部署图</h2><pre><code>单点登录涉及 sso 认证中心与众子系统，子系统与 sso 认证中心需要通信以交换令牌、校验令牌及发起注销请求，因而子系统必须集成 sso 的客户端，sso 认证中心则是 sso 服务端，整个单点定了公路过程实质是 sso 客户端与服务端通信的过程。</code></pre><p><img src="https://images2015.cnblogs.com/blog/797930/201611/797930-20161129155244646-2067469767.png" alt="" title="图片"></p><pre><code>sso 认证中心与 sso 客户端通信方式有多种，例如 webservice、rpc、restful api等sso采用客户端/服务端架构，我们先看sso-client与sso-server要实现的功能（下面：sso认证中心=sso-server）</code></pre><p>　　sso-client</p><p>拦截子系统未登录用户请求，跳转至sso认证中心<br>接收并存储sso认证中心发送的令牌<br>与sso-server通信，校验令牌的有效性<br>建立局部会话<br>拦截用户注销请求，向sso认证中心发送注销请求<br>接收sso认证中心发出的注销请求，销毁局部会话<br>　　sso-server</p><p>验证用户的登录信息<br>创建全局会话<br>创建授权令牌<br>与sso-client通信发送令牌<br>校验sso-client令牌有效性<br>系统注册<br>接收sso-client注销请求，注销所有会话<br>　　接下来，我们按照原理来一步步实现sso吧！</p><p>1、sso-client拦截未登录请求<br>　　java拦截请求的方式有servlet、filter、listener三种方式，我们采用filter。在sso-client中新建LoginFilter.java类并实现Filter接口，在doFilter()方法中加入对未登录用户的拦截</p><p>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {<br>    HttpServletRequest req = (HttpServletRequest) request;<br>    HttpServletResponse res = (HttpServletResponse) response;<br>    HttpSession session = req.getSession();</p><pre><code>if (session.getAttribute(&quot;isLogin&quot;)) {    chain.doFilter(request, response);    return;}//跳转至sso认证中心res.sendRedirect(&quot;sso-server-url-with-system-url&quot;);</code></pre><p>}<br>2、sso-server拦截未登录请求<br>　　拦截从sso-client跳转至sso认证中心的未登录请求，跳转至登录页面，这个过程与sso-client完全一样</p><p>3、sso-server验证用户登录信息<br>　　用户在登录页面输入用户名密码，请求登录，sso认证中心校验用户信息，校验成功，将会话状态标记为“已登录”</p><p>@RequestMapping(“/login”)<br>public String login(String username, String password, HttpServletRequest req) {<br>    this.checkLoginInfo(username, password);<br>    req.getSession().setAttribute(“isLogin”, true);<br>    return “success”;<br>}<br>4、sso-server创建授权令牌<br>　　授权令牌是一串随机字符，以什么样的方式生成都没有关系，只要不重复、不易伪造即可，下面是一个例子</p><p>String token = UUID.randomUUID().toString();<br>5、sso-client取得令牌并校验<br>　　sso认证中心登录后，跳转回子系统并附上令牌，子系统（sso-client）取得令牌，然后去sso认证中心校验，在LoginFilter.java的doFilter()中添加几行</p><p>// 请求附带token参数<br>String token = req.getParameter(“token”);<br>if (token != null) {<br>    // 去sso认证中心校验token<br>    boolean verifyResult = this.verify(“sso-server-verify-url”, token);<br>    if (!verifyResult) {<br>        res.sendRedirect(“sso-server-url”);<br>        return;<br>    }<br>    chain.doFilter(request, response);<br>}<br>　　verify()方法使用httpClient实现，这里仅简略介绍，httpClient详细使用方法请参考官方文档</p><p>HttpPost httpPost = new HttpPost(“sso-server-verify-url-with-token”);<br>HttpResponse httpResponse = httpClient.execute(httpPost);<br>6、sso-server接收并处理校验令牌请求<br>　　用户在sso认证中心登录成功后，sso-server创建授权令牌并存储该令牌，所以，sso-server对令牌的校验就是去查找这个令牌是否存在以及是否过期，令牌校验成功后sso-server将发送校验请求的系统注册到sso认证中心（就是存储起来的意思）</p><p>　　令牌与注册系统地址通常存储在key-value数据库（如redis）中，redis可以为key设置有效时间也就是令牌的有效期。redis运行在内存中，速度非常快，正好sso-server不需要持久化任何数据。</p><p>　　令牌与注册系统地址可以用下图描述的结构存储在redis中，可能你会问，为什么要存储这些系统的地址？如果不存储，注销的时候就麻烦了，用户向sso认证中心提交注销请求，sso认证中心注销全局会话，但不知道哪些系统用此全局会话建立了自己的局部会话，也不知道要向哪些子系统发送注销请求注销局部会话</p><p><img src="https://images2015.cnblogs.com/blog/797930/201611/797930-20161129155245506-1069288802.png" alt=""></p><p>7、sso-client校验令牌成功创建局部会话<br>　　令牌校验成功后，sso-client将当前局部会话标记为“已登录”，修改LoginFilter.java，添加几行</p><p>if (verifyResult) {<br>    session.setAttribute(“isLogin”, true);<br>}<br>　　sso-client还需将当前会话id与令牌绑定，表示这个会话的登录状态与令牌相关，此关系可以用java的hashmap保存，保存的数据用来处理sso认证中心发来的注销请求</p><p>8、注销过程<br>　　用户向子系统发送带有“logout”参数的请求（注销请求），sso-client拦截器拦截该请求，向sso认证中心发起注销请求</p><p>String logout = req.getParameter(“logout”);<br>if (logout != null) {<br>    this.ssoServer.logout(token);<br>}<br>　　sso认证中心也用同样的方式识别出sso-client的请求是注销请求（带有“logout”参数），sso认证中心注销全局会话</p><p>@RequestMapping(“/logout”)<br>public String logout(HttpServletRequest req) {<br>    HttpSession session = req.getSession();<br>    if (session != null) {<br>        session.invalidate();//触发LogoutListener<br>    }<br>    return “redirect:/“;<br>}<br>　　sso认证中心有一个全局会话的监听器，一旦全局会话注销，将通知所有注册系统注销</p><p>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>public class LogoutListener implements HttpSessionListener {<br>    @Override<br>    public void sessionCreated(HttpSessionEvent event) {}<br>    @Override<br>    public void sessionDestroyed(HttpSessionEvent event) {<br>        //通过httpClient向所有注册系统发送注销请求<br>    }<br>}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringBoot/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/07/01/SpringBoot/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<pre><code>#SpringBoot�������ļ�.properties</code></pre><h1 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h1><pre><code>logging.config=classpath:logback-spring.xml</code></pre><h1 id="Mysql-Configuration"><a href="#Mysql-Configuration" class="headerlink" title="Mysql Configuration"></a>Mysql Configuration</h1><pre><code>spring.datasource.url=jdbc:mysql://localhost:3306/pgc                          #���ݿ��ַspring.datasource.username=root                                                #�˺�spring.datasource.password=password                                            #����</code></pre><h1 id="Keep-the-connection-alive-if-idle-for-a-long-time-needed-in-production"><a href="#Keep-the-connection-alive-if-idle-for-a-long-time-needed-in-production" class="headerlink" title="Keep the connection alive if idle for a long time (needed in production)"></a>Keep the connection alive if idle for a long time (needed in production)</h1><pre><code>spring.datasource.testWhileIdle=true                                        #ָ�������Ƿ񱻿��������ӻ���������spring.datasource.validationQuery=SELECT 1                                    #��֤�����ӳ�ȡ��������</code></pre><h1 id="Show-or-not-log-for-each-sql-query"><a href="#Show-or-not-log-for-each-sql-query" class="headerlink" title="Show or not log for each sql query"></a>Show or not log for each sql query</h1><pre><code>spring.jpa.show-sql=true                                                    #����ʱ���sql���</code></pre><h1 id="Hibernate-ddl-auto-save-save-drop-update"><a href="#Hibernate-ddl-auto-save-save-drop-update" class="headerlink" title="Hibernate ddl auto (save, save-drop, update)"></a>Hibernate ddl auto (save, save-drop, update)</h1><pre><code>spring.jpa.hibernate.ddl-auto=update                                        #hibernate���ݶ���Ĺ��򣬸���</code></pre><h1 id="Set-to-true-if-we-need-to-populate-the-database-using-‘data-sql’"><a href="#Set-to-true-if-we-need-to-populate-the-database-using-‘data-sql’" class="headerlink" title="Set to true if we need to populate the database using ‘data.sql’."></a>Set to true if we need to populate the database using ‘data.sql’.</h1><pre><code>spring.datasource.initialize=false                                            #ָ����ʼ������Դ���Ƿ���data.sql����ʼ����Ĭ��: true</code></pre><h1 id="Naming-strategy"><a href="#Naming-strategy" class="headerlink" title="Naming strategy"></a>Naming strategy</h1><pre><code>spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy    #ָ����������</code></pre><h1 id="The-SQL-dialect-makes-Hibernate-generate-better-SQL-for-the-chosen-database"><a href="#The-SQL-dialect-makes-Hibernate-generate-better-SQL-for-the-chosen-database" class="headerlink" title="The SQL dialect makes Hibernate generate better SQL for the chosen database"></a>The SQL dialect makes Hibernate generate better SQL for the chosen database</h1><pre><code>spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect    #hibernate����</code></pre><h1 id="Mongodb-Configuration"><a href="#Mongodb-Configuration" class="headerlink" title="Mongodb Configuration"></a>Mongodb Configuration</h1><pre><code>spring.data.mongodb.uri=mongodb://localhost:27000/pgc                        #mongodb��uri</code></pre><h1 id="OSS-Configuration"><a href="#OSS-Configuration" class="headerlink" title="OSS Configuration"></a>OSS Configuration</h1><pre><code>oss.endpoint=oss-cn-shanghai.aliyuncs.com                                    #oss�����Ƶ��������oss.access.key.id=LTAIxYKpaBqbAIK3oss.access.key.secret=WuTDXWS8PBqSdqMuMxrPfT5ryYmmd0oss.bucket.name=new-pgcspring.http.multipart.maxFileSize=100MBspring.http.multipart.maxRequestSize=100MB</code></pre><h1 id="SSO-Configuration"><a href="#SSO-Configuration" class="headerlink" title="SSO Configuration"></a>SSO Configuration</h1><pre><code>security.enabled=true</code></pre><p>#Ĭ��callback<br>    security.defaultCallback=/</p><p>#sso��֤token��ַ<br>    security.ssoServerValidate=<a href="http://106.15.179.107:7127/api/c/sso/validate-token" target="_blank" rel="noopener">http://106.15.179.107:7127/api/c/sso/validate-token</a></p><p>#�������Ӧ��û�е�½��ȥ��֤<br>    security.ssoServerAuth=<a href="http://106.15.179.107:7127/api/c/sso/auth" target="_blank" rel="noopener">http://106.15.179.107:7127/api/c/sso/auth</a></p><p>#����Ӧ������<br>    security.ssoKey=574163310</p><p>#����Ӧ�õ�ַ, should be defined by the same field under each app</p><h1 id="security-appHost-http-localhost-8000"><a href="#security-appHost-http-localhost-8000" class="headerlink" title="security.appHost=http://localhost:8000"></a>security.appHost=<a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a></h1><p>#gizp<br>    spring.resources.chain.gzipped=true</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/07/01/SpringBoot/SpringBoot%E5%B8%B8%E7%94%A8Listener/"/>
      <url>/2019/07/01/SpringBoot/SpringBoot%E5%B8%B8%E7%94%A8Listener/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-的几种常见监听器"><a href="#SpringBoot-的几种常见监听器" class="headerlink" title="SpringBoot 的几种常见监听器"></a>SpringBoot 的几种常见监听器</h1><p>例如：在Web项目启动时，需要执行一段代码，该写在哪里呢？<br>解决方法：注册监听器监听 ServletContext 创建的钩子函数，并重写自己的实现</p><h2 id="1-创建Listener"><a href="#1-创建Listener" class="headerlink" title="1. 创建Listener"></a>1. 创建Listener</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitDemo</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Web Initialized!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span>ServletContextEvent sce<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Web Destroyed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>使用 @WebListener 注册声明类为监听器</p></blockquote><h2 id="2-添加-servlet-扫描"><a href="#2-添加-servlet-扫描" class="headerlink" title="2. 添加 servlet 扫描"></a>2. 添加 servlet 扫描</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.test.*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>App<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h2><p>启动项目，可在堆栈信息中找到对应的输出</p><h2 id="4-常见监听器接口"><a href="#4-常见监听器接口" class="headerlink" title="4. 常见监听器接口"></a>4. 常见监听器接口</h2><ol><li>ServletContextListener - 监听 ServletContext 对象的创建及销毁<ol><li>contextInitialized(ServletContextEventsce) - web应用程序初始化进程正在启动的通知</li><li>contextDestroyed(ServletContextEvent sce) - 通知servlet上下文即将关闭。所有servlet和过滤器之前已经被销毁()</li></ol></li><li>HttpSessionListener - 监听 session 对象的创建及销毁<ol><li>sessionCreated(HttpSessionEvent se) - 创建会话的通知</li><li>sessionDestroyed(HttpSessionEvent se) - 会话即将失效的通知</li></ol></li><li>ServletRequestListener - 监听 request 对象的创建及销毁<ol><li>requestDestroyed(ServletRequestEvent src) - 请求将超出web应用程序的范围</li><li>requestInitialized(ServletRequestEvent src) - 请求将进入web应用程序的范围</li></ol></li><li>ServletContextAttributeListener - 监听 servletContext 对象中属性的变化<ol><li>attributeAdded(ServletContextAttributeEvent scae) - 通知servlet上下文中添加了一个新属性。在添加属性后调用</li><li>attributeRemoved(ServletContextAttributeEvent scae) - 从servlet上下文中删除现有属性的通知。删除属性后调用</li><li>attributeReplaced(ServletContextAttributeEvent scae) - 通知servlet上下文上的属性已被替换。替换属性后调用。</li></ol></li><li>HttpSessionAttributeListener - 监听 session 对象中属性的改变<ol><li>同 ServletContextAttributeListener</li></ol></li><li>ServletRequestAttributeListener - 监听request 对象中属性的改变<ol><li>同 ServletContextAttributeListener</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第五章 原型模式 - 对象的克隆</title>
      <link href="/2019/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/7.%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/7.%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-原型模式-对象的克隆"><a href="#第五章-原型模式-对象的克隆" class="headerlink" title="第五章 原型模式 - 对象的克隆"></a>第五章 原型模式 - 对象的克隆</h1><p>原型模式：使用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。属于一种对象创建型模式。</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h3><p>原型模式的工作原理很简单：将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝自己来实现创建过程。由于在软件系统中我们经常会遇到需要创建多个相同或者相似对象的情况，因此原型模式在真实开发中的使用频率还是非常高的。原型模式是一种“另类”的创建型模式，创建克隆对象的工厂就是原型类自身，工厂方法由克隆方法来实现。</p><h3 id="1-2-原型模式中的几个角色"><a href="#1-2-原型模式中的几个角色" class="headerlink" title="1.2 原型模式中的几个角色"></a>1.2 原型模式中的几个角色</h3><ol><li>Prototype - 抽象原型类<ol><li>声明克隆方法的接口，是所有具体原型类的公共父类</li></ol></li><li>ConcretePrototype - 具体原型类<ol><li>实现抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象</li></ol></li><li>Client - 客户类<ol><li>让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。</li></ol></li></ol><h3 id="1-3-案例"><a href="#1-3-案例" class="headerlink" title="1.3 案例"></a>1.3 案例</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">class</span> <span class="token class-name">WeeklyLog</span> <span class="token keyword">implements</span> <span class="token class-name">Clonealbe</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String date<span class="token punctuation">;</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    publci WeekLog <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Object obj <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            obj <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>WeekLog<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不支持复制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、浅克隆与深克隆"><a href="#二、浅克隆与深克隆" class="headerlink" title="二、浅克隆与深克隆"></a>二、浅克隆与深克隆</h2><h3 id="2-1-浅克隆"><a href="#2-1-浅克隆" class="headerlink" title="2.1 浅克隆"></a>2.1 浅克隆</h3><p>在浅克隆中，如果原型对象的成员是值类型，将复制一份给克隆对象；如果原型对象的成员变量是引用类型，则将引用对象的地址复制一份给克隆对象。也就是说，原型对象的引用类型变量与克隆对象中的变量指向同一内存地址。</p><p>即值类型成员变量会被复制，但是引用成员变量不会。</p><h3 id="2-2-深克隆"><a href="#2-2-深克隆" class="headerlink" title="2.2 深克隆"></a>2.2 深克隆</h3><p>在深克隆中，无论原型对象的成员变量是值类型还是引用类型，都将复制一份给克隆对象。</p><p>如果需要实现深克隆，可以通过序列化（Serialization）等方式实现：将对象写入到流，再从流中读出。</p><blockquote><p>Java语言提供的 Cloneable 接口和 Serializable 接口都是空接口，也称为标识接口。标识接口无任何方法定义，只提供告诉JRE这些接口的实现类是否支持克隆、序列化等功能。</p></blockquote><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>当创建新对象较为复杂时，可以使用原型模式简化对象的创建过程，复制一个已有实例以提高新实例的创建效率</li><li>扩展性较好，由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，而将具体原型类写在配置文件中</li><li>原型模式提供了简化的创建结构，工厂方法模式需要与产品等级结构对应的工厂等级结构，而原型模式则直接通过封装在原型类中的克隆方法实现</li><li>深克隆方式可以保存对象的状态</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>需要每个类配置一个克隆方法，且位于类内部，当对类进行改造时需要修改源码，违反了“开闭原则”</li><li>实现深克隆时较为复杂，对象的每一层子对象都需要进行深克隆</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>创建新对象成本较大（如初始化时间长、占用CPU资源多或网络资源占用多），新对象能够通过原型模式进行复制，复制相似对象再进行修改</li><li>可以通过原型模式+备忘录模式，来实现保存对象的状态</li><li>避免使用工厂模式来创建对象</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第四章 单例模式 - 确保对象的唯一性</title>
      <link href="/2019/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/6.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/6.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-单例模式-确保对象的唯一性"><a href="#第四章-单例模式-确保对象的唯一性" class="headerlink" title="第四章 单例模式 - 确保对象的唯一性"></a>第四章 单例模式 - 确保对象的唯一性</h1><p>单例模式用于确保对象的唯一性，为了确保系统中某一个类只有一个唯一实例，当这个唯一实例创建后，无法再创建一个同类型的其他对象。</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>单例模式：确保一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。属于对象创建型模式。</p><h3 id="1-2-单例模式中的角色"><a href="#1-2-单例模式中的角色" class="headerlink" title="1.2 单例模式中的角色"></a>1.2 单例模式中的角色</h3><ul><li>Singleton - 单例角色<ul><li>在单例类内容实现只生成一个实例，同时提供一个静态工厂方法用于获取该唯一实例</li><li>为了防止外部实例化，将其构造函数设计为私有</li><li>单例类内部顶一个Singleton类型的静态对象，作为外部共享的唯一实例</li></ul></li></ul><h2 id="二、懒汉模式与饿汉模式"><a href="#二、懒汉模式与饿汉模式" class="headerlink" title="二、懒汉模式与饿汉模式"></a>二、懒汉模式与饿汉模式</h2><h3 id="2-1-饿汉式单例类-线程安全"><a href="#2-1-饿汉式单例类-线程安全" class="headerlink" title="2.1 饿汉式单例类 - 线程安全"></a>2.1 饿汉式单例类 - 线程安全</h3><p><img src="https://i.loli.net/2019/07/04/5d1da0231e7a752730.png" alt="懒汉单例模式"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> EagerSingleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EagerSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>饿汉模式实现起来最为简单，在类加载时，静态变量 instance 就会被初始化，此时类的私有构造函数会被调用，单例类的唯一实例将被创建。</p><h3 id="2-2-懒汉式单例类（一）-线程安全"><a href="#2-2-懒汉式单例类（一）-线程安全" class="headerlink" title="2.2 懒汉式单例类（一） - 线程安全"></a>2.2 懒汉式单例类（一） - 线程安全</h3><p><img src="https://i.loli.net/2019/07/04/5d1da0b319cb857695.png" alt="懒汉单例模式"></p><p>懒汉模式能将类进行 延迟加载，即在需要使用时再加载实例，为了避免多线程调用 getInstance() 时实例化多个 LazySingleton，这里使用 synchronized 关键字进行加锁。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-懒汉式单例类（二）-线程不安全"><a href="#2-3-懒汉式单例类（二）-线程不安全" class="headerlink" title="2.3 懒汉式单例类（二） - 线程不安全"></a>2.3 懒汉式单例类（二） - 线程不安全</h3><p>虽然 synchronized 关键字进行了线程锁定，但是每次调用 getInstance() 方法时都会进行加锁操作，在多线程高并发场景下，会导致系统性能大大降低。</p><p>事实上，只需要在 new L:azySingleton() 时进行加锁即可，即第一次实例化实例时加锁。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-懒汉模式单例类（三-DoubleCheck）-线程不安全"><a href="#2-4-懒汉模式单例类（三-DoubleCheck）-线程不安全" class="headerlink" title="2.4 懒汉模式单例类（三 DoubleCheck） - 线程不安全"></a>2.4 懒汉模式单例类（三 DoubleCheck） - 线程不安全</h3><p>如果当两个线程同时进行了 if 条件之中，当线程A完成实例化之后，线程B继续执行，依旧会进行一次实例化。违背了单例模式的设计思想。</p><p>双重检测机制：因此我们需要在 synchronized 中在进行一次判断</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-5-懒汉模式单例类（四-volatile-DoubleCheck）-线程安全"><a href="#2-5-懒汉模式单例类（四-volatile-DoubleCheck）-线程安全" class="headerlink" title="2.5 懒汉模式单例类（四 volatile+DoubleCheck） - 线程安全"></a>2.5 懒汉模式单例类（四 volatile+DoubleCheck） - 线程安全</h3><p>上述代码看起来可能没什么问题，但是</p><p>instance = new LazySingleton() 在内存中的指令顺序应该为：</p><ol><li>instance 分配内存地址</li><li>实例化 LazySingleton</li><li>将实例化地址指向instance</li></ol><p>因为 JVM 的指令重排和优化，可能会导致以上执行顺序与所想像的不一致。最终导致单例出现问题，因此我们在静态实例 instance 前，加上 volatile 关键词，避免 instance 的实例化发生指令重排。</p><blockquote><p>因此<code>完整的懒汉模式</code>如下：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用volatile 修改时静态实例，避免指令重排序</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazySignleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法私有化，防止外部实例</span>    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态工厂类，用于返回唯一实例，且使用延迟加载技术</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一重检查，只有当instance 为空时才进行实例化</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 实例化时对当前类进行加锁，避免多线程同时实例化</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>LazySingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 第二重检查，避免当前线程通过第一重检查后其他线程已实例化过</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>缺点也很明显：1. volatile 关键词虽然能保证实例避免重排，但是只在1.5以上的版本才能生效 2. volatile关键词会屏蔽 JVM 的一些代码优化，可能导致系统运行效率降低</p></blockquote><h2 id="三、一种更好的单例实现方法"><a href="#三、一种更好的单例实现方法" class="headerlink" title="三、一种更好的单例实现方法"></a>三、一种更好的单例实现方法</h2><h2 id="3-1-懒汉模式与饿汉模式的缺点"><a href="#3-1-懒汉模式与饿汉模式的缺点" class="headerlink" title="3.1 懒汉模式与饿汉模式的缺点"></a>3.1 懒汉模式与饿汉模式的缺点</h2><p>饿汉模式：不能实现延迟加载，不管实例是否使用都将占据内存</p><p>饿汉模式：繁琐的线程安全控制，且性能会受到一定影响</p><h2 id="3-2-静态内部类单例-IoDH-线程安全"><a href="#3-2-静态内部类单例-IoDH-线程安全" class="headerlink" title="3.2 静态内部类单例 - IoDH - 线程安全"></a>3.2 静态内部类单例 - IoDH - 线程安全</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Signleton</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态内部类只有在第一次调用时才会进行加载</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HolderClass</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 因为instance 不是Singleton的成员变量，所以不会在Singleton加载时实例化</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过JVM特性来保证线程安全性，确保成员变量只能初始化一次</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> HolderClass<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Initialization Demand Holder 技术，在单例类内部增加一个静态内部类，在该内部类中创建单例对象，再将单例对象通过 getInstance() 方法返回给外部使用。</p><blockquote><p>但是IoDH依赖于JVM的特性，并不适用于所有语言。但是IoDH既可以实现延迟加载，又可以保证线程安全，又不影响性能，不失为一种最好的Java语言单例模式。</p></blockquote><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，严格控制客户如何访问</li><li>节约系统资源。因为内存中只存在一个对象，无需频繁的创建、销毁对象</li><li>允许可变数目的实例。可以通过变种，让getInstance返回至多几个实例</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>由于单例类没有抽象层，很难进行扩展</li><li>单例类职责过重，违背了“单一职责原则”。因为单例类即是工厂角色，提供工厂方法，又是产品角色，包含一些业务方法。将产品的创建和产品的功能融合到了一起</li><li>许多面向对象语言（如Java、C#）的自动垃圾回收技术，如果实例化的共享变量长时间不被使用。GC 会自动销毁并回收资源，导致单例对象状态的丢失。</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>系统只需要一个实例对象。如资源消耗过大的对象、资源管理器等只能实例一次的对象</li><li>客户调用类的单个实例只允许使用一个公共访问点，不能通过其他途径访问该实例。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第三章 抽象工厂模式</title>
      <link href="/2019/06/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/5.%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/5.%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-抽象工厂模式"><a href="#第三章-抽象工厂模式" class="headerlink" title="第三章 抽象工厂模式"></a>第三章 抽象工厂模式</h1><p>在工厂方法模式中，通过引入工厂等级结构，解决了 简单工厂模式 中工厂类过于庞大，职责过重的问题。但是由于工厂方法模式中的每一个工厂只生产一类产品，导致系统中存在大量工厂类，增加系统开销。</p><p>因此我们需要将一些相关的产品组成一个“产品族”，由同一个工厂生产。</p><h2 id="一、抽象工厂模式"><a href="#一、抽象工厂模式" class="headerlink" title="一、抽象工厂模式"></a>一、抽象工厂模式</h2><h3 id="1-1-设计一款界面皮肤库"><a href="#1-1-设计一款界面皮肤库" class="headerlink" title="1.1 设计一款界面皮肤库"></a>1.1 设计一款界面皮肤库</h3><p>设计一款界面皮肤库，可以通过菜单来选择皮肤，不同的皮肤将提供视觉效果不同的按钮、文本框、组合框等。</p><p>按照之前的 <code>工厂方法模式</code> 设计，如下：</p><p><img src="https://i.loli.net/2019/07/04/5d1d5ce8d1f3176430.jpg" alt="工厂方法模式.jpg"></p><p>当我们需要增加 Winter风格 的按钮时，只需要继承抽象工厂并生产出对应的按钮即可。该系统具备良好的灵活性和可扩展性，开发可以在不修改现有代码的基础上增加新的皮肤。</p><h3 id="1-2-缺陷与问题"><a href="#1-2-缺陷与问题" class="headerlink" title="1.2 缺陷与问题"></a>1.2 缺陷与问题</h3><p>该设计模式提供了大量的工厂来创建具体的界面组件，可以灵活的配置风格，但是存在以下问题：</p><ol><li>新增产品时，需要同时新增一个具体工厂类，类的个数成对增加，会增大系统的开销</li><li>由于某一种风格的按钮、文本框、组合框通常都是一起使用的，但是因为其工厂方法分离，可能会导致使用时的选择失误</li></ol><h3 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h3><p>将一组产品类定义为一个“产品族”（如按钮、文本框、组合框统称为一个产品族），将之前一个产品对应一个具体工厂的模式改为-一个产品族对应一个产品工厂（如Spring风格工厂，能够生产Spring风格按钮、Spring风格文本框、Spring风格组合框）。</p><h3 id="1-4-产品等级结构与产品族"><a href="#1-4-产品等级结构与产品族" class="headerlink" title="1.4 产品等级结构与产品族"></a>1.4 产品等级结构与产品族</h3><ol><li>产品等级结构<ol><li>在<code>1.3 解决方案</code> 中，抽象工厂与Spring风格工厂、Summer风格工厂之间的关系构成了一个产品等级结构</li><li>抽象工厂类是父类，具体工厂类是子类</li><li>产品等级扩展，只需要继续实现子类即可（如新增Winter风格工厂，用于生产Winter风格的按钮、文本框、组合框）</li></ol></li><li>产品族：<ol><li>即各个具体工厂生产的产品统称（如Spring风格工厂，能够生产Spring风格按钮、Spring风格文本框、Spring风格组合框）</li></ol></li></ol><p>当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是位于多个不同产品等级结构、属于不同类型的具体产品时就可以使用抽象工厂模式。</p><h2 id="二、抽象工厂模式"><a href="#二、抽象工厂模式" class="headerlink" title="二、抽象工厂模式"></a>二、抽象工厂模式</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>抽象工厂模式：提供一个创建一系列相关或互相依赖对象的接口，而无须指定它们具体的类。</p><p>抽象工厂模式又称为 Kit模式，属于对象创建型模式。</p><p>在抽象工厂模式中，每一个具体工厂都提供多个工厂方法，用于生产多种不同类型的产品。这些产品构成了一个产品族。</p><p><img src="https://i.loli.net/2019/07/04/5d1d63c564e9523844.jpg" alt="抽象工厂模式"></p><p>从图中可以看出，如果需要新增其他风格的按钮、文本框，只需要新增一个具体工厂，由该工厂的多个工厂方法产出具体的产品。</p><p>同时，缺点也很明显，如果我们想新增图片类型产品，必须同时修改抽象工厂及其所有的具体工厂。</p><h3 id="2-2-抽象工厂模式中的几个角色"><a href="#2-2-抽象工厂模式中的几个角色" class="headerlink" title="2.2 抽象工厂模式中的几个角色"></a>2.2 抽象工厂模式中的几个角色</h3><ol><li>AbstractFactory - 抽象工厂<ol><li>声明了一组用于创建一族产品的方法，每一个方法对应一种产品</li></ol></li><li>ConcreteFactory - 具体工厂<ol><li>实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成一个产品族</li></ol></li><li>AbstractProduct - 抽象产品<ol><li>每种产品的抽象对象</li></ol></li><li>ConcreteProduct 具体产品<ol><li>由具体工厂生产的具体产品对象</li></ol></li></ol><h3 id="2-3-具体实践"><a href="#2-3-具体实践" class="headerlink" title="2.3 具体实践"></a>2.3 具体实践</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 手机游戏软件 * 针对 Symbian、Android、WindowsPhone 等多个智能手机平台， * 提供不同的游戏操作控制和游戏界面控制 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gaming</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 抽象产品类</span>    <span class="token keyword">interface</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 具体产品类</span>    <span class="token keyword">class</span> <span class="token class-name">SymbianOperation</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">AndroidOperation</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">WindowsPhoneOperation</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">HML</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">SymbianHML</span> <span class="token keyword">implements</span> <span class="token class-name">HML</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">AndroidHML</span> <span class="token keyword">implements</span> <span class="token class-name">HML</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">WindowsPhoneHML</span> <span class="token keyword">implements</span> <span class="token class-name">HML</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 抽象工厂类</span>    <span class="token keyword">interface</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>        Operation <span class="token function">getOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HML <span class="token function">getHML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 具体工厂类</span>    <span class="token keyword">class</span> <span class="token class-name">SymbianFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Operation <span class="token function">getOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SymbianOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> HML <span class="token function">getHML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SymbianHML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">AndroidFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Operation <span class="token function">getOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> HML <span class="token function">getHML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidHML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">WindowsPhoneFactory</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Operation <span class="token function">getOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsPhoneOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> HML <span class="token function">getHML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsPhoneHML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、“开闭原则”的倾斜性"><a href="#三、“开闭原则”的倾斜性" class="headerlink" title="三、“开闭原则”的倾斜性"></a>三、“开闭原则”的倾斜性</h2><p>在抽象工厂模式中，增加新的产品族很方便（如增加Winter类型的界面），但是增加新的产品等级结构很麻烦（如增加单选框类型的产品，需要修改抽象工厂及其所有的具体工厂），这种性质被称为“开闭原则”的倾斜性。</p><p>“开闭原则”要求系统对扩展开发，对修改封闭，通过扩展达到增强其功能的目的，对于设计多个产品族与多个产品等级结构的系统，其功能增强包括两方面：</p><ol><li>增加产品族，很好地支持了“开闭原则”，只需新增具体产品和新增一个具体工厂即可</li><li>增加产品等级结构：违背了“开闭原则”，因为需要修改所有的抽象工厂与具体工厂才能实现扩展</li></ol><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>抽象工厂模式隔离了具体类的生成，使客户不需要知道何时被创建</li><li>当一个产品族中的多个对象被设计为一起工作时，它能够保证客户端始终只使用一个产品族对象</li><li>增加新的产品族很方便，无须修改已有系统，符合“开闭原则”</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>增加新的产品等级结构时，违背了“开闭原则”</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>系统不依赖于产品类的具体创建、组合及表达的细节</li><li>系统中有多于一个的产品族，且每次只使用其中某一个产品族</li><li>同一个产品族的产品配合使用</li><li>产品等级结构稳定，设计完成后，不再修改系统中新的产品等级结构</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第一章 简单工厂模式</title>
      <link href="/2019/06/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/3.%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/3.%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-简单工厂模式"><a href="#第一章-简单工厂模式" class="headerlink" title="第一章 简单工厂模式"></a>第一章 简单工厂模式</h1><h2 id="一、设计图表库"><a href="#一、设计图表库" class="headerlink" title="一、设计图表库"></a>一、设计图表库</h2><p>设计一个图表库，用于为系统提供各种不同外观的图表，如柱状图、饼状图、折线图等。</p><h3 id="1-1-初步设计"><a href="#1-1-初步设计" class="headerlink" title="1.1 初步设计"></a>1.1 初步设计</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Chart</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String type<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 图表类型</span>    <span class="token keyword">public</span> <span class="token function">Chart</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"histogram"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化柱状图</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化饼状图</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化折线图</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"histogram"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示柱状图</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示饼状图</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"line"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 显示折线图</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-存在的问题"><a href="#1-2-存在的问题" class="headerlink" title="1.2 存在的问题"></a>1.2 存在的问题</h3><p>该类在设计时存在如下几个问题：</p><ol><li>Chart 类中包含许多 if…else 代码块，代码冗长，难以阅读、维护和测试；大量的条件判断还将影响系统的性能</li><li>Chart 类职责过重，负责初始化和显示所有图表对象。违反了“单一职责原则”，不利于类的重用和维护；而且将大量的对象初始化代码写在构造函数中，在初始化对象时需要条件判断，降低了对象创建的效率</li><li>违反了“开闭原则”，当需要增加新类型的图表时，必须修改 Chart 对象的代码</li><li>客户端只能通过 new 关键字来直接创建 Chart 对象，与客户端耦合度较高，对象的创建和使用无法分离</li><li>客户端中缺少其它初始化设置，如果在客户端对图表的颜色、高度等进行设置，则会在每次创建对象时都会出现，导致代码的重复</li></ol><h3 id="1-3-解决思路"><a href="#1-3-解决思路" class="headerlink" title="1.3 解决思路"></a>1.3 解决思路</h3><p>引入工厂类，进行抽象与拆分</p><h2 id="二、简单工厂模式"><a href="#二、简单工厂模式" class="headerlink" title="二、简单工厂模式"></a>二、简单工厂模式</h2><h3 id="2-1-设计流程"><a href="#2-1-设计流程" class="headerlink" title="2.1 设计流程"></a>2.1 设计流程</h3><ol><li>将需要创建的各种不同对象的相关代码封装到不同的类中，这些类称为具体产品类</li><li>将它们公共的代码进行抽象和提取后封装在一个抽象产品类中，每个具体产品类都是抽象产品类的子类</li><li>提供一个工厂类用于创建各种产品，在工厂类中提供一个创建产品的工厂方法，该方法可以根据所传入的参数不同创建不同的具体对象</li><li>客户端只需调用工厂类的方法并传入相应的参数即可得到一个产品对象</li></ol><h3 id="2-2-简单工厂模式模式的定义"><a href="#2-2-简单工厂模式模式的定义" class="headerlink" title="2.2 简单工厂模式模式的定义"></a>2.2 简单工厂模式模式的定义</h3><p>定义一个工厂类，可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。因为在简单工厂模式中用于创建实例的方法是静态方法，<br>因此简单工厂模式又被称为静态工厂模式，属于类创建型模式。</p><h3 id="2-3-简单工厂模式中的几个角色"><a href="#2-3-简单工厂模式中的几个角色" class="headerlink" title="2.3 简单工厂模式中的几个角色"></a>2.3 简单工厂模式中的几个角色</h3><ol><li>Factory（工厂角色）<ol><li>即工厂类，是简单工厂模式的核心，负责实现创建所有产品实例的内部逻辑；</li><li>工厂类可以被外界直接调用，创建所需的产品对象；</li><li>在工厂类中提供了静态的工厂方法，返回类型为抽象产品类；</li></ol></li><li>Product（抽象产品角色）<ol><li>是工厂类所创建的对象的父类，封装各产品对象的公共方法</li><li>抽象产品类的引入，提供了系统的灵活性，使得在工厂类只需定义一个通用的工厂方法，因为所创建的具体产品对象都是其子类对象</li></ol></li><li>ConcreteProduct（具体产品角色）<ol><li>是简单工厂模式的创建目标，所有被创建的对象都充当这个角色的某个类的实例。</li><li>每个具体产品角色都继承了抽象产品角色，需要实现在抽象产品中声明的抽象方法</li></ol></li></ol><h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><h3 id="3-1-产品抽象类"><a href="#3-1-产品抽象类" class="headerlink" title="3.1 产品抽象类"></a>3.1 产品抽象类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用简单工厂模式时，需要先对产品类进行重构 * 根据实际情况设计一个产品层次结构，将所有产品类公共的代码移至抽象类，并声明一些抽象方法供具体产品类类实现 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Chart</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-具体产品类"><a href="#3-2-具体产品类" class="headerlink" title="3.2 具体产品类"></a>3.2 具体产品类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 具体产品类实现了抽象产品类中声明的抽象业务方法，不同的具体产品类可以提供不同的实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HistogramChart</span> <span class="token keyword">implements</span> <span class="token class-name">Chart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">HistogramChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成柱状图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示柱状图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LineChart</span> <span class="token keyword">implements</span> <span class="token class-name">Chart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">LineChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成折线图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示折线图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PieChart</span> <span class="token keyword">implements</span> <span class="token class-name">Chart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">PieChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成饼状图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示饼状图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-工厂方法类"><a href="#3-3-工厂方法类" class="headerlink" title="3.3 工厂方法类"></a>3.3 工厂方法类</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 简单工厂模式的核心就是工厂类 * 通过工厂类的静态工厂方法来创建具体产品对象，而非直接通过new来创建产品对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChartFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Chart <span class="token function">getChart</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"histogram"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HistogramChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"pic"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PieChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"line"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LineChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-客户端测试"><a href="#3-4-客户端测试" class="headerlink" title="3.4 客户端测试"></a>3.4 客户端测试</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 客户端测试代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Chart pie <span class="token operator">=</span> ChartFactory<span class="token punctuation">.</span><span class="token function">getChart</span><span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pie<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>简单工厂模式提供了专门的工厂类用于创建对象，将对象的创建和对象的使用分离。</p><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><ol><li>工厂类包含必要的判断逻辑，可以决定何时创建哪一个实例。免除客户端直接创建产品对象的职责，而仅仅“消费”产品。实现了对象创建和使用的分离</li><li>客户端无需知道所创建的具体产品类的类名，只需要知道具体参数即可。</li><li>可以将具体参数引入配置文件，在不修改客户端代码的情况下增删具体产品类，在一定程序上提供了系统灵活度。</li></ol><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><ol><li>工厂类的职责过重，集中了所有产品的创建逻辑。一旦工厂类出现问题，整个系统都会受到影响</li><li>使用简单工厂模式势必会增加系统中类的个数，增加了系统的复杂度和理解难度</li><li>系统拓展难度，新增产品时必须修改工厂逻辑，在产品类型较多时，可能造成工厂逻辑过于复杂，不利于系统扩展和维护</li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li></ol><h3 id="4-3-适用场景"><a href="#4-3-适用场景" class="headerlink" title="4.3 适用场景"></a>4.3 适用场景</h3><ol><li>工厂类负责创建的对象较少，因为需要创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂</li><li>客户端只知道传入工厂类的参数，对于如何创建对象并不关心</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》第二章 工厂方法模式</title>
      <link href="/2019/06/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/4.%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/4.%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-工厂方法模式"><a href="#第二章-工厂方法模式" class="headerlink" title="第二章 工厂方法模式"></a>第二章 工厂方法模式</h1><p>工厂方法模式又称为工厂模式、虚拟构造模式或多态工厂模式，是一种类创建型模式。</p><h2 id="一、设计一个日志记录器"><a href="#一、设计一个日志记录器" class="headerlink" title="一、设计一个日志记录器"></a>一、设计一个日志记录器</h2><p>设计一个日志记录器，可以通过多种途径保存系统的运行日志，如文件记录或数据库记录等。</p><h3 id="1-1-简单模式实现"><a href="#1-1-简单模式实现" class="headerlink" title="1.1 简单模式实现"></a>1.1 简单模式实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抽象产品类</span><span class="token keyword">interface</span> <span class="token class-name">Logger</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体产品类</span><span class="token keyword">class</span> <span class="token class-name">FileLogger</span> <span class="token keyword">implements</span> <span class="token class-name">Logger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件日志记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DatabaseLogger</span> <span class="token keyword">implements</span> <span class="token class-name">Logger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库日志记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 工厂类</span><span class="token keyword">class</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Logger <span class="token function">createLogger</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"file"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 创建文件、初始化文件日志、等其他操作</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"db"</span><span class="token operator">:</span>                <span class="token comment" spellcheck="true">// 连接数据库、创建数据库日志、等其他操作</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnSupportOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-缺陷与问题"><a href="#1-2-缺陷与问题" class="headerlink" title="1.2 缺陷与问题"></a>1.2 缺陷与问题</h3><p>虽然简单工厂模式实现了对象的创建和使用分离，但是仍然存在以下问题：</p><ol><li>工厂类过于庞大，包含了许多的条件判断，导致维护和测试难度增大</li><li>系统扩展不灵活，如果新增其他类型的日志记录器，必须修改静态工厂方法的业务逻辑，违反“开闭原则”</li></ol><h3 id="1-3-解决思路"><a href="#1-3-解决思路" class="headerlink" title="1.3 解决思路"></a>1.3 解决思路</h3><p>简单工厂方法的缺陷在于违反了“开闭原则”，每次新增新类型时必须修改静态工厂方法的业务逻辑。所有的产品都由一个工厂来创建，工厂职责较重，业务逻辑较为复杂，具体产品和工厂类之间耦合度高。严重影响了系统的灵活性和扩展性。</p><p>通过引入工厂方法模式，将工厂与产品拆分，降低耦合，提高系统灵活性。</p><h2 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>在工厂方法模式中，不再提供一个统一的工厂类来创建所有的产品对象，而是针对不同的产品提供不同的工厂，系统提供一个与产品等级结构对应的工厂等级结构。</p><p>工厂方法模式：定义一个用于创建对象的接口，让子类决定将哪一个类实例化。这样可以将类的实例化延迟到其子类。</p><h3 id="2-2-工厂方法模式中的角色"><a href="#2-2-工厂方法模式中的角色" class="headerlink" title="2.2 工厂方法模式中的角色"></a>2.2 工厂方法模式中的角色</h3><ol><li>Product（抽象产品）：产品对象的公共父类</li><li>ConcreteProduct（具体产品）：实现抽象产品接口，由具体工厂创建，一一对应</li><li>Factory（抽象工厂）：在抽象工厂中，声明了工厂方法，用于返回一个产品。<ol><li>抽象工厂是工厂方法模式的核心，所有创建对象的工厂类都必须实现该接口</li></ol></li><li>ConcreteFactory（具体工厂）：抽象工厂的子类，实现了抽象工厂中定义的方法，通过调用工厂方法，返回一个具体产品类的实例。</li></ol><p>工厂方法模式与简单方法模式的区别就在于，多了一个抽象工厂类。</p><p>在抽象工厂中声明工厂方法，有具体工厂类来创建子类，不同的具体工厂可以创建不同的具体产品。</p><p>在实际使用中，还可以在具体工厂中做一些初始化工作，如资源加载、环境配置等工作。</p><p>而客户端只需针对抽象工厂编程即可。</p><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 抽象产品类</span><span class="token keyword">interface</span> <span class="token class-name">Logger</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体产品类</span><span class="token keyword">class</span> <span class="token class-name">FileLogger</span> <span class="token keyword">implements</span> <span class="token class-name">Logger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件日志记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DatabaseLogger</span> <span class="token keyword">implements</span> <span class="token class-name">Logger</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库日志记录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象工厂类</span>interfact Factory<span class="token punctuation">{</span>    Logger <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体工厂类</span><span class="token keyword">class</span> <span class="token class-name">FileLoggerFactory</span> implement Factory <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Logger <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化环境等</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DatabaseLoggerFactory</span> implement Factory <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Logger <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化环境等</span>        <span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">DatabaseLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    Factory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Logger logger <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h2><p>使用 反射与配置文件 扩展系统。</p><p>为了让系统拥有更好的灵活性和可扩展性，在客户端代码汇总不使用new关键字来创建工厂对象，而是将具体工厂类的类名存储在配置文件中，通过读取配置文件获取类名字符串，再使用 Java反射机制，根据类名字符串来生成对象。</p><h2 id="五、隐藏工厂方法"><a href="#五、隐藏工厂方法" class="headerlink" title="五、隐藏工厂方法"></a>五、隐藏工厂方法</h2><p>为了进一步简化客户端的使用，还可以对客户端隐藏工厂方法，在抽象工厂中直接调用产品类的业务方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Logger logger <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> Logger <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样，客户端直接调用抽象工厂的方法即可调用具体的产品业务方法。</p><h2 id="六、工厂方法模式总结"><a href="#六、工厂方法模式总结" class="headerlink" title="六、工厂方法模式总结"></a>六、工厂方法模式总结</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>由工厂方法来创建客户所需的产品，以及隐藏了具体产品类的实例化过程，客户只需关心所需产品对应的工厂，无需关系创建细节，甚至无需知道产品类的类名。</li><li>基于工厂角色和产品角色的多态性设计是工厂方法的关键。能让工厂可以自主确定创建何种产品对象，而创建对象的细节封装在具体工厂的内部。</li><li>符合“开闭原则”，向系统中新增产品时，无需修改抽象工厂和抽象产品提供的接口，无需修改客户端，只需要添加一个具体工厂和具体产品即可。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>在添加新产品时，需要编写新的具体产品类，还需要提供对应的具体工厂类。系统中类的个数增加，提升了系统复杂度，更多的类需要编译和运行，会给系统带来一些额外开销。</li><li>由于考虑系统的可扩展性，需要引入抽象层，增加了系统抽象性和理解难度。且实现时可能用到DOM、反射等技术，增加系统实现难度</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>客户端不知道具体所需的对象，只知道工厂即可。</li><li>抽象工厂类通过其子类来指定创建哪个对象。<ol><li>抽象工厂类只需要提供一个创建工厂的接口，由其子类-具体工厂类来决定要创建的对象</li><li>利用面向对象的多态性和里氏替换原则，在程序运行时，由子类替换父类，从而使系统更容易扩展</li></ol></li></ol><h2 id="七、练习"><a href="#七、练习" class="headerlink" title="七、练习"></a>七、练习</h2><blockquote><p>使用工厂方法模式设计一个程序来读取各种不同类型的图片格式，针对每一种图片格式都设计一个图片读取器，如GIF图片读取器用于读取GIF格式的图片、JPG图片读取器用于读取JPG格式的图片。需充分考虑系统的灵活性和可扩展性。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》7大原则</title>
      <link href="/2019/06/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2019/06/25/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/2.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><table><thead><tr><th>设计原则名称</th><th>英文名称</th><th>定义</th></tr></thead><tbody><tr><td>单一职责原则</td><td>Single Responsibility Principle,SRP</td><td>一个类只负责一个功能领域中的相应职责</td></tr><tr><td>开闭原则</td><td>Open-Closed Principle,OCP</td><td>软件实体应对扩展开放，而对修改关闭</td></tr><tr><td>里氏替换原则</td><td>Liskov Substitution Principle,LSP</td><td>所有引用基类对象的地方能够透明地使用其子类的对象</td></tr><tr><td>依赖倒置原则</td><td>Dependence Inversion Principle,DSP</td><td>抽象不应该依赖于细节，细节应该依赖于抽象</td></tr><tr><td>接口隔离原则</td><td>Interface Segregation Principle,ISP</td><td>使用多个专门的接口，而不使用单一的总接口</td></tr><tr><td>合成复用原则</td><td>Composite Reuse Principle,CRP</td><td>尽量使用对象组合，而不是继承来达到复用的目的</td></tr><tr><td>迪米特法则</td><td>Law of Demetr,LoD</td><td>一个软件实体应当尽可能少地与其他实体发生相互作用</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JAVA 核心知识点整理》第十六章 设计模式</title>
      <link href="/2019/06/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/16.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%E3%80%8B/16.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="第十六章-设计模式"><a href="#第十六章-设计模式" class="headerlink" title="第十六章 设计模式"></a>第十六章 设计模式</h1><p>设计模式请详见我的另一篇博客： <a href="../../../../../06/24/读书笔记/《JavaDesignPatterns》/0.目录/">《JavaDesignPatterns》</a></p><p>目录如下：</p><ol><li>设计原则</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>单例模式</li><li>建造者模式</li><li>原型模式</li><li>适配器模式</li><li>装饰器模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li><li>迭代子模式</li><li>责任链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式</li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA 核心知识点整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》常用设计模式一览</title>
      <link href="/2019/06/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/1.%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E8%A7%88/"/>
      <url>/2019/06/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/1.%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="常用设计模式一览表"><a href="#常用设计模式一览表" class="headerlink" title="常用设计模式一览表"></a>常用设计模式一览表</h1><table><thead><tr><th>类型</th><th>模式名称</th><th>英文名</th></tr></thead><tbody><tr><td>创建型模式</td><td>单例模式</td><td>Single Pattern</td></tr><tr><td>Creational Pattern</td><td>简单工厂模式</td><td>Simple Factory Pattern</td></tr><tr><td></td><td>工厂方法模式</td><td>Factory Method Pattern</td></tr><tr><td></td><td>抽象工厂模式</td><td>Abstract Factory Pattern</td></tr><tr><td></td><td>原型模式</td><td>Prototype Pattern</td></tr><tr><td></td><td>建造者模式</td><td>Builder Pattern</td></tr><tr><td>结构型模式</td><td>适配器模式</td><td>Adapter Pattern</td></tr><tr><td>Structural Pattern</td><td>桥接模式</td><td>Bridge Pattern</td></tr><tr><td></td><td>组合模式</td><td>Composite Pattern</td></tr><tr><td></td><td>装饰模式</td><td>Decorator Pattern</td></tr><tr><td></td><td>外观模式</td><td>Facade Pattern</td></tr><tr><td></td><td>享元模式</td><td>Flyweight Pattern</td></tr><tr><td></td><td>代理模式</td><td>Proxy Pattern</td></tr><tr><td>行为型模式</td><td>责任链模式</td><td>Chain Of Responsibility Pattern</td></tr><tr><td>Behavioral Pattern</td><td>命令模式</td><td>Command Pattern</td></tr><tr><td></td><td>解释器模式</td><td>Interpreter Pattern</td></tr><tr><td></td><td>迭代器模式</td><td>Iterator Pattern</td></tr><tr><td></td><td>中介者模式</td><td>Mediator Pattern</td></tr><tr><td></td><td>备忘录模式</td><td>Memento Pattern</td></tr><tr><td></td><td>观察者模式</td><td>Observer Pattern</td></tr><tr><td></td><td>状态模式</td><td>State Pattern</td></tr><tr><td></td><td>策略模式</td><td>Strategy Pattern</td></tr><tr><td></td><td>模板方法模式</td><td>Template Method Pattern</td></tr><tr><td></td><td>访问者模式</td><td>Visitor Pattern</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java Design Patterns》读书笔记 - 目录</title>
      <link href="/2019/06/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/0.%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/06/24/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJavaDesignPatterns%E3%80%8B/0.%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="《Java-Design-Patterns》读书笔记-目录"><a href="#《Java-Design-Patterns》读书笔记-目录" class="headerlink" title="《Java Design Patterns》读书笔记 - 目录"></a>《Java Design Patterns》读书笔记 - 目录</h1><p><img src="https://i.loli.net/2019/07/04/5d1dc031039b536890.png" alt="设计模式"></p><a id="more"></a><ol><li><a href="../../../../../06/25/读书笔记/《JavaDesignPatterns》/2.面向对象设计原则/">设计原则</a></li><li><a href="../../../../../06/26/读书笔记/《JavaDesignPatterns》/3.简单工厂模式/">简单工厂模式/静态工厂模式</a></li><li><a href="../../../../../06/26/读书笔记/《JavaDesignPatterns》/4.工厂方法模式/">工厂方法模式/虚拟构造模式/多态工厂模式</a></li><li><a href="../../../../../06/26/读书笔记/《JavaDesignPatterns》/5.抽象工厂模式/">抽象工厂模式/Kit模式</a></li><li><a href="../../../../../06/27/读书笔记/《JavaDesignPatterns》/6.单例模式/">单例模式 - 懒汉模式/饿汉模式/IoDH</a></li><li><a href="../../../../../06/27/读书笔记/《JavaDesignPatterns》/7.原型模式/">原型模式 - 浅克隆与深克隆</a></li><li><a href="../../../../../07/05/读书笔记/《JavaDesignPatterns》/8.建造者模式/">建造者模式 - 复杂对象的组装与创建</a></li><li><a href="../../../../../07/06/读书笔记/《JavaDesignPatterns》/9.适配器模式/">适配器模式 - 不兼容结构的协调</a></li><li><a href="../../../../../07/08/读书笔记/《JavaDesignPatterns》/10.桥接模式/">桥接模式/柄体模式/接口模式 - 处理多维度变化</a></li><li><a href="../../../../../07/09/读书笔记/《JavaDesignPatterns》/11.组合模式/">组合模式 - 树形结构的处理</a></li><li><a href="../../../../../07/11/读书笔记/《JavaDesignPatterns》/12.装饰模式/">装饰模式 - 扩展系统功能</a></li><li><a href="../../../../../07/11/读书笔记/《JavaDesignPatterns》/13.外观模式/">外观模式</a></li><li><a href="../../../../../07/12/读书笔记/《JavaDesignPatterns》/14.享元模式/">享元模式 - 实现对象的复用</a></li><li><a href="../../../../../07/15/读书笔记/《JavaDesignPatterns》/15.代理模式/">代理模式</a></li><li><a href="../../../../../07/15/读书笔记/《JavaDesignPatterns》/16.责任链模式/">责任链模式 - 请求的链式处理</a></li><li><a href="../../../../../07/17/读书笔记/《JavaDesignPatterns》/17.命令模式/">命令模式 - 请求发送者和接收者解耦</a></li><li><a href="../../../../../07/22/读书笔记/《JavaDesignPatterns》/18.解释器模式/">解释器模式 - 自定义语言的实现</a></li><li>迭代器模式 - 遍历聚合对象中的元素</li><li>中介者模式 - 协调多个对象之间的交互</li><li>备忘录模式 - 撤销功能的实现</li><li>观察者模式 - 对象间的联动</li><li>状态模式 - 处理对象的多种状态及其相互转换</li><li>策略模式 - 算法的封装与切换</li><li>模板方法模式</li><li>访问者模式 - 操作复杂对象结构</li></ol><p>TODO: 试着找出Java、Spring、SpringMVC、MyBatis、JPA等框架中所使用到的设计模式。</p><p>本笔记来源于：《Java Design Pattern》一书。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第十章 MySQL 架构拆分</title>
      <link href="/2019/06/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/10.MySQL%E6%9E%B6%E6%9E%84%E6%8B%86%E5%88%86/"/>
      <url>/2019/06/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/10.MySQL%E6%9E%B6%E6%9E%84%E6%8B%86%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-MySQL-架构拆分"><a href="#第十章-MySQL-架构拆分" class="headerlink" title="第十章 MySQL 架构拆分"></a>第十章 MySQL 架构拆分</h1><h2 id="一、MySQL-主从复制架构"><a href="#一、MySQL-主从复制架构" class="headerlink" title="一、MySQL 主从复制架构"></a>一、MySQL 主从复制架构</h2><h2 id="二、MySQL-读写分离"><a href="#二、MySQL-读写分离" class="headerlink" title="二、MySQL 读写分离"></a>二、MySQL 读写分离</h2><h3 id="1-读服务器的负载均衡"><a href="#1-读服务器的负载均衡" class="headerlink" title="1. 读服务器的负载均衡"></a>1. 读服务器的负载均衡</h3><p>LVS</p><h3 id="2-keepalived-进行写-vip-迁移"><a href="#2-keepalived-进行写-vip-迁移" class="headerlink" title="2. keepalived 进行写 vip 迁移"></a>2. keepalived 进行写 vip 迁移</h3><h3 id="三、使用-MaxScale-解决读压力大的问题"><a href="#三、使用-MaxScale-解决读压力大的问题" class="headerlink" title="三、使用 MaxScale 解决读压力大的问题"></a>三、使用 MaxScale 解决读压力大的问题</h3>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第九章 数据库备份与恢复</title>
      <link href="/2019/06/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/9.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/"/>
      <url>/2019/06/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/9.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-数据库备份与恢复"><a href="#第九章-数据库备份与恢复" class="headerlink" title="第九章 数据库备份与恢复"></a>第九章 数据库备份与恢复</h1><h2 id="一、数据库备份"><a href="#一、数据库备份" class="headerlink" title="一、数据库备份"></a>一、数据库备份</h2><h3 id="1、数据库备份的划分"><a href="#1、数据库备份的划分" class="headerlink" title="1、数据库备份的划分"></a>1、数据库备份的划分</h3><ol><li>按照备份的结果分为：逻辑备份和物理备份<ol><li>逻辑备份的结果为SQL 语句，适用于所有存储引擎</li><li>物理备份是对数据库目录的拷贝，对于内存表只备份结构</li></ol></li><li>按照备份的数据分为：全量备份和增量备份<ol><li>全量备份是对整个数据库的一个完整备份</li><li>增量备份是在上次全量或增量备份的基础上，对于更改数据进行的备份</li></ol></li></ol><h3 id="2、使用-mysqldump-进行备份"><a href="#2、使用-mysqldump-进行备份" class="headerlink" title="2、使用 mysqldump 进行备份"></a>2、使用 mysqldump 进行备份</h3><blockquote><p>常用语法：</p><p>备份单数据库的表：mysqldump [OPTIONS] database [tables]</p><p>备份多个数据库：mysqldup [OPTIONS] –databases [OPTIONS] DB1[DB2…]</p><p>备份全部的数据库：mysqldump [OPTIONS] –all-databases [OPTIONS]</p></blockquote><blockquote><p>常用参数：</p><p>-u, –user=name</p><p>-p, –password[=name]</p><p>–single-transaction：在备份前开启一个事务，不能有 DDL 操作正在执行，常用于 InnoDB 存储引擎</p><p>-l, –lock-tables：备份时，只能对数据库进行读操作，对当前备份的表进行锁定，因此并不能保证备份时所有表的全局一致性，只能保证单表的一致性，常用于 MySAM 存储引擎</p><p>-x，–lock-all-tables：对所有的表同时锁定，可以解决-l 参数的问题</p><p>–master-data=[1/2]：默认值为1，只记录 change-master 语句；当指定了 –master-data 参数，但是没有指定 –single-transaction 时，默认使用 –lock-all-tables</p><p>-R，–routines：备份数据库中的存储过程</p><p>–triggers：备份数据库中的触发器</p><p>-E，–events：备份数据库中的调度事件</p><p>–hex-blob：对数据库中的二进制等类型转换为十六进制来保存，可以解决某些文本不可见的问题</p><p>–tab=path</p><p>-w，–where=’过滤条件’：条件导出，但是只能用在单表导出</p></blockquote><blockquote><p>备份数据库的账号需要具有以下权限：SELECT, RELOAD, LOCK  TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT, PROCESS</p></blockquote><h3 id="3、备份实例"><a href="#3、备份实例" class="headerlink" title="3、备份实例"></a>3、备份实例</h3><h4 id="1-创建一个用于备份数据库的用户"><a href="#1-创建一个用于备份数据库的用户" class="headerlink" title="1. 创建一个用于备份数据库的用户"></a>1. 创建一个用于备份数据库的用户</h4><p>进入 MySQL 实例中，并执行语句，创建用户：</p><pre class=" language-sh"><code class="language-sh">create user 'backup'@'localhost' identified by '123456';</code></pre><h4 id="2-为用户授予备份权限"><a href="#2-为用户授予备份权限" class="headerlink" title="2. 为用户授予备份权限"></a>2. 为用户授予备份权限</h4><pre class=" language-sh"><code class="language-sh">grant SELECT, RELOAD, LOCK  TABLES, REPLICATION CLIENT, SHOW VIEW, EVENT, PROCESS on *.* to 'backup'@'localhost';</code></pre><h4 id="3-使用事务备份数据库"><a href="#3-使用事务备份数据库" class="headerlink" title="3. 使用事务备份数据库"></a>3. 使用事务备份数据库</h4><p>情况一：备份 mc_order 数据库中的全部表数据：</p><pre class=" language-sh"><code class="language-sh">mysqldump -ubackup -p --master-data=2 --single-transaction --routines --triggers --events mc_order > mc_order.sql</code></pre><p>情况二：备份 mc-_order 数据库下的 order_master 表：</p><pre class=" language-sh"><code class="language-sh">mysqldump -ubackup -p --master-data=2 --single-transaction --routines --triggers --events mc_order order_master > order_master.sql</code></pre><p>情况三：备份全部的数据库，将所有的数据库都保存在 mc.sql 下：</p><pre class=" language-sh"><code class="language-sh">mysqldump -ubackup -p --master-data=1 --single-transaction --routines --triggers --events --all-databases > mc.sql</code></pre><p>情况四：备份 mc_order 数据库下的每个表，至指定的目录文件下，即 mc_order 下的每张表都是区分开的：</p><p>注意，使用 –tab 命令需要用户具有 file 写文件的权限：</p><pre class=" language-sh"><code class="language-sh">grant file to 'backup'@'localhost';</code></pre><pre class=" language-sh"><code class="language-sh">mysqldump -ubackup -p --master-data=2 --single-transaction --routines --triggers --events --tab="/data/db_backup/mc_order" mc_order;</code></pre><p>情况五：备份 mc_oder 下的 order_master 表中 id为1000-1050 的数据：</p><pre class=" language-sh"><code class="language-sh">mysqldump -ubackup -p --master-data=2 --single-transaction --routines --where "order_id>1000 and order_id<1050" mc_order order_master > order_master_1000.sql</code></pre><h3 id="四、备份脚本"><a href="#四、备份脚本" class="headerlink" title="四、备份脚本"></a>四、备份脚本</h3><pre class=" language-sh"><code class="language-sh">#!/bin/bash##########Basic paramters ######DAY=`date +%Y%m%d`Environment=$(/sbin/ifconifg | grep "inet addr" | head -1 |grep -v "127.0.0.1" | awk '{print $2;}' | awk -F':' '{print $2;}')USER="backup"PASSWD="123456"HostPort="3306"MYSQLBASE="/home/sql"DATADIR="/data/db_backup/${DAY}"MYSQL=`/usr/bin/whick mysql`mkdir -p ${DATADIR}Dump(){ ${MYSQLDUMP} --master-data=2 --single-transaction --routines --triggers --events -u${USER} -p${PASSWD} -P${HostPort} ${database} > ${DATADIR}/${Environment}-${database}.sql cd ${DATADIR} gzip ${Environment}-${database}.sql}for db in `echo "SELECT schema_name FROM information_schema.schemata where schema_name not in ('information_schema','sys','performance_schema')" | ${MYSQL} -u${USER} -p${PASSWD} --skip-column-names`do  database=${db}  Dumpdone</code></pre><h2 id="二、数据库恢复"><a href="#二、数据库恢复" class="headerlink" title="二、数据库恢复"></a>二、数据库恢复</h2><h3 id="1-使用-mysqldump-恢复语句"><a href="#1-使用-mysqldump-恢复语句" class="headerlink" title="1. 使用 mysqldump 恢复语句"></a>1. 使用 mysqldump 恢复语句</h3><p>数据的恢复是单线程进行的，因此数据量越大，执行效率可能越慢</p><h3 id="2-如何进行指定时间点的恢复"><a href="#2-如何进行指定时间点的恢复" class="headerlink" title="2. 如何进行指定时间点的恢复"></a>2. 如何进行指定时间点的恢复</h3><ol><li>先决条件<ol><li>具有指定时间点前的一个全被</li><li>具有自上次全备后到指定时间点的所有二进制日志</li></ol></li></ol><h3 id="3-实时二进制日志备份"><a href="#3-实时二进制日志备份" class="headerlink" title="3. 实时二进制日志备份"></a>3. 实时二进制日志备份</h3><h3 id="4-使用-xtrabackup-进行备份"><a href="#4-使用-xtrabackup-进行备份" class="headerlink" title="4. 使用 xtrabackup 进行备份"></a>4. 使用 xtrabackup 进行备份</h3><h3 id="5-使用-innobackupex-进行全备恢复"><a href="#5-使用-innobackupex-进行全备恢复" class="headerlink" title="5. 使用 innobackupex 进行全备恢复"></a>5. 使用 innobackupex 进行全备恢复</h3><h3 id="6-使用-xtrabackup-进行增量备份"><a href="#6-使用-xtrabackup-进行增量备份" class="headerlink" title="6. 使用 xtrabackup 进行增量备份"></a>6. 使用 xtrabackup 进行增量备份</h3><h2 id="三、备份计划"><a href="#三、备份计划" class="headerlink" title="三、备份计划"></a>三、备份计划</h2>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第八章 MySQL 慢查询日志</title>
      <link href="/2019/06/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/8.MySQL%E6%85%A2%E6%9F%A5%E6%97%A5%E5%BF%97/"/>
      <url>/2019/06/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/8.MySQL%E6%85%A2%E6%9F%A5%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-MySQL-慢查询日志"><a href="#第八章-MySQL-慢查询日志" class="headerlink" title="第八章 MySQL 慢查询日志"></a>第八章 MySQL 慢查询日志</h1><p>在业务中，无法保证对程序中的每一条SQL 都进行优化，那么就需要对某一些指定条件的 sql 进行优化。</p><h2 id="一、捕获有问题的SQL"><a href="#一、捕获有问题的SQL" class="headerlink" title="一、捕获有问题的SQL"></a>一、捕获有问题的SQL</h2><h3 id="启用-mysql-慢查询日志"><a href="#启用-mysql-慢查询日志" class="headerlink" title="启用 mysql 慢查询日志"></a>启用 mysql 慢查询日志</h3><ol><li>set global show_query_log_file = /sql_log/slow_log.log<ol><li>慢查询日志的log文件位置</li></ol></li><li>set global log_queires_not_using_indexes = on;<ol><li>是否对未使用索引的sql进行抓取</li></ol></li><li>set global long_query_time = 0.001;<ol><li>抓取执行超过多少时间的sql，与2不冲突</li></ol></li><li>set global  low_query_log = on;<ol><li>开启慢查询日志</li></ol></li></ol><h3 id="如何分析慢查询日志"><a href="#如何分析慢查询日志" class="headerlink" title="如何分析慢查询日志"></a>如何分析慢查询日志</h3><p>如果存在很多未使用索引的sql，或者存在很多慢执行的sql，那么会在短时间内产生大量的日志记录。</p><p>此时就需要 mysql 提供的 mysqldumpslow 来进行分析：</p><pre class=" language-sh"><code class="language-sh">mysqldumpslow slow-mysql.log</code></pre><p>mysqldupslow 会把相同的sql 汇总在一起，方便分析慢查询日志中的执行计划，有目的的进行优化。</p>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第七章 MySQL 执行计划优化</title>
      <link href="/2019/06/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/7.MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E4%BC%98%E5%8C%96/"/>
      <url>/2019/06/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/7.MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-MySQL-执行计划优化"><a href="#第七章-MySQL-执行计划优化" class="headerlink" title="第七章 MySQL 执行计划优化"></a>第七章 MySQL 执行计划优化</h1><p>通过 EXPLAIN 对 SQL 语句的执行计划进行分析，以此来判断一条 SQL 的执行效率，并作出对应的优化调整。</p><p>EXPLAIN 能够分析 <code>select</code> <code>update</code> <code>insert</code> <code>replace</code> <code>delete</code> 这些SQL。</p><h2 id="一、执行计划分析"><a href="#一、执行计划分析" class="headerlink" title="一、执行计划分析"></a>一、执行计划分析</h2><ol><li>SQL 如何使用索引<ol><li>并不是某一列上存在索引，sql 在执行时就必定会使用该索引。</li></ol></li><li>联接查询的执行顺序</li><li>查询扫描的数据行数</li></ol><h2 id="二、执行计划中的内容"><a href="#二、执行计划中的内容" class="headerlink" title="二、执行计划中的内容"></a>二、执行计划中的内容</h2><p>以下面的查询SQL 为例，解释执行计划中输出内容的含义</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">EXPLAIN</span><span class="token keyword">SELECT</span> customer_id<span class="token punctuation">,</span>title<span class="token punctuation">,</span>content <span class="token keyword">FROM</span> <span class="token punctuation">`</span>product_comment<span class="token punctuation">`</span><span class="token keyword">WHERE</span> audit_status <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">AND</span> product_id <span class="token operator">=</span> <span class="token number">199726</span><span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span></code></pre><ul><li>id: 1<ul><li>ID 列中的数据为一组数字，表示执行 SELECT 语句的顺序</li><li>ID 值相同时，执行顺序由上至下</li><li>ID 值越大优先级越高，执行越靠前</li></ul></li><li>select_type: SIMPLE<ul><li>SIMPLE：不包含子查询或是 UNION 操作的查询</li><li>PRIMARY：查询中如果包含任何子查询，那么最外层的查询则被标记为 PRIMARY</li><li>SUBQUERY：SELECT 列表中的子查询</li><li>DEPENDENT SUBQUERY：依赖外部结果的子查询</li><li>UNION：Union操作的第二个或是之后的查询的值为 union</li><li>DEPENDENT UNION：当 UNION 作为子查询时，第二或是第二个后的查询的 select_type 值</li><li>UNION RESULT：UNION 产生的结果集</li><li>DERIVED：出现在 FROM 子句中的子查询</li></ul></li><li>table: product_comment<ul><li>输出数据行所在的表的名称</li><li>&lt;unionM,N&gt;由ID 为 M，N 查询union 产生的结果集</li><li><derivedn>/<subqueryn> 由 ID 为N 的查询结果的结果集</subqueryn></derivedn></li></ul></li><li>partition: NULL<ul><li>对于分区表，显示查询的分区ID</li><li>对于非分区表，显示为 NULL</li></ul></li><li>type: ALL<ul><li>以下类型的性能从高到低依次排列</li><li>system：这是 const 联接类型的一个特例，当查询的表只有一行时使用</li><li>const：表中有且只有一个匹配的行时使用，如对主键或是唯一索引的查询，这是效率最高的联接方式</li><li>eq_ref：唯一索引或是主键索引查找，对于每个索引键，表中只有一条记录与之匹配</li><li>ref：非唯一索引查找，返回匹配某个单独值的所有行</li><li>ref_or_null：类似于 ref 类型的查询，但是附加了对 NULL 值列的查询</li><li>index_merge：该联接类型表示使用了索引合并优化方法</li><li>range：索引范围扫描，常见于 between、&gt;、&lt; 这样的查询条件</li><li>index：FULL index Scan 全索引扫描，同ALL 的区别是，遍历的是索引树</li><li>ALL：FULL Table Scan 全表扫描，这是效率最差的联接方式</li></ul></li><li>possible_keys: NULL <ul><li>指出 MySQL 能使用哪些索引来优化查询，基于查询所使用到的列和过滤条件来判断的</li><li>查询列所涉及到的列上的索引都会被列出，但不一定会被使用</li></ul></li><li>key: NULL<ul><li>查询优化器优化查询实际所使用的索引</li><li>如果没有可用的索引，则显示为 NULL</li><li>如果查询使用了覆盖索引，则该索引仅出现在 Key 列中</li></ul></li><li>key_len: NULL<ul><li>表示索引字段的最大可能长度</li><li>ken_len的长度由字段定义计算而来，并非数据的实际长度</li></ul></li><li>ref: NULL<ul><li>表示那些列或常量被用于查找索引列上的值</li></ul></li><li>rows: 9400<ul><li>表示 MySQL 通过索引统计信息，估算的所需读取的行数</li><li>Rows 值的大小是个统计抽样结果，并不十分准确</li></ul></li><li>filtered: 1.00<ul><li>表示返回结果的行数占需读取行数的百分比</li><li>Filtered 列的值越大越好，越大表示过滤的比例越高，最大100%</li><li>Filtered 列的值依赖统计信息，并不十分准确</li></ul></li><li>Extra: Using where<ul><li>Distinct：优化 distinct 操作，在找到第一匹配的元素后即停止找同样值的动作</li><li>Not exists：使用 not exists 来优化操作</li><li>Using filesort：使用额外操作进行排序，通常会出现在 order  by 或 group by 查询中</li><li>Using index：使用了覆盖索引进行查询</li><li>Using teporary：MySQL 需要使用临时表来处理查询，常见于排序、子查询和分组查询</li><li>Using where：需要在 MySQL 服务器层使用 WHERE 条件来过滤数据</li><li>select tables optimized away：直接通过索引来获取数据，不用访问表</li></ul></li></ul><p>通过上面的查询语句，以及索引的设计规范，应该在 where 语句查询的部分设置索引，这里使用联合索引。</p><pre class=" language-SQL"><code class="language-SQL">-- 查询表中，audit_status和product_id 的区分度，应该将区分度高的列放在联合索引的左侧SELECT COUNT(DISTINCT audit_status)/COUNT(*) AS audit_rate,COUNT(DISTINCT product_id)/COUNT(*) AS product_rateFROM product_comment;</code></pre><p>假设 product_rate = 0.8 ，audit_rate = 0.2，则联合索引应该设计为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_productID_auditStatus<span class="token keyword">ON</span> product_comment<span class="token punctuation">(</span>product_id<span class="token punctuation">,</span>audit_status<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="执行计划的限制"><a href="#执行计划的限制" class="headerlink" title="执行计划的限制"></a>执行计划的限制</h2><ol><li>无法展示存储过程、触发器、UDF 对查询的影响</li><li>无法使用 EXPLAIN 对存储过程进行分析</li><li>早期版本的MySQL 只支持对 SELECT 语句进行分析</li></ol>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第五章 设计数据库分区表</title>
      <link href="/2019/06/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/5.%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
      <url>/2019/06/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/5.%E8%AE%BE%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%8C%BA%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-设计数据库分区表"><a href="#第五章-设计数据库分区表" class="headerlink" title="第五章 设计数据库分区表"></a>第五章 设计数据库分区表</h1><h2 id="一、数据库设计三范式"><a href="#一、数据库设计三范式" class="headerlink" title="一、数据库设计三范式"></a>一、数据库设计三范式</h2><blockquote><p>第一范式：数据库表中的字段都是单一属性，不可再分。<br>第二范式：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖。<br>第三范式：数据表中不能存在非关键字段对任一候选关键字段的传递函数依赖。</p></blockquote><p>翻译过来即：</p><blockquote><p>第一范式：表必须有主键，且每个字段原子性不可再分。<br>第二范式：要求所有非主键字段完全依赖主键，不能产生部分依赖<br>第三范式：所有非主键字段和主键字段之间不能产生传递依赖</p></blockquote><h2 id="二、MySQL-分区表"><a href="#二、MySQL-分区表" class="headerlink" title="二、MySQL 分区表"></a>二、MySQL 分区表</h2><h3 id="1-检查-MySQL-是否支持-分区功能"><a href="#1-检查-MySQL-是否支持-分区功能" class="headerlink" title="1. 检查 MySQL 是否支持 分区功能"></a>1. 检查 MySQL 是否支持 分区功能</h3><blockquote><pre class=" language-mysql"><code class="language-mysql">-- 查看MySQL 中的所有插件，如果存在 Name=partition；Status=ACTIVE，则表示支持分区功能SHOW PLUGINS;</code></pre><p>分区表的特点：在逻辑上为一个表，在物理上存储在多个文件中。</p></blockquote><h3 id="2-分区表的使用方法"><a href="#2-分区表的使用方法" class="headerlink" title="2. 分区表的使用方法"></a>2. 分区表的使用方法</h3><blockquote><p>注：PARTITION BY 必须是主键HASH之后，而不能是其它属性。</p><p>在插入和查询时，与正常使用一致。</p><h3 id="3-分区的几种方式"><a href="#3-分区的几种方式" class="headerlink" title="3. 分区的几种方式"></a>3. 分区的几种方式</h3></blockquote><h4 id="1-HASH-分区"><a href="#1-HASH-分区" class="headerlink" title="1. HASH 分区"></a>1. HASH 分区</h4><ol><li>根据 MOD(分区键、分区数) 的值把数据行存储到表的不同分区中</li><li>数据可以平均的分布在各个分区中</li><li>HASH 分区的键值必须是一个 INT 类型的值，或是通过函数可以转为 INT 类型<ol><li>如果属性为整型，则可以 eg: PARTITION BY HASH(customer_id)</li><li>如果属性为日期，则转换为整型后进行HASH：eg: PARTITION BY HASH(UNIX_TIMESTAMP(login_time))</li></ol></li></ol><p>eg: 对用户登录日志表进行分区，分区规则为 customer_id 的 hash 值，并分为4个区</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> customer_login_log<span class="token punctuation">(</span> customer_id <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录用户ID'</span><span class="token punctuation">,</span> login_time <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'用户登录时间'</span><span class="token punctuation">,</span> login_ip <span class="token keyword">INT</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录IP'</span><span class="token punctuation">,</span> login_type <span class="token keyword">TINYINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'登录类型：0 未成功，1 成功'</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span> <span class="token keyword">innodb</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span> <span class="token string">'用户登录日志表'</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>customer_id<span class="token punctuation">)</span>PARTITIONS <span class="token number">4</span><span class="token punctuation">;</span></code></pre><p>创建 HASH 分区表时可以使用到的函数</p><table><thead><tr><th>ABS()</th><th>CEILING()</th><th>DAY()</th></tr></thead><tbody><tr><td>DAYOFMONTH()</td><td>DAYOFWEEK()</td><td>DAYOFYEAR()</td></tr><tr><td>DATEDIFF()</td><td>EXTRACT()</td><td>FLOOR()</td></tr><tr><td>HOUR()</td><td>MICROSECOND()</td><td>MINUTE()</td></tr><tr><td>MOD()</td><td>MONTH()</td><td>QUARTER()</td></tr><tr><td>SECOND()</td><td>TIME_TO_SEC()</td><td>TO_DAYS()</td></tr><tr><td>TO_SECONDS()</td><td>UNIX_TIMESTAMP()</td><td>WEEKDAY()</td></tr><tr><td>YEAR()</td><td></td><td>YEARWEEK()</td></tr></tbody></table><h4 id="2-RANGE-分区"><a href="#2-RANGE-分区" class="headerlink" title="2. RANGE 分区"></a>2. RANGE 分区</h4><h5 id="按照范围分区，特点："><a href="#按照范围分区，特点：" class="headerlink" title="按照范围分区，特点："></a>按照范围分区，特点：</h5><ol><li>根据分区键值的范围把数据行存储到表的不同分区中</li><li>多个分区的范围要连续，但是不能重叠</li><li>默认情况下使用 VALUES LESS THAN 属性，即每个分区不包含指定的那个值</li></ol><p>eg: 对用户id 进行分区，p0分区为 0~9999，依次类推，p3分区为 3000~max</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE customer_login_log( customer_id INT UNSIGNED NOT NULL COMMENT '登录用户ID', login_time TIMESTAMP NOT NULL COMMENT '用户登录时间', login_ip INT UNSIGNED NOT NULL COMMENT '登录IP', login_type TINYINT NOT NULL COMMENT '登录类型：0 未成功，1 成功') engine = innodb DEFAULT CHARSET=utf8 COMMENT '用户登录日志表'PARTITION BY RANGE (customer_id) (    PARTITION p0 VALUES LESS THAN (10000),    PARTITION p1 VALUES LESS THAN (20000),    PARTITION p2 VALUES LESS THAN (30000),    PARTITION p3 VALUES LESS THAN MAXVALUE)</code></pre><h5 id="RANGE-分区的适用场景："><a href="#RANGE-分区的适用场景：" class="headerlink" title="RANGE 分区的适用场景："></a>RANGE 分区的适用场景：</h5><ol><li>分区键为日期或是时间类型<ol><li>时间归档</li></ol></li><li>所有查询中都包括分区键</li><li>定期按分区范围清理数据</li></ol><h4 id="3-List-分区"><a href="#3-List-分区" class="headerlink" title="3. List 分区"></a>3. List 分区</h4><h5 id="List-分区的特点："><a href="#List-分区的特点：" class="headerlink" title="List 分区的特点："></a>List 分区的特点：</h5><ol><li>按分区键取值的列表进行分区</li><li>同范围分区一样，各分区的列表值不能重复</li><li>每一行数据必须能找到对应的分区列表，否则数据插入失败</li></ol><h5 id="如何建立-LIST-分区："><a href="#如何建立-LIST-分区：" class="headerlink" title="如何建立 LIST 分区："></a>如何建立 LIST 分区：</h5><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE customer_login_log( customer_id INT UNSIGNED NOT NULL COMMENT '登录用户ID', login_time TIMESTAMP NOT NULL COMMENT '用户登录时间', login_ip INT UNSIGNED NOT NULL COMMENT '登录IP', login_type TINYINT NOT NULL COMMENT '登录类型：0 未成功，1 成功') engine = innodb DEFAULT CHARSET=utf8 COMMENT '用户登录日志表'PARTITION BY LIST (login_type) (  PARTITION p0 VALUES IN (1,3,5,7),  PARTITION p1 VALUES IN (2,4,6,8))</code></pre><h3 id="4-分区表的常见操作"><a href="#4-分区表的常见操作" class="headerlink" title="4. 分区表的常见操作"></a>4. 分区表的常见操作</h3><ol><li><p>查询分区信息表</p><ol><li><pre class=" language-mysql"><code class="language-mysql">SELECT  table_name, partition_name, partition_description, table_rowsFROM  information_schema.`PARTITIONS`WHERE table_name = 'customer_login_log';</code></pre></li></ol></li><li><p>新增分区</p><ol><li><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE customer_login_log ADD PARTITION (PARTITION p3 VALUES LESS THAN (UNIX_TIMESTAMP('2021-01-01 00:00:00')))</code></pre></li></ol></li><li><p>删除分区及其中的数据</p><ol><li><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE customer_login_log DROP PARTITION p0;</code></pre></li></ol></li><li><p>分区数据归档迁移：</p><ol><li><p>条件：</p><ol><li>MySQL &gt;= 5.7</li><li>结构相同</li><li>归档到的数据表一定要是非分区表</li><li>非临时表；不能有外键约束</li><li>归档引擎要是：archive<ol><li>无法从该表中删除数据，仅能添加数据</li><li>占用的空间更小</li></ol></li></ol></li><li><p>创建数据归档表，用于存储用户登录日志的归档数据</p><ol><li><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE arch_customer_login_log( customer_id INT UNSIGNED NOT NULL COMMENT '登录用户ID', login_time TIMESTAMP NOT NULL COMMENT '用户登录时间', login_ip INT UNSIGNED NOT NULL COMMENT '登录IP', login_type TINYINT NOT NULL COMMENT '登录类型：0 未成功，1 成功') ENGINE = ARCHIVE COMMENT '用户登录日志表归档'</code></pre></li></ol></li><li><p>将 p1 分区(2018年用户的登录日志) 迁移到归档表中</p><ol><li><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE customer_login_log EXCHANGE PARTITION p1 WITH TABLE arch_customer_login_log;</code></pre></li></ol></li><li><p>此时再查看 customer_login_log，已不存在 p1 分区中的数据了，全部转移到了 arch_customer_login_log 中。</p></li><li><p>迁移完成，删除 customer_login_log 中的 p1 分区</p><ol><li><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE customer_login_log DROP PARTITION p1;</code></pre></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第一章 数据库设计规范</title>
      <link href="/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/4.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%A1%8C%E4%B8%BA%E8%A7%84%E8%8C%83/"/>
      <url>/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/4.%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E8%A1%8C%E4%B8%BA%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-数据库操作行为规范"><a href="#第四章-数据库操作行为规范" class="headerlink" title="第四章 数据库操作行为规范"></a>第四章 数据库操作行为规范</h1><ol><li><p>超过 100W 行的批量写操作，要分批多次进行操作</p><ol><li>大批量的操作可能会造成严重的主从延迟</li><li>binlog日志为 row 格式时会产生大量日志</li><li>避免产生大事务操作<ol><li>大的事务会导致数据库的阻塞时间过长</li></ol></li></ol></li><li><p>对于大表使用 pt-online-schema-change 修改表结构</p><ol><li>避免大表修改产生的主从延迟</li><li>避免对表修改时，产生的表锁问题</li><li>pt-online-schema-change 修改表结构时的流程<ol><li>建立一个和源表结构相同的新表</li><li>在新表上进行表结构修改</li><li>创建触发器，将源表的数据操作复制到新表中</li><li>表复制完成后，将新表重命名为源表名，并删除源表</li><li>以此来完成表结构的修改，而不产生对源表的加锁操作</li></ol></li></ol></li><li><p>禁止为程序使用的账号赋予 super 权限</p><ol><li>当数据库连接达到最大限制时，还允许 1 个super权限的用户连接<ol><li>如果滥用 super 权限的话，会导致 DBA 无法登陆数据库检查问题</li></ol></li><li>super 权限只能留给 DBA 处理问题的账号使用</li></ol></li><li><p>对于程序连接数据库账号，遵循权限注销原则</p><ol><li>程序使用数据库账号只能在一个 DB 下使用，不准跨库</li><li>程序使用的账号原则上不准有 drop 权限</li></ol></li><li><p>向DB 中插入 100W 条数据</p><ol><li><p>如果每次只插入一条数据，则会增加和数据库的交互次数</p></li><li><p>如果批量插入，虽然只有一次交互，但是会产生非常大的事务，可能造成内存溢出</p></li><li><p>分段批量插入</p><ol><li><p>JDBC 连接 URL 需要加上 <code>allowMultiQueries=true</code> 参数</p></li><li><p>example by Mybatis Batch:</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Java 代码</span>pst<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">%</span><span class="token number">1000</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    pst<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pst<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- MyBatis SQL --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertbatch<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.List<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fetchTime<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BEFORE<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into tb_user (username,password)        values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            (                #{item.username},#{item.password}            )        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span></code></pre></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第一章 数据库设计规范</title>
      <link href="/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/3.%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/3.%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-数据库-SQL-开发规范"><a href="#第三章-数据库-SQL-开发规范" class="headerlink" title="第三章 数据库 SQL 开发规范"></a>第三章 数据库 SQL 开发规范</h1><ol><li>建议使用预编译语句进行数据库操作<ol><li>预编译语句可以重复使用执行计划</li><li>可以有效避免动态 SQL 带来的 SQL 注入问题</li><li>只传参数，比传递 SQL 语句更高效</li><li>相同语句可以一次解析，多次使用，提高处理效率</li></ol></li><li>避免数据类型的隐式转换<ol><li>隐式转换会导致索引失效</li><li>eg: select name,phone from customer where id = ‘111’</li></ol></li><li>充分利用表上已经存在的索引<ol><li>避免使用 双% 的查询条件。如 a like ‘%123%’</li><li>一个 SQL 只能利用到复合索引中的一列进行范围查询</li><li>使用 left join 或 not exists 来优化 not in 操作<ol><li>not in 会使索引失效</li></ol></li></ol></li><li>程序连接不同的数据库使用不同的账号，禁止夸库查询<ol><li>为数据库迁移和分库分表留出余地</li><li>降低业务耦合度</li><li>避免权限过大而产生的安全风险</li></ol></li><li>禁止使用 SELECT * ，必须使用 SELECT &lt;字段列表&gt; 查询<ol><li>消耗更多的CPU和IO，以及网络带宽资源</li><li>无法使用覆盖索引</li><li>可减少表结构变更带来的影响</li></ol></li><li>禁止使用不含字段列表的 INSERT 语句<ol><li>eg：insert into tb_xx values(a,b,c) 错误</li><li>eg：insert into t(c1,c2,c3) values(a,b,c) 正确</li><li>避免因为字段变更，导致的插入失败</li></ol></li><li>避免使用子查询，可以把子查询优化为 join 操作<ol><li>子查询的结果集无法使用索引</li><li>子查询会产生临时表操作，如果子查询数据量大则严重影响效率</li><li>消耗过多的 CPU 及 IO 操作</li><li>包含 GROUP BY、ORDER BY 等操作的子查询，无法转换为 JOIN 操作</li></ol></li><li>避免使用 JOIN 关联<code>太多</code>的表<ol><li>每 JOIN 一个表会多占用一部分内存</li><li>会产生临时表操作，影响查询操作</li><li>MySQl 最多允许关联 61 个表，建议不超过 5 个</li></ol></li><li>减少同数据库的交互次数<ol><li>数据库更适合处理批量操作</li><li>合并多个相同的操作到一起，可以提高处理效率</li><li>eg：alter table t1 add column c1 int, change column c2 c2 int</li></ol></li><li>使用 in 代替 or<ol><li>in 的值不要超过 500个</li><li>in 操作可以有效的利用索引</li></ol></li><li>禁止使用 order by rand() 进行随机排序<ol><li>会把表中所有符合条件的数据装载到内存中进行排序</li><li>会消耗大量的 CPU 和 IO 及内存资源</li><li>推荐在程序中获取一个随机值，然后从数据库中获取数据的方式</li></ol></li><li>where 从句中禁止对列进行函数转换和计算<ol><li>对列进行函数转换或计算会导致无法使用索引</li><li>eg：where date(createtime) = ‘20160901’<ol><li>这样的话，无法使用到 createtime 列上的索引</li><li>可以修改为：where createtime &gt;= ‘20160901’ and createtime &lt; ‘20160902’</li></ol></li></ol></li><li>在明显不会有重复值时使用 UNION ALL 而不是 UNION<ol><li>UNION 会把所有数据放到临时表中后再进行去重操作</li><li>UNION ALL 不会再对结果集进行去重操作</li></ol></li><li>拆分复杂的大 SQL 为多个小 SQL<ol><li>MySQL 一个 SQL 只能使用一个 CPU 进行计算</li><li>SQL 拆分后可以通过并行执行来提高处理效率<ol><li>拆分 SQL 之后，多个小 SQL 能够更好的利用 CPU 资源</li></ol></li><li>需要拆分的 SQL 为书写复杂，且执行时间长的。避免因 SQL 执行过长导致处理效率缓慢。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第一章 数据库设计规范</title>
      <link href="/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/2.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/2.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="第二张-数据库字段设计规范"><a href="#第二张-数据库字段设计规范" class="headerlink" title="第二张 数据库字段设计规范"></a>第二张 数据库字段设计规范</h1><p>字段类型的选择，会直接影响数据库的性能。</p><ol><li>优先选择符合存储需要的最小的数据类型<ol><li>字段的长度越长，导致索引的长度也会越长</li><li>将字符串转换为数字类型存储<ol><li>INET_ATON(‘255.255.255.255’) = 4294967295</li><li>INET_NTOA(4294967295) = ‘255.255.255.255’</li></ol></li><li>对于非负整数的数据，优先使用无符号整型存储<ol><li>无符号比有符号的数据多出一倍的存储空间</li><li>eg：SIGNED INT -2147483648 ~ 2147483647 ; UNSIGNED INT = 4294967295</li></ol></li><li>VARCHAR(N) 中的N代表的是字符数，而不是字节数</li><li>使用 UTF8 存储汉字 Varchar(255) = 765个字节</li><li>过大的长度会消耗更多的内存</li></ol></li><li>避免使用 TEXT、BLOB 数据类型<ol><li>建议把 BLOB 或是 TEXT 列分离到单独的扩展表中，且不要使用 SELECT * 这样的查询</li><li>TEXT 或 BLOB 类型只能使用前缀索引</li></ol></li><li>避免使用 ENUM 数据类型<ol><li>修改 ENUM 值需要使用 ALTER 语句</li><li>ENUM类型的 ORDER BY 操作效率低，需要额外操作<ol><li>ENUM 在进行 ORDER BY 操作时，会将枚举转换为整型进行排序，排序效率低</li></ol></li><li>禁止使用数值作为 ENUM 数据类型</li></ol></li><li>尽可能把所有列定义为 NOT NULL<ol><li>索引 NULL 列需要额外的空间来保存<ol><li>为 NULL 的列索引，会多出一部分存储空间，用来标识该列是否为空</li><li>索引空间占用越少越好</li></ol></li><li>进行比较和计算时对 NULL 值做特别的处理</li></ol></li><li>不建议使用，字符串存储日期型的数据<ol><li>缺点一：无法使用日期函数进行计算和比较</li><li>缺点二：用字符串存储日期需要占用更多的空间<ol><li>使用字符串存储需要占用 16 个字节</li><li>而使用日期类型只需要 8 个字节</li></ol></li></ol></li><li>使用 TIMESTAMP 或 DATETIME 类型存储时间<ol><li>TIMESTAMP 1970-01-01 ~ 2038-01-19</li><li>TIMESTAMP 占用 4 字节，底层以 INT 存储，但是可读性比 INT 高</li></ol></li><li>同财务相关的金额类数据，必须使用 decimal 类型<ol><li>Decimal 类型为精准浮点数，在计算时不会丢失精度</li><li>占用空间由定义的宽度决定</li><li>可用于存储比 bigint 更大的整型数据</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《高性能MySQL》第一章 数据库设计规范</title>
      <link href="/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
      <url>/2019/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8A%E9%AB%98%E6%80%A7%E8%83%BDMySQL%E3%80%8B/1.%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-数据库设计规范"><a href="#第一章-数据库设计规范" class="headerlink" title="第一章 数据库设计规范"></a>第一章 数据库设计规范</h1><h2 id="1-数据库-命名规范"><a href="#1-数据库-命名规范" class="headerlink" title="1. 数据库 - 命名规范"></a>1. 数据库 - 命名规范</h2><ol><li>所有数据库对象名称必须使用小写字母并用下划线分割<ol><li>eg：DbName != dbname</li><li>eg: Table != table != tabLe</li></ol></li><li>所有数据库对象名称禁止使用 MySQL 保留关键字<ol><li>保留关键字：<a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/keywords.html</a></li></ol></li><li>数据库对象的命名要做到见名识义，并且最好不要超过 32 字符<ol><li>数据库名过长，会增加网络开销</li></ol></li><li>临时库必须以 tmp 为前缀，并以日期为后缀</li><li>备份库、备份表必须以 bak 为前缀，并以日期为后缀</li><li>所有存储相同数据的列名和列类型必须一致<ol><li>即表A与表B的某个属性相同，则列名与类型必须一致</li><li>如 A.cid与 B.cid，都必须是 <code>cid int unsigned not null</code></li><li>这种属性一般用于关联列上，当保持一致时，对数据库查询效率有一定帮助</li></ol></li></ol><h2 id="2-数据库-基本设计规范"><a href="#2-数据库-基本设计规范" class="headerlink" title="2. 数据库 - 基本设计规范"></a>2. 数据库 - 基本设计规范</h2><ol><li>所有表必须使用 Innodb 存储引擎<ol><li>在 MySQL 5.5 之前，MylSAM 是默认的存储引擎，MylSAM 是表级锁，在高并发场景下，锁表会有很严重的性能问题</li><li>InnoDB 是 5.6 以后的默认存储引擎</li><li>InnoDB 支持事务，行级锁，拥有更好的恢复性，高并发场景下性能更好</li></ol></li><li>数据库和表的字符集统一使用 UTF8<ol><li>统一字符集可以避免由于字符集转换产生的乱码</li><li>MySQL 中 UTF8 字符集汉字占 3 个字节，ASCII 码占一个字符</li></ol></li><li>所有表和字段都需要添加注释<ol><li>使用 comment 从句添加表和列的备注</li><li>从一开始就进行数据字典的维护</li></ol></li><li>尽量控制单表数据量的大小，建议控制在 500W 以内<ol><li>500 W 并不是 MySQL 数据库的限制</li><li>可以使用历史数据归档，分库分表等手段限制单表的数据量大小</li></ol></li><li>谨慎使用 MySQL 分区表<ol><li>分区表在物理上表现为多个文件，在逻辑上表现为一个表</li><li>谨慎选择分区键，跨分区查询效率可能更低</li><li>建议采用物理分表的方式管理大数据</li></ol></li><li>尽量做到冷热数据分离，减小表的宽度<ol><li>减少磁盘IO，保证热数据的内存缓存命中率</li><li>更有效的利用缓存，避免读入无用的冷数据</li><li>经常一起使用的列放在一个表中</li></ol></li><li>禁止在表中建立预留字段<ol><li>预留字段的命名很难做到见名识义</li><li>预留字段无法确认存储的数据类型，所以无法选择合适的类型</li><li>对预留字段类型的修改，会对表进行锁定<ol><li>在 MySQL 中，对表类型修改的成本远远大于增加一个数据类型的成本</li></ol></li></ol></li><li>禁止在数据库中存储图片，文件等二进制数据<ol><li>blob、text 等类型</li></ol></li><li>禁止在线上做数据库压力测试</li><li>禁止从开发环境、测试环境直连生产环境数据库</li></ol><h2 id="3-数据库-索引设计规范"><a href="#3-数据库-索引设计规范" class="headerlink" title="3. 数据库 - 索引设计规范"></a>3. 数据库 - 索引设计规范</h2><ol><li>限制每张表的索引数量，建议单张表索引不超过 5 个<ol><li>索引并不是越多越好，过多的索引可能会降低效率</li><li>禁止给表中的每一列都建立单独的索引</li></ol></li><li>每个 InnoDB 表必须有一个主键<ol><li>Innodb 是按照主键索引的顺序来组织表的，因此每个表必须有一个主键</li><li>如果表中未设置主键，MySQL 会自动选择第一个非空唯一性的属性作为主键；如果没有非空唯一约束的属性，MySQL 会自动生成一个 6 字节的主键，但是效率不高</li><li>不使用更新频繁的列作为主键，不使用多列主键</li><li>不使用 UUID、MD5、HASH、字符串列作为主键</li><li>主键建议选择使用主键自增ID</li></ol></li><li>常见索引建议<ol><li>SELECT、UPDATE、DELETE 语句的 WHERE 从句中的列</li><li>包含在 ORDER BY、GROUP BY、DISTINCT 中的字段</li><li>多表 JOIN 的字段</li></ol></li><li>如何选择索引列的顺序<ol><li>区分度最高的列放在联合索引的最左侧</li><li>尽量把字段长度小的列放在联合索引的最左侧</li><li>使用最频繁的列放在联合索引的最左侧</li></ol></li><li>避免建议冗余索引和重复索引<ol><li>eg: primary key(id) 、index(id)、unique index(id)</li><li>eg: index(a,b,c)，index(a,b)，index(a)<ol><li>对于冗余索引，MySQL 执行优化器会对查询到的索引进行选择，降低了索引使用的效率</li></ol></li></ol></li><li>对于频繁的查询优先考虑使用覆盖索引<ol><li>避免 Innodb 表进行索引的二次查找</li><li>可以把随机 IO 变为顺序 IO，提高查询效率</li></ol></li><li>尽量避免使用外键<ol><li>不建议使用外键约束，但一定在表与表之间的关联键上建立索引</li><li>外键可用于保证数据的参照完整性，但建议在业务端实现</li><li>外键会影响父表和子表的写操作从而降低性能<ol><li>存在外键约束的表在进行写操作时，会检查外键约束的完整性，降低写操作的性能</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 高性能MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》Java并发编程实践</title>
      <link href="/2019/06/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/11.Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/06/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/11.Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第十章 Executor框架</title>
      <link href="/2019/06/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/10.Executor%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/06/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/10.Executor%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="第十章-Executor-框架"><a href="#第十章-Executor-框架" class="headerlink" title="第十章 Executor 框架"></a>第十章 Executor 框架</h1><p>从 JDK 1.5 开始，Java 将工作单元与执行机制分离开来。</p><p>工作单元包括 Runnable 和 Callable，而执行机制由 Executor 框架提供。</p><h2 id="10-1-Executor-框架介绍"><a href="#10-1-Executor-框架介绍" class="headerlink" title="10.1 Executor 框架介绍"></a>10.1 Executor 框架介绍</h2><h2 id="10-1-1-Executor-框架的两级调度模型"><a href="#10-1-1-Executor-框架的两级调度模型" class="headerlink" title="10.1.1 Executor 框架的两级调度模型"></a>10.1.1 Executor 框架的两级调度模型</h2><p>上层：Java 多线程程序通常把应用分解为若干个任务，然后使用用户级的调度器（Executor 框架）将这些任务映射为固定数量的线程。</p><p>底层：操作系统内核将这些线程映射到硬件处理器上。</p><h2 id="10-1-2-Executor-框架结构与成员"><a href="#10-1-2-Executor-框架结构与成员" class="headerlink" title="10.1.2 Executor 框架结构与成员"></a>10.1.2 Executor 框架结构与成员</h2><h4 id="1-Executor-框架的结构"><a href="#1-Executor-框架的结构" class="headerlink" title="1. Executor 框架的结构"></a>1. Executor 框架的结构</h4><p>Executor 框架主要由 3 部分组成：</p><ul><li>任务。包括被执行任务需要实现的接口：Runnable、Callable接口<ul><li>Runnable 接口和 Callable 接口 都可以被 ThreadPoolExecutor 或 ScheduledThreadPoolExecutor 执行</li></ul></li><li>任务的执行。包括任务执行机制的核心接口 Executor，以及继承自 Executor 的 ExecutorService 接口。<ul><li>Executor ，是 Executor 框架的基础，将任务的提交与任务的执行分离开来</li><li>ThreadPoolExecutor，是线程池的核心实现类，用来执行被提交的任务</li><li>ScheduledThreadPoolExecutor，可以在给定的延迟后运行命令，或者定期执行命令，比 Timer 更灵活、强大。</li></ul></li><li>异步计算的结果。包括接口 Future 和实现 Future 的 FutureTask 类<ul><li>Future 接口和实现 Future 的 FutureTask 类，代表异步计算的结果。</li></ul></li></ul><p>主要流程为：</p><ol><li>主线程创建实现 Runnable、Callable 接口的任务对象</li><li>Executors 将 Runnable 对象封装为 Callable 对象</li><li>将 Runnable 对象交给 ExecutorService.execute(Runnable command) 执行，或者交给 ExecutorService.submit(Callable<t> task) 执行<ol><li>如果执行 submit，则 ExecutorService 返回一个实现 Future 接口的对象。</li><li>由于 FutureTask 实现了 Runnable，因此FutureTask 也可以直接交给 ExecutorService 执行</li></ol></t></li><li>主线程执行 FutureTask.get() 方法等待任务执行完成；或者执行 FutureTask.cancel(boolean mayInterruptIfRunning) 来取消任务执行</li></ol><h4 id="2-Executor-框架的成员"><a href="#2-Executor-框架的成员" class="headerlink" title="2. Executor 框架的成员"></a>2. Executor 框架的成员</h4><ol><li>ThreadPoolExecutor：通常由工厂类 Executors 创建，可创建以下 3 种类型的ThreadPoolExecutor<ol><li>FixedThreadPool：创建使用固定线程数的ThreadPool，适用于需要限制当前线程数量的应用场景，适用于负载较重的服务器。</li><li>SingleThreadExecutor：创建使用单个线程的 ThreadPool，适用于需要顺序执行各个任务；且在任意时间点，不会有多个线程是活动的应用场景</li><li>CachedThreadPool：创建一个会根据需要创建新线程的 ThreadPool，是大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者是负载较轻的服务器。</li></ol></li><li>ScheduledThreadPoolExecutor：通常由工厂类 Executors 创建，可创建以下 2 种类型的 ScheduledThreadPoolExecutor<ol><li>ScheduledThreadPoolExecutor，包含若干线程，适用于需要多个后台线程周期执行任务，同时需要限制后台线程数量的场景</li><li>SingleThreadScheduledExecutor，只包含一个线程，适用于需要单个后台线程执行周期任务，同时需要保证顺序执行各个任务的应用场景</li></ol></li><li>Future/FutureTask：表示异步计算的结果</li><li>Runnable/Callable：被 ThreadPoolExecutor 执行的任务。<ol><li>Runnable 不返回结果</li><li>Callable 返回结果</li></ol></li></ol><h2 id="10-2-ThreadPoolExecutor-详解"><a href="#10-2-ThreadPoolExecutor-详解" class="headerlink" title="10.2 ThreadPoolExecutor 详解"></a>10.2 ThreadPoolExecutor 详解</h2><ul><li><p>corePool：核心线程池的大小</p></li><li><p>maximumPool：最大线程池大小</p></li><li><p>BlockingQueue：阻塞队列，用来暂存任务的工作队列</p></li><li><p>RejectedExecutionHandler：拒绝策略，当 ThreadPoolExecutor 关闭或饱和时，将要调用的 Handler</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第九章 Java中的线程池</title>
      <link href="/2019/06/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/9.Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2019/06/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/9.Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第九章-Java-中的线程池"><a href="#第九章-Java-中的线程池" class="headerlink" title="第九章 Java 中的线程池"></a>第九章 Java 中的线程池</h1><p>Java 中的线程池是运用场景最多的并发框架，几乎所有异步或并发执行的程序都可以使用线程池。合理使用线程池的好处有：</p><ol><li>降低资源消耗<ol><li>通过重复利用已创建的线程降低线程创建和销毁时的消耗</li></ol></li><li>提高响应速度<ol><li>当任务抵达时，无需创建线程，就能立即执行</li></ol></li><li>提高线程的可管理型<ol><li>线程池能够统一分配、调优和监控线程</li><li>线程属于稀缺资源，不能无限制的创建</li></ol></li></ol><h2 id="9-1-线程池的实现原理"><a href="#9-1-线程池的实现原理" class="headerlink" title="9.1 线程池的实现原理"></a>9.1 线程池的实现原理</h2><p><img src="http://fcsimg.weifuw.com/thread_pool.png" alt="线程池的主要处理流程"></p><p><img src="https://images2017.cnblogs.com/blog/584724/201708/584724-20170828233957765-2055354276.png" alt="ThreadPoolExecutor 执行示意图"></p><p><code>ThreadPoolExecutor.execute(Runnable command)</code> 方法如下：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Executes the given task sometime in the future.  The task     * may execute in a new thread or in an existing pooled thread.     *     * If the task cannot be submitted for execution, either because this     * executor has been shutdown or because its capacity has been reached,     * the task is handled by the current {@code RejectedExecutionHandler}.     *     * @param command the task to execute     * @throws RejectedExecutionException at discretion of     *         {@code RejectedExecutionHandler}, if the task     *         cannot be accepted for execution     * @throws NullPointerException if {@code command} is null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * Proceed in 3 steps:         *         * 1. If fewer than corePoolSize threads are running, try to         * start a new thread with the given command as its first         * task.  The call to addWorker atomically checks runState and         * workerCount, and so prevents false alarms that would add         * threads when it shouldn't, by returning false.         *         * 2. If a task can be successfully queued, then we still need         * to double-check whether we should have added a thread         * (because existing ones died since last checking) or that         * the pool shut down since entry into this method. So we         * recheck state and if necessary roll back the enqueuing if         * stopped, or start a new thread if there are none.         *         * 3. If we cannot queue task, then we try to add a new         * thread.  If it fails, we know we are shut down or saturated         * and so reject the task.         */</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="9-2-线程池的使用"><a href="#9-2-线程池的使用" class="headerlink" title="9.2 线程池的使用"></a>9.2 线程池的使用</h2><h3 id="9-2-1-创建线程池"><a href="#9-2-1-创建线程池" class="headerlink" title="9.2.1 创建线程池"></a>9.2.1 创建线程池</h3><pre class=" language-java"><code class="language-java"><span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">,</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> ThreadFactory threadFactory<span class="token punctuation">,</span> RejectedExecutionHandler handler<span class="token punctuation">)</span></code></pre><p>通过上面的构造方法来创建一个线程池，其具体参数如下：</p><ol><li><p>corePoolSize 线程池的基本大小</p><ol><li>线程池的基本大小，当任务提交时，会创建线程进行执行，且不会销毁。</li><li>调用 prestartAllCoreThreads() 提前创建并启动所有基本线程</li></ol></li><li><p>maximumPoolSize</p><ol><li>线程池允许创建的最大线程数</li></ol></li><li><p>keepAliveTime</p><ol><li>线程活动保持时间</li></ol></li><li><p>workQueue</p><ol><li>任务队列，用于保存等待执行的任务的阻塞队列<ol><li>ArrayBlockingQueue</li><li>DelayedWorkQueue</li><li>ForwardingBlockingQueue</li><li>SynchronousQueue</li><li>DelayQueue</li><li>LinkedBlockingQueue</li><li>PriorityBlockingQueue</li></ol></li></ol></li><li><p>threadFactory</p><ol><li><p>用于设置创建线程的工厂</p></li><li><p>如使用 guava 提供的 ThreadFactoryBuilder 可以快速给线程池中的线程设置有意义的名字，如：</p></li><li><blockquote><p>new ThreadFactoryBuilder().setNameFormat(“XX-task-%d”).build();</p></blockquote></li></ol></li><li><p>handler</p><ol><li>饱和策略，当队列和线程池都满了，则需要一种策略来处理新提交的任务</li><li>默认策略为 AbortPolicy</li><li>JDK 提供的几种策略：<ol><li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务</li><li>AbortPolicy：直接抛出异常</li><li>CallerRunsPolicy：只用调用者所在线程来运行任务</li><li>DiscardPolicy：不处理，丢弃掉</li></ol></li></ol></li></ol><h3 id="9-2-2-提交任务至线程池"><a href="#9-2-2-提交任务至线程池" class="headerlink" title="9.2.2 提交任务至线程池"></a>9.2.2 提交任务至线程池</h3><p>execute() 方法，用于提交不需要返回值的任务，所以无法判断任务是否执行成功。</p><p>submit() 方法，用于提交需要返回值的任务。线程池会返回一个 future 类型对象。</p><h3 id="9-2-3-关闭线程池"><a href="#9-2-3-关闭线程池" class="headerlink" title="9.2.3 关闭线程池"></a>9.2.3 关闭线程池</h3><p>通过 shutdown 或 shutdownNow 方法来关闭线程池。</p><p>原理：遍历线程池中的工作线程，逐个调用线程的 interrupt 方法来中断线程，所以无法相应的线程可能永远无法终止。</p><p>调用这两个方法后，isShutdown 会返回true；当所有任务都关闭后，isTerminated 返回true。</p><p>通常会使用 shutdown 来关闭线程池，但是如果任务不一定要执行完毕，可以调用 shutdownNow 方法。</p><h3 id="9-2-4-合理地配置线程池"><a href="#9-2-4-合理地配置线程池" class="headerlink" title="9.2.4 合理地配置线程池"></a>9.2.4 合理地配置线程池</h3><p>想要合理配置线程池，需要先分析任务的特性：</p><ul><li>任务的性质：CPU 密集型任务、IO 密集型任务、混合型任务<ul><li>CPU 密集型任务应该配置尽可能小的线程，如 N(cpu) + 1 个线程的线程池</li><li>IO 密集型任务并非一直执行任务，应该配置尽可能多的线程，如 2*N(cpu) 个线程的线程池</li><li>混合型任务：如果可以拆分，将其拆分为一个 CPU 密集型任务和一个 IO 密集型任务</li></ul></li><li>任务的优先级：高、中、低<ul><li>优先级不同的任务，可以使用 PriorityBlockingQueue 优先级队列来处理</li><li>如果一直提交高优先级任务，则低优先级任务可能永远不会执行</li></ul></li><li>任务的执行时间：长、中、短<ul><li>可以使用优先级队列，让执行时间短的任务先执行</li><li>或者不同时间的任务交给不同规模的线程池来处理</li></ul></li><li>任务的依赖性：是否依赖其他系统资源，如数据库连接<ul><li>如依赖数据库连接的线程，当提交SQL 给数据库后需要等待数据库返回结果，等待时间越长，CPU空闲越久。那么线程数可以设置的越大，更好的利用CPU</li></ul></li></ul><blockquote><p>Runtime.getRuntime().availableProcessors() 获取当前设备的 CPU 个数。</p></blockquote><blockquote><p><code>建议使用有界队列</code> 。有界队列能增加系统的稳定性和预警能力。</p></blockquote><h3 id="9-2-5-线程池监控"><a href="#9-2-5-线程池监控" class="headerlink" title="9.2.5 线程池监控"></a>9.2.5 线程池监控</h3><p>监控线程池时可以使用以下属性：</p><ul><li>taskCount：线程池需要执行的任务数量</li><li>completedTaskCount：线程池在运行过程中已完成的任务数量，&lt;= taskCount</li><li>largestPoolSize：线程池里曾创建过的最大线程数量。<ul><li>可以通过该数据知道线程池是否满过</li></ul></li><li>getPoolSize：线程池的线程数量<ul><li>如果线程池不销毁的话，线程池里的线程不会自动销毁</li></ul></li><li>getActiveCount：获取活动的线程数</li></ul><p>或者可以通过继承线程池来自定义线程池，重写线程池的 beforeExecute、afterExecute和terminated 方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第八章 Java 并发工具类</title>
      <link href="/2019/06/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/8.Java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2019/06/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/8.Java%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="第八章-Java-中的并发工具类"><a href="#第八章-Java-中的并发工具类" class="headerlink" title="第八章 Java 中的并发工具类"></a>第八章 Java 中的并发工具类</h1><h2 id="8-1-CountDownLatch-等待多线程完成"><a href="#8-1-CountDownLatch-等待多线程完成" class="headerlink" title="8.1 CountDownLatch 等待多线程完成"></a>8.1 CountDownLatch 等待多线程完成</h2><p>CountDownLatch 允许一个或多个线程等待其他线程完成操作。</p><p>CountDownLatch 在构造时接收 int 参数作为计数器，当线程执行到 countDown 是，计数器数值 N - 1 。可以是 1 个线程执行 N 个步骤，也可以是多个线程共同执行 N 个步骤。</p><p>await 方法会使线程进入等待状态，如果线程执行过久，可以使用 await(long time,TimeUnit unit)，等待特定时间。</p><h2 id="8-2-CyclicBarrier-同步屏障"><a href="#8-2-CyclicBarrier-同步屏障" class="headerlink" title="8.2 CyclicBarrier 同步屏障"></a>8.2 CyclicBarrier 同步屏障</h2><p>CyclicBarrier 意思为可循环使用的屏障，当一组达到一个屏障时被阻塞，知道最后一个线程到达屏障时，屏障才会打开，所有被屏障拦截的线程才会继续运行。</p><p>CountDownLatch 的计数器只能使用一次</p><h3 id="8-2-1-CyclicBarrier"><a href="#8-2-1-CyclicBarrier" class="headerlink" title="8.2.1 CyclicBarrier"></a>8.2.1 CyclicBarrier</h3><p>CyclicBarrier(int parties) 构造函数的参数表示需要屏障拦截的线程数量，线程调用 await 方法通知 CyclicBarrier 已到达屏障，然后线程被阻塞。</p><ol><li>如果 parties 参数为 3，但是只有两个线程执行 await 方法，那么这两个线程会一直阻塞</li><li>构造函数：CyclicBarrier(int parties,Runnable barrierAction) ，会在线程到达屏障时，优先执行 barrierAction，方便处理更复杂的业务场景。</li><li>getNumberWaiting ：获取 CyclicBarrier 阻塞的线程数量</li><li>isBroken() ：用来了解阻塞的线程是否被中断</li><li>reset() ：重置 CyclicBarrier 的计数器</li></ol><h2 id="8-3-Semaphore-控制并发线程数"><a href="#8-3-Semaphore-控制并发线程数" class="headerlink" title="8.3 Semaphore 控制并发线程数"></a>8.3 Semaphore 控制并发线程数</h2><p>Semaphore（信号量）用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理使用公共资源。</p><h3 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h3><p>Semaphore 可以用于流量控制，特别是公共资源有限的应用场景，如数据库连接等。比如几十条线程并发读取数据，但是数据库只支持10个连接数，此时就需要使用 Semaphore 做流量控制，否则会报错，无法获取数据库连接。</p><p>Semaphore 的常用方法：</p><ul><li>acquire() ：获取一个许可证</li><li>release() ：释放一个许可证</li><li>tryAcquire：尝试获取许可证</li><li>int availablePermits()：返回此信号量中当前可用的许可证数</li><li>int getQueueLength()：返回正在等待获取许可证的线程数</li><li>boolean hasQueuedThreads()：是否有线程正在等待获取许可证</li><li>void reducePermits(int reduction)：减少reduction 个许可证（protected方法）</li><li>Collection getQueuedThreads()：返回所有等待获取许可证的线程集合（protected方法）</li></ul><h2 id="8-4-Exchanger-线程间交换数据"><a href="#8-4-Exchanger-线程间交换数据" class="headerlink" title="8.4 Exchanger 线程间交换数据"></a>8.4 Exchanger 线程间交换数据</h2><p>Exchange（交换者）是一个用于线程间协作的工具类。</p><p>Exchanger 用于进行线程间的数据交换。它提供一个同步点，在这个同步点，两个线程可以交换彼此的数据。</p><p>当第一个线程先执行 exchange() 方法，它会一直等待第二个线程也执行 exchange 方法，当两个线程都到达同步点后，会将彼此线程生产出来的数据传递给对方。</p><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><ol><li>Exchanger 可以用于遗传算法<ol><li>如AB进行交配，当交换数据后使用交叉规则得出两个交配结果</li></ol></li><li>Exchanger 可以用于校对工作<ol><li>如A、B线程同时执行，结果是否相同</li></ol></li></ol><blockquote><p>如果有一个线程一直未执行 exchange() ，则会一直等待。可以使用 exchange(V x,long timeout,TimeUnit unit) 设置最大等待时间。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第七章 Java中的13个原子操作类</title>
      <link href="/2019/06/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/7.Java%E4%B8%AD%E7%9A%8413%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BB/"/>
      <url>/2019/06/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/7.Java%E4%B8%AD%E7%9A%8413%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="第七章-Java-中的-13-个原子操作类"><a href="#第七章-Java-中的-13-个原子操作类" class="headerlink" title="第七章 Java 中的 13 个原子操作类"></a>第七章 Java 中的 13 个原子操作类</h1><h2 id="7-1-原子更新基本类型"><a href="#7-1-原子更新基本类型" class="headerlink" title="7.1 原子更新基本类型"></a>7.1 原子更新基本类型</h2><p>Atomic 包提供了3中基本类：</p><ul><li>AtomicBoolean</li><li>AtomicInteger</li><li>AtomicLong</li></ul><p>这三个类的方法几乎一样，这里以 AtomicInteger 为例。AtomicInteger 的常用方法如下：</p><ul><li>int addAndGet(int delta)<ul><li>以原子方式相加原值与传入值，返回结果</li></ul></li><li>boolean compareAndSet(int expect, int update)<ul><li>如果输入值等于预期值，则以原子方式设置该值</li></ul></li><li>int getAndIncrement()<ul><li>原子方式自增，返回旧值</li></ul></li><li>void lazySet(int newValue)<ul><li>延迟设置值，可能导致其他线程在一小段时间内还是读到旧值</li></ul></li><li>int getAndSet(int newValue)<ul><li>以原子方式设置为 newValue，返回旧值</li></ul></li></ul><p>AtomicBoolean 是把 Boolean转换为 整型，再使用 compareAndSwapInt 进行CAS。</p><h2 id="7-2-原子更新数组"><a href="#7-2-原子更新数组" class="headerlink" title="7.2 原子更新数组"></a>7.2 原子更新数组</h2><p>Atomic 包提供了以下 4 个类：</p><ul><li>AtomicIntegerArray<ul><li>原子更新整型数组里的元素</li></ul></li><li>AtomicLongArray<ul><li>原子更新长整型数组里的元素</li></ul></li><li>AtomicReferenceArray<ul><li>原子更新引用类型数组里的元素</li></ul></li></ul><p>以 AtomicIntegerArray 为例，常用方法有：</p><ul><li>int addAndGet(int i,int delta)</li><li>boolean compareAndSet(int i,int expect,int update)</li></ul><h2 id="7-3-原子更新应用类型"><a href="#7-3-原子更新应用类型" class="headerlink" title="7.3 原子更新应用类型"></a>7.3 原子更新应用类型</h2><p>Atomic 包提供了以下 3 个类：</p><ul><li>AtomicReference<ul><li>原子更新引用类型</li></ul></li><li>AtomicReferenceFieldUpdater<ul><li>原子更新引用类型里的字段</li></ul></li><li>AtomicMarkableReference<ul><li>原子更新带有标记位的应用类型</li></ul></li></ul><h2 id="7-4-原子更新字段类"><a href="#7-4-原子更新字段类" class="headerlink" title="7.4 原子更新字段类"></a>7.4 原子更新字段类</h2><p>Atomic 包提供了以下 3 个类：</p><ul><li>AtomicIntegerFieldUpdater<ul><li>原子更新整型的字段-更新器</li></ul></li><li>AtomicLongFieldUpdater<ul><li>原子更新长整型字段的更新器</li></ul></li><li>AtomicStampedReference<ul><li>原子更新带版本号的应用类型</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第六章 Java 并发容器和框架</title>
      <link href="/2019/06/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/6.Java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/06/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/6.Java%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E5%92%8C%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="第六章-Java-并发容器和框架"><a href="#第六章-Java-并发容器和框架" class="headerlink" title="第六章 Java 并发容器和框架"></a>第六章 Java 并发容器和框架</h1><h2 id="6-1-ConcurrentHashMap"><a href="#6-1-ConcurrentHashMap" class="headerlink" title="6.1 ConcurrentHashMap"></a>6.1 ConcurrentHashMap</h2><p>ConcurrentHashMap 是线程安全且高效的 HashMap。</p><h3 id="6-1-1-为什么使用-ConcurrentHashMap"><a href="#6-1-1-为什么使用-ConcurrentHashMap" class="headerlink" title="6.1.1 为什么使用 ConcurrentHashMap"></a>6.1.1 为什么使用 ConcurrentHashMap</h3><h4 id="1-HashMap-线程不安全"><a href="#1-HashMap-线程不安全" class="headerlink" title="1. HashMap 线程不安全"></a>1. HashMap 线程不安全</h4><p>在多线程环境下，使用 HashMap 进行 put 操作会引起死循环，导致 CPU 利用率接近 100%，所以在并发情况下不能使用 HashMap。</p><p>HashMap 在并发执行 put 操作时会引起死循环，是因为多线程会导致 HashMap 的 Entry 链表形成环形数据结构，一旦形成环形数据结构，Entry 的 next 节点永不为空，就会产生死循环获取 Entry。</p><h4 id="2-HashTable-效率低下"><a href="#2-HashTable-效率低下" class="headerlink" title="2. HashTable 效率低下"></a>2. HashTable 效率低下</h4><p>HashTable 容器使用 synchronized 来保证线程安全，但在线程竞争激烈的情况下 HashTable 效率低下。</p><p>因为当一个线程访问 HashTable 的同步方法，其他线程再访问时，会进入阻塞或轮询状态。</p><h4 id="3-ConcurrentHashMap-的锁分段技术"><a href="#3-ConcurrentHashMap-的锁分段技术" class="headerlink" title="3. ConcurrentHashMap 的锁分段技术"></a>3. ConcurrentHashMap 的锁分段技术</h4><p>HashTable 在线程竞争激烈时的效率低下原因是所有访问 HashTable 的线程都必须竞争同一把锁。</p><p>而ConcurrentHashMap 的锁分段技术，将容器中的数据分段存储起来，为每一段数据配一把锁，当一个线程占用锁访问其中一段数据时，其他段的数据也能被其他线程访问。</p><h3 id="6-1-2-ConcurrentHashMap-的结构"><a href="#6-1-2-ConcurrentHashMap-的结构" class="headerlink" title="6.1.2 ConcurrentHashMap 的结构"></a>6.1.2 ConcurrentHashMap 的结构</h3><p>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成。</p><p>Segment 是一种可重入锁(ReentrantLock)，扮演锁的角色。Segment与HashMap 类似，是一种数组和链表结构。</p><p>HashEntry 则用于存储键值对数据。每个 Segment 守护着一个 HashEntry 数组里的元素，当对 HashEntry 数组的数据进行修改时，必须先获得对应的 Segment 锁。</p><h3 id="6-1-3-ConcurrentHashMap-初始化"><a href="#6-1-3-ConcurrentHashMap-初始化" class="headerlink" title="6.1.3 ConcurrentHashMap 初始化"></a>6.1.3 ConcurrentHashMap 初始化</h3><p>通过 initalCapacity、loadFactor 和 concurrencyLevel 等几个参数来初始化 segment 数组、段偏移量 segmentShift、段掩码 segmentMask 和每个 segment 里的 HashEntry 数组，以此来初始化 ConcurrentHashMap。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Creates a new, empty map with an initial table size based on     * the given number of elements ({@code initialCapacity}), table     * density ({@code loadFactor}), and number of concurrently     * updating threads ({@code concurrencyLevel}).     *     * @param initialCapacity the initial capacity. The implementation     * performs internal sizing to accommodate this many elements,     * given the specified load factor.     * @param loadFactor the load factor (table density) for     * establishing the initial table size     * @param concurrencyLevel the estimated number of concurrently     * updating threads. The implementation may use this value as     * a sizing hint.     * @throws IllegalArgumentException if the initial capacity is     * negative or the load factor or concurrencyLevel are     * nonpositive     */</span>    <span class="token keyword">public</span> <span class="token function">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span>                             <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">int</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>loadFactor <span class="token operator">></span> <span class="token number">0.0f</span><span class="token punctuation">)</span> <span class="token operator">||</span> initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> concurrencyLevel <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> concurrencyLevel<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// Use at least as many bins</span>            initialCapacity <span class="token operator">=</span> concurrencyLevel<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// as estimated threads</span>        <span class="token keyword">long</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>initialCapacity <span class="token operator">/</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span>            MAXIMUM_CAPACITY <span class="token operator">:</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sizeCtl <span class="token operator">=</span> cap<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-初始化-Segments-数组"><a href="#1-初始化-Segments-数组" class="headerlink" title="1. 初始化 Segments 数组"></a>1. 初始化 Segments 数组</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">if</span><span class="token punctuation">(</span>concurrencyLevel <span class="token operator">></span> MAX_SEGMENTs<span class="token punctuation">)</span>        concurrencyLevel <span class="token operator">=</span> MAX_SEGMENTS<span class="token punctuation">;</span>    <span class="token keyword">int</span> sshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ssize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ssize <span class="token operator">&lt;</span> concurrencyLevel<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 必须保证 segments 数组长度是 2的N次方，如 concurrencyLevel = 14，ssize = 16</span>        <span class="token operator">++</span>sshift<span class="token punctuation">;</span>        ssize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    segmentShift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> sshift<span class="token punctuation">;</span>    segmentMask <span class="token operator">=</span> ssize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>segments <span class="token operator">=</span> Segment<span class="token punctuation">.</span><span class="token function">newArray</span><span class="token punctuation">(</span>ssize<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Segments 数组的程度是由 ssize 决定的，而ssize 是通过 concurrencyLevel 计算得出的 ，原因是必须保证 ssize 是 2的N次方。</p><h4 id="2-初始化-SegmentShift-和-SegmentMask"><a href="#2-初始化-SegmentShift-和-SegmentMask" class="headerlink" title="2. 初始化 SegmentShift 和 SegmentMask"></a>2. 初始化 SegmentShift 和 SegmentMask</h4><p>段偏移量 SegmentShift：segmentShift = 32 - sshift;</p><p>段掩码：segmentMask = ssize - 1; 是散列运算的掩码，等于 ssize - 1，因为 ssize 为2的N次方，因此 segmentMask 掩码的二进制各个位都是 1.</p><h4 id="3-初始化每个-segment"><a href="#3-初始化每个-segment" class="headerlink" title="3. 初始化每个 segment"></a>3. 初始化每个 segment</h4><p>initialCapacity 是 ConcurrentHashMap 的初始化容量，loadFactor 是每个 segment 的负载因子。</p><h4 id="4-定位-Segment"><a href="#4-定位-Segment" class="headerlink" title="4. 定位 Segment"></a>4. 定位 Segment</h4><p>ConcurrentHashMap 在插入和获取元素时，会通过散列算法定位 Segment，并会对元素的 hashCode 进行一次再散列。</p><p>在散列的目的是减少散列冲突，使元素能均匀地分布在不同的 Segment 上，从而提高容器的存取效率。</p><p>如果不进行再散列的话，无论散列值的高位是多少，只要低位相同，都会被存储到一个Segment 上。</p><h3 id="6-1-5-ConcurrentHashMap-操作"><a href="#6-1-5-ConcurrentHashMap-操作" class="headerlink" title="6.1.5 ConcurrentHashMap 操作"></a>6.1.5 ConcurrentHashMap 操作</h3><h4 id="1-get操作"><a href="#1-get操作" class="headerlink" title="1. get操作"></a>1. get操作</h4><p>先进行再散列，然后使用散列值进行散列运算，定位 Segment，再通过散列算法定位到元素。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">segmentFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>整个 get 操作不需要加锁，除非读到的值是空才会加锁重读。原因是 ConcurrentHashMap 将需要共享的变量都定义为 volatile 类型。</p><h4 id="2-put操作"><a href="#2-put操作" class="headerlink" title="2. put操作"></a>2. put操作</h4><p>put操作会对共享变量进行写操作，所以必须加锁。</p><p>put 方法首先定位到 Segment，然后在 Segment 里进行插入操作。在插入之前，先判断是否需要对 Segment 里的 HashEntry 进行扩容，然后定位添加元素的位置，将其放入 HashEntry 数组中。</p><h4 id="3-size-操作"><a href="#3-size-操作" class="headerlink" title="3. size 操作"></a>3. size 操作</h4><p>统计 ConcurrentHashMap 里元素的大小，就必须统计所有 Segment 里元素的大小后求和。 Segment 里的count 是一个 volatile 变量，但是多线程场景下，某个 segment 的 count 发生改变后，也可能会使结果不准确。</p><p>因此 size 操作的具体过程为：先尝试 2 次通过不锁住 Segment 的方式来统计各个 Segment 大小，如果统计过程中，容器的 count 发生了变化（容器 count 会在 put、remove、clean 时会使 modCount + 1），再采用加锁的方式（将所有 Segment 的 put、remove、clean 方法全部锁住）来统计 Segment 的大小。</p><h2 id="6-2-ConcurrentLinkedQueue"><a href="#6-2-ConcurrentLinkedQueue" class="headerlink" title="6.2 ConcurrentLinkedQueue"></a>6.2 ConcurrentLinkedQueue</h2><p>ConcurrentLinkedQueue 是一个基于链接节点的无界线程安全队列，采用 FIFO 的规则对节点进行排序。</p><h3 id="6-2-1-ConcurrentLinkedQueue-结构"><a href="#6-2-1-ConcurrentLinkedQueue-结构" class="headerlink" title="6.2.1 ConcurrentLinkedQueue 结构"></a>6.2.1 ConcurrentLinkedQueue 结构</h3><p>ConcurrentLinkedQueue 由 head 节点和 tail 节点组成，每个节点（Node）由节点元素（item）和指向下一个节点（next）的引用组成，节点与节点之间就是通过这个 next 关联，组成一张链表结果的队列。</p><h3 id="6-2-2-入队列"><a href="#6-2-2-入队列" class="headerlink" title="6.2.2 入队列"></a>6.2.2 入队列</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 插入元素到当前队列的尾部，且因为队列是无界的，结果总是true     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 将插入元素构建为 node</span>        <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> t <span class="token operator">=</span> tail<span class="token punctuation">,</span> p <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>E<span class="token operator">></span> q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">casNext</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t<span class="token punctuation">)</span>                        <span class="token function">casTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> head<span class="token punctuation">;</span>            <span class="token keyword">else</span>                p <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> t <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> tail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> t <span class="token operator">:</span> q<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-入队列"><a href="#1-入队列" class="headerlink" title="1. 入队列"></a>1. 入队列</h4><p>入队列就是将入队节点添加到队列的尾部。在入队时，先将入队节点设置成当前队列尾节点的下一个节点，然后更新 tail 节点，如果 tail 节点的 next 节点不为空，则将入队节点设置成 tail 节点，如果 tail 节点的 next 节点为空，则将入队节点设置为 tail 的 next 节点。</p><p>在设置入队节点为 tail 的 next 节点时，会使用  CAS 来保证多线程下的安全性。</p><h4 id="2-定位尾节点"><a href="#2-定位尾节点" class="headerlink" title="2. 定位尾节点"></a>2. 定位尾节点</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Returns the successor of p, or the head node if p.next has been     * linked to self, which will only be true if traversing with a     * stale pointer that is now off the list.     */</span>    <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">succ</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>E<span class="token operator">></span> next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> next<span class="token punctuation">)</span> <span class="token operator">?</span> head <span class="token operator">:</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-设置入队节点为尾节点"><a href="#3-设置入队节点为尾节点" class="headerlink" title="3. 设置入队节点为尾节点"></a>3. 设置入队节点为尾节点</h4><p>p.casNext(null,n) 将入队节点设置为当前队列尾节点的 next 节点，如果 p 为null，表示 p 是当前队列的尾节点，不为空则表示其他线程更新了尾节点，需要重新获取当前队列的尾节点。</p><h3 id="6-2-3-出队列"><a href="#6-2-3-出队列" class="headerlink" title="6.2.3 出队列"></a>6.2.3 出队列</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    restartFromHead<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 获取头节点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>E<span class="token operator">></span> h <span class="token operator">=</span> head<span class="token punctuation">,</span> p <span class="token operator">=</span> h<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            E item <span class="token operator">=</span> p<span class="token punctuation">.</span>item<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2. 头节点不为空，则用 CAS 将头节点的引用置null；为空则表示头节点被另一线程的出队操作取出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">casItem</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 3. CAS 操作成功，直接返回头节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> h<span class="token punctuation">)</span>                     <span class="token function">updateHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> q <span class="token operator">:</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> item<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>q <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">updateHead</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 4. 如果取出失败，则继续进行循环取值</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>                <span class="token keyword">continue</span> restartFromHead<span class="token punctuation">;</span>            <span class="token keyword">else</span>                p <span class="token operator">=</span> q<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-3-阻塞队列"><a href="#6-3-阻塞队列" class="headerlink" title="6.3 阻塞队列"></a>6.3 阻塞队列</h2><h3 id="6-3-1-什么是阻塞队列"><a href="#6-3-1-什么是阻塞队列" class="headerlink" title="6.3.1 什么是阻塞队列"></a>6.3.1 什么是阻塞队列</h3><p>阻塞队列是一个支持阻塞插入和阻塞移除的方法。</p><p>插入和移除操作的4中处理方式：</p><table><thead><tr><th>方法/处理方式</th><th>抛出异常</th><th>返回特殊值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除方法</td><td>remove(e)</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查方法</td><td>element()</td><td>peek()</td><td>/</td><td>/</td></tr></tbody></table><h3 id="6-3-2-Java-阻塞队列"><a href="#6-3-2-Java-阻塞队列" class="headerlink" title="6.3.2 Java 阻塞队列"></a>6.3.2 Java 阻塞队列</h3><p>JDK 中提供了 7个阻塞队列：</p><ul><li>ArrayBlockingQueue：由数组结构组成的有界阻塞队列<ul><li>队列按照FOFO原则对元素进行排序</li><li>默认不保证线程访问队列时的公平性</li></ul></li><li>LinkedBlockingQueue：由链表结构组成的有界阻塞队列<ul><li>FIFO原则对元素进行排序</li><li>队列默认和最大长度为 Integer.MAX_VALUE</li></ul></li><li>PriorityBlockingQueue：支持优先级排序的无界阻塞队列<ul><li>支持优先级、无界阻塞</li><li>元素采用自然顺序升序排列，也可以自定义 compareTo 来排序</li><li>不能保证同优先级元素的顺序</li></ul></li><li>DelayQueue：使用优先级队列实现的无界阻塞队列<ul><li>支持延迟获取元素</li><li>队列元素必须实现 Delayed 接口</li><li>队列使用 PriorityQueue 实现</li><li>创建元素时可指定多久后才能获取当前元素</li><li>DelayQueue常用于：<ul><li>缓存系统的设计：用 DelayQueue 保存缓存元素的有效期</li><li>定时任务调度：使用 DelayQueue 保存执行的任务和执行时间</li></ul></li></ul></li><li>SynchronousQueue：不存储元素的阻塞队列<ul><li>不存储元素，每个put操作必须等待一个 take 操作</li><li>支持公平访问队列，默认是非公平的</li><li>队列本身不存储任何元素，适合传递性场景</li><li>吞吐量高于 LinkedBlockingQueue 和 ArrayBlockingQueue</li></ul></li><li>LinkedTransferQueue：由链表结构组成的无界阻塞队列<ul><li>提供 transfer 方法，立即将元素 transfer 给消费者，如果无消费者等待则将元素放在队列的 tail 节点，等待消费者消费</li><li>提供 tryTransfer 方法，试探生产者传入的元素能够直接传给消费者，如果无消费者等待接收，则返回false。</li></ul></li><li>LinkedBlockingQueue：由链表结构组成的双向阻塞队列<ul><li>双向队列，使多线程同时入队时，减少了一般竞争，因为多了一个入队口</li><li>增加了 addFirst、addLast、offerFirst、offerLast、peekFirst、peekLast等方法</li><li>add 等同于 addLast，remove 等同于 removeFirst</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第五章 Java中的锁</title>
      <link href="/2019/06/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/5.Java%E4%B8%AD%E7%9A%84%E9%94%81/"/>
      <url>/2019/06/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/5.Java%E4%B8%AD%E7%9A%84%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="第五章-Java中的锁"><a href="#第五章-Java中的锁" class="headerlink" title="第五章 Java中的锁"></a>第五章 Java中的锁</h1><p>锁的作用：用来控制多个线程访问共享资源的方式。一个锁能够防止多个线程同时访问共享资源(但有些锁可以允许多个线程并发的访问共享资源，比如读写锁)。</p><h2 id="5-1-Lock-接口"><a href="#5-1-Lock-接口" class="headerlink" title="5.1 Lock 接口"></a>5.1 Lock 接口</h2><p>Lock 接口提供了与 synchronized 关键字类似的同步功能，只是在使用时需要显示地获取和释放锁。虽然 Lock 接口缺少了 synchronized 方法隐式获取释放锁的便捷性，但是却拥有了锁获取与释放的可操作性、可中断的获取锁以及超时获取锁等多种 synchronized 关键字所不具备的同步特性。</p><p>Lock 接口的 API:</p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>void lock()</td><td>获取锁</td></tr><tr><td>void lockInterruptibly() throws InterruptedException</td><td>可中断的获取锁</td></tr><tr><td>boolean tryLock()</td><td>尝试非阻塞的获取锁</td></tr><tr><td>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</td><td>超时获取锁</td></tr><tr><td>void unlock()</td><td>释放锁</td></tr><tr><td>Condition newCondition()</td><td>获取等待通知组件</td></tr></tbody></table><h2 id="5-2-队列同步器"><a href="#5-2-队列同步器" class="headerlink" title="5.2 队列同步器"></a>5.2 队列同步器</h2><p>队列同步器(AbstractQueuedSynchronizer)，是用来构建锁或者其他同步组件的基础框架，通过内置 FIFO 队列来完成资源获取线程的排队工作。</p><p>同步器是实现锁的关键：  –  锁面向使用者，定义了使用者与锁交互的接口，隐藏了实现细节； –  同步器面向锁的实现者，简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待与唤醒等底层操作。</p><h3 id="5-2-1-同步器接口"><a href="#5-2-1-同步器接口" class="headerlink" title="5.2.1 同步器接口"></a>5.2.1 同步器接口</h3><p>队列同步器提供了三个抽象方法供实现类实现：</p><ol><li>getState()：获取当前同步状态</li><li>setState(int newState)：设置当前同步状态</li><li>compareAndSetState(int expect,int update)：使用CAS设置当前状态</li></ol><p>同时，同步器提供了多个可重写的方法：</p><ol><li>tryAcquire(int arg)：独占式获取同步状态</li><li>tryRelease(int arg)：独占式释放同步状态</li><li>tryAcquireShared(int arg)：共享式获取同步状态</li><li>tryReleaseShared(int arg)：共享式释放同步状态</li><li>isHeldExclusively()：当前同步器是否被线程独占</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>AbstractQueuedSynchronizer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Condition<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span>Lock<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用 Mutex 时并不会直接与内部同步器的实现打交道，而是调用 Mutex 提供的方法. * 如 获取锁的lock() 方法，只需要在方法实现中调用同步器的 acquire(int arg) 即可。 * 当前线程后去同步状态失败后，会被加入到同步队列中等待 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mutex</span> <span class="token keyword">implements</span> <span class="token class-name">Lock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是否处于占用状态</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 当状态为0时获取锁</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过CAS设置state</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 释放锁，将状态设置为0</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 返回一个 Condition ，每个Condition 都包含了一个 condition 队列</span>        Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConditionObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Sync sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Condition <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sync<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-2-队列同步器的实现分析"><a href="#5-2-2-队列同步器的实现分析" class="headerlink" title="5.2.2 队列同步器的实现分析"></a>5.2.2 队列同步器的实现分析</h3><h4 id="1-同步队列"><a href="#1-同步队列" class="headerlink" title="1. 同步队列"></a>1. 同步队列</h4><p>同步器内部使用一个同步队列(FIFO)来完成同步状态的管理，当线程获取同步状态失败后，会将当前线程及其等待状态等信息构造成为一个节点（Node）并加入同步队列，同时阻塞当前线程。</p><p>当同步状态释放时，会将首节点唤醒，再次尝试获取同步状态。</p><p>节点（Node）的属性类型与名称描述</p><table><thead><tr><th>属性类型与名称</th><th>描述</th></tr></thead><tbody><tr><td>int waitStatus</td><td>等待状态</td></tr><tr><td>Node prev</td><td>前驱节点</td></tr><tr><td>Node next</td><td>后继节点</td></tr><tr><td>Node nextWaiter</td><td>等待队列中的后继节点</td></tr><tr><td>Thread</td><td>获取同步状态的线程</td></tr></tbody></table><p>类似于双向链表</p><h4 id="2-独占式同步状态获取与释放"><a href="#2-独占式同步状态获取与释放" class="headerlink" title="2. 独占式同步状态获取与释放"></a>2. 独占式同步状态获取与释放</h4><p>调用同步器的 acquire(int arg) 方法，可以获取同步状态，JDK 中acquire的实现如下：</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Acquires in exclusive mode, ignoring interrupts.  Implemented     * by invoking at least once {@link #tryAcquire},     * returning on success.  Otherwise the thread is queued, possibly     * repeatedly blocking and unblocking, invoking {@link     * #tryAcquire} until success.  This method can be used     * to implement method {@link Lock#lock}.     *     * @param arg the acquire argument.  This value is conveyed to     *        {@link #tryAcquire} but is otherwise uninterpreted and     *        can represent anything you like.     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span>Node<span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>其主要逻辑为：1. tryAcquire 尝试获取同步状态，如果失败的话则构造同步节点，并通过addWirter方法将该节点加入到同步队列的尾部；2. 调用 acquireQueued 方法，使该节点以死循环的方式获取同步状态，如果获取不到则阻塞节点中的线程。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Inserts node into queue, initializing if necessary. See picture above.     * @param node the node to insert     * @return node's predecessor     */</span>    <span class="token keyword">private</span> Node <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> Node node<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node t <span class="token operator">=</span> tail<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Must initialize</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Creates and enqueues node for current thread and given mode.     *     * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared     * @return the new node     */</span>    <span class="token keyword">private</span> Node <span class="token function">addWaiter</span><span class="token punctuation">(</span>Node mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Try the fast path of enq; backup to full enq on failure</span>        Node pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://ask.qcloudimg.com/http-save/yehe-1653183/m5il5f5c34.png?imageView2/2/w/1620" alt="独占式同步状态获取流程"></p><h4 id="3-共享式同步状态获取与释放"><a href="#3-共享式同步状态获取与释放" class="headerlink" title="3. 共享式同步状态获取与释放"></a>3. 共享式同步状态获取与释放</h4><p>共享式与独占式最主要的区别在于，同一时刻能否有多个线程同时获取到同步状态。</p><p>主要方法有：acquireShared(int arg)、tryAcquireShared(int arg)、releaseShared(int arg)</p><h4 id="4-独占式超时获取同步状态"><a href="#4-独占式超时获取同步状态" class="headerlink" title="4. 独占式超时获取同步状态"></a>4. 独占式超时获取同步状态</h4><p>同步器的 doAcquireNanos(int arg, long nanosTimeout) 方法可以超时获取同步状态，即在指定的时间段内获取同步状态，成功返回true。</p><p><img src="https://img-blog.csdn.net/20180830162607150?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjY3ODE3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="独占式超时获取同步状态流程"></p><h2 id="5-3-重入锁-ReentrantLock"><a href="#5-3-重入锁-ReentrantLock" class="headerlink" title="5.3 重入锁 ReentrantLock"></a>5.3 重入锁 ReentrantLock</h2><p>重入锁，表示该锁能够支持一个线程对资源的重复加锁。即 ReentrantLock 在调用 lock() 方法时已经获取到锁的线程，再次调用 lock() 方法依旧能够获取锁而不被阻塞。</p><p>此外，重入锁还支持获取锁时的公平性与非公平性选择。</p><blockquote><p>synchronized 关键字隐式的支持重入</p><h3 id="1-实现重进入"><a href="#1-实现重进入" class="headerlink" title="1. 实现重进入"></a>1. 实现重进入</h3><p>重进入，指任意线程在获取锁之后能够再次获取该锁而不被阻塞，实现该特性需要解决两个问题：</p><ol><li>线程再次获取锁：即锁需要识别获取的锁是否为当前占据锁的线程。</li><li>锁的最终释放：通过计数自增的方式表示线程重复n次加锁，锁释放也是同理。</li></ol></blockquote><h3 id="2-公平与非公平获取锁的区别"><a href="#2-公平与非公平获取锁的区别" class="headerlink" title="2. 公平与非公平获取锁的区别"></a>2. 公平与非公平获取锁的区别</h3><p>如果一个锁是公平的，那么锁的获取顺序就应该符合FIFO原则。</p><p>一般情况下，非公平锁的效率是要高于公平锁的。但是非公平锁可能使线程“饥饿”，即先来的线程因优先级低一直处于等待状态。</p><h2 id="5-4-读写锁"><a href="#5-4-读写锁" class="headerlink" title="5.4 读写锁"></a>5.4 读写锁</h2><p>上面的锁基本都是排他锁，在同一时刻只允许一个线程进行访问。而读写锁能在同一时刻允许多个<strong>读线程</strong>访问，但在<strong>写线程</strong>访问时，所有<strong>读、写线程均被阻塞</strong>。</p><h3 id="5-4-1-ReentrantReadWriteLock-的特性与API"><a href="#5-4-1-ReentrantReadWriteLock-的特性与API" class="headerlink" title="5.4.1 ReentrantReadWriteLock 的特性与API"></a>5.4.1 ReentrantReadWriteLock 的特性与API</h3><table><thead><tr><th>特性</th><th>说明</th></tr></thead><tbody><tr><td>公平性选择</td><td>支持公平与非公平的锁获取方式</td></tr><tr><td>重进入</td><td>支持重进入，即写锁能支持一个线程多次获取，读锁也是</td></tr><tr><td>锁降级</td><td>写锁能够降级为读锁</td></tr></tbody></table><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>int getReadLockCount()</td><td>返回当前读锁被获取的次数</td></tr><tr><td>int getReadHoldCount()</td><td>返回当前线程获取读锁的次数</td></tr><tr><td>boolean isWriteLocked()</td><td>判断写锁是否被获取</td></tr><tr><td>int getWriteHoldCount()</td><td>返回当前写锁被获取的次数</td></tr></tbody></table><h3 id="5-4-2-读写锁的实现分析"><a href="#5-4-2-读写锁的实现分析" class="headerlink" title="5.4.2 读写锁的实现分析"></a>5.4.2 读写锁的实现分析</h3><h4 id="1-读写状态的设计"><a href="#1-读写状态的设计" class="headerlink" title="1. 读写状态的设计"></a>1. 读写状态的设计</h4><p>读写锁同样依赖于自定义同步器来实现同步功能，但是读写锁的同步器需要维护<strong>多个读线程和一个写线程</strong>。</p><h4 id="2-写锁的获取与释放"><a href="#2-写锁的获取与释放" class="headerlink" title="2. 写锁的获取与释放"></a>2. 写锁的获取与释放</h4><p>写锁是一个支持重入的排他锁，只能被一个线程获取及重入。</p><p>如果当前线程在获取写锁时，读锁已经被获取(state!=0)或者该线程不是获取写锁的线程，则进入等待状态。</p><p>写锁的释放与 ReentrantLock 类似，都是维护一个 <strong>写状态属性</strong>，为0时表示写锁被释放，同时写锁的修改对其后的读锁可见。</p><h4 id="3-读锁的获取与释放"><a href="#3-读锁的获取与释放" class="headerlink" title="3. 读锁的获取与释放"></a>3. 读锁的获取与释放</h4><p>读锁是一个支持重入的共享锁，能被多个线程同时获取。</p><p>如果当前没有其他写线程，则读锁总会被成功获取。</p><p>读锁的每次释放均减少读状态。</p><h4 id="4-锁降级"><a href="#4-锁降级" class="headerlink" title="4. 锁降级"></a>4. 锁降级</h4><p><strong>写锁降级为读锁</strong>，指当前拥有写锁的线程，再获取读锁，随后释放之前拥有的写锁的过程。</p><blockquote><p>ReentrantReadWriteLock 不支持锁升级。</p></blockquote><h2 id="5-5-LockSupport-工具"><a href="#5-5-LockSupport-工具" class="headerlink" title="5.5 LockSupport 工具"></a>5.5 LockSupport 工具</h2><p>当需要阻塞或唤醒一个线程的时候，会使用 LockSupport 工具类来完成相应的工作。</p><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>void park()</td><td>阻塞当前线程</td></tr><tr><td>void parkNanos(long nanos)</td><td>阻塞当前线程nanos纳秒</td></tr><tr><td>void parkUntil(long deadline)</td><td>阻塞当前线程知道deadline</td></tr><tr><td>void unpark(Thread thread)</td><td>唤醒处于阻塞状态的线程</td></tr></tbody></table><h2 id="5-6-Condition-接口"><a href="#5-6-Condition-接口" class="headerlink" title="5.6 Condition 接口"></a>5.6 Condition 接口</h2><p>Object 对象拥有一组监视器方法，包含：wait()、wait(long timeout)、notify()及notifyAll() ，这些方法与 synchronized 关键字配合，实现 等待/通知模式。</p><p>Condition 也提供了类似的方法，与Lock 配合实现 等待/通知 模式。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第四章 Java 并发编程基础</title>
      <link href="/2019/06/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/4.Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/4.Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="第四章-Java-并发编程基础"><a href="#第四章-Java-并发编程基础" class="headerlink" title="第四章 Java 并发编程基础"></a>第四章 Java 并发编程基础</h1><h2 id="4-1-线程"><a href="#4-1-线程" class="headerlink" title="4.1 线程"></a>4.1 线程</h2><h3 id="4-1-1-什么是线程"><a href="#4-1-1-什么是线程" class="headerlink" title="4.1.1 什么是线程"></a>4.1.1 什么是线程</h3><p>操作系统在运行一个程序时，会创建一个进程，如一个Java程序就对应一个 Java 进程。</p><p>一个进程可以创建多个线程，每个线程都拥有各自的计数器、堆栈和局部变量等属性，并且能够访问共享的内存变量。</p><p>处理器在这些线程间高速切换，让使用者感觉是在同时运行。</p><h3 id="4-1-2-多线程"><a href="#4-1-2-多线程" class="headerlink" title="4.1.2 多线程"></a>4.1.2 多线程</h3><p>使用多线程的优势如下：</p><ol><li>更好的利用多处理器核心</li><li>程序运行更快，以获得更快的响应时间</li><li>更好的编程模型</li></ol><h3 id="4-1-3-线程优先级"><a href="#4-1-3-线程优先级" class="headerlink" title="4.1.3 线程优先级"></a>4.1.3 线程优先级</h3><p>线程优先级决定了线程能够使用处理器的资源多少，默认优先级为5，优先级范围为 1~10.</p><p>针对频繁阻塞的(休眠或者 IO操作)线程需要设置较高优先级，而偏重计算(需要较多CPU时间或者偏运算)的线程则设置较低的优先级，确保处理器不会被独占。</p><h3 id="4-1-4-线程的状态"><a href="#4-1-4-线程的状态" class="headerlink" title="4.1.4 线程的状态"></a>4.1.4 线程的状态</h3><p>Java 线程的六种生命周期：</p><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>NEW</td><td>初始状态，线程被构建，但是还未调用 start() 方法</td></tr><tr><td>RUNNABLE</td><td>运行状态，即操作系统中的就绪和运行两种状态</td></tr><tr><td>BLOCKED</td><td>阻塞状态，表示线程阻塞于锁</td></tr><tr><td>WAITING</td><td>等待状态，表示当前线程需要等待其他线程做出一些特定动作(通知或中断)</td></tr><tr><td>TIME_WAITING</td><td>超时等待状态，表示可以在指定时间自动返回的等待状态</td></tr><tr><td>TERMINATED</td><td>终止状态，表示线程已执行完毕</td></tr></tbody></table><p><img src="https://img-blog.csdnimg.cn/20181120173640764.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BhbmdlMTk5MQ==,size_16,color_FFFFFF,t_70" alt="Java线程状态变迁"></p><h3 id="4-1-5-Daemon-线程"><a href="#4-1-5-Daemon-线程" class="headerlink" title="4.1.5 Daemon 线程"></a>4.1.5 Daemon 线程</h3><p>当Java 虚拟机中不存在 Daemon 线程时，虚拟机将会退出。</p><p>通过 Thread.setDaemon(true) 将线程设置为 Daemon 线程。</p><h2 id="4-2-启动、终止线程"><a href="#4-2-启动、终止线程" class="headerlink" title="4.2 启动、终止线程"></a>4.2 启动、终止线程</h2><p>通过调用线程的 start() 方法启动，随着 run() 方法的执行完毕，线程随之终止。</p><h3 id="4-2-1-中断"><a href="#4-2-1-中断" class="headerlink" title="4.2.1 中断"></a>4.2.1 中断</h3><p>中断表示一个运行中的线程是否被其他线程进行了中断操作。</p><p>中断操作是一种简便的线程间交互方式，而这种交互方式最适合用来取消或停止任务。</p><h3 id="4-2-2-安全地终止线程"><a href="#4-2-2-安全地终止线程" class="headerlink" title="4.2.2 安全地终止线程"></a>4.2.2 安全地终止线程</h3><p>通过标识位或者中断操作的方式，能够使线程在终止时有机会去清理资源，而不是武断地将线程停止。</p><p>通过标识位和中断来停止线程：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRunner</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> i<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> on <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>on <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        on <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-3-线程间通信"><a href="#4-3-线程间通信" class="headerlink" title="4.3 线程间通信"></a>4.3 线程间通信</h2><p>Java 支持多个线程同时访问一个对象或者对象的成员变量，由于每个线程可以拥有这个变量的拷贝，所以程序在执行过程中，各线程看到的变量并不一定是最新的。</p><h3 id="4-3-1-volatile-和-synchronized-关键字"><a href="#4-3-1-volatile-和-synchronized-关键字" class="headerlink" title="4.3.1 volatile 和 synchronized 关键字"></a>4.3.1 volatile 和 synchronized 关键字</h3><p>volatile 关键字：用来修饰的变量，可以使访问该变量的线程均从共享内存中获取。且对共享变量的修改，必须同步刷新回共享内存中。但是过多地使用volatile 会降低程序执行的效率。</p><p>synchronized 关键字：用来修饰方法或者同步块，确保多个线程在同一时刻，只能有一个线程处于方法或者同步块中，保证了线程对变量访问的可见性和排他性。</p><h3 id="4-3-2-等待-通知机制"><a href="#4-3-2-等待-通知机制" class="headerlink" title="4.3.2 等待/通知机制"></a>4.3.2 等待/通知机制</h3><p>等待/ 通知机制，是指一个线程A 调用了对象O 的wait() 方法而进入等待状态。线程B 调用了对象O 的notify()或notifyAll() 方法，线程A 收到通知后从对象O的wait() 方法返回，进而执行后续操作。</p><p>等待通知的经典范式：</p><p>等待方(消费方):</p><ol><li>获取对象的锁</li><li>如果条件不满足，则调用对象的wait()方法，被通知后仍要检查条件</li><li>条件满足则执行对应的逻辑</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>条件不满足<span class="token punctuation">)</span><span class="token punctuation">{</span>        对象<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    处理逻辑<span class="token punctuation">}</span></code></pre><p>通知方(生产者)：</p><ol><li>获得对象的锁</li><li>改变条件</li><li>通知所有等待在对象上的线程</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>对象<span class="token punctuation">)</span><span class="token punctuation">{</span>    改变条件    对象<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-3-Thread-join"><a href="#4-3-3-Thread-join" class="headerlink" title="4.3.3 Thread.join()"></a>4.3.3 Thread.join()</h3><p>如果一个线程 A 执行了 thread.join() 语句，其含义是：当前线程 A 等待 thread 线程终止之后才从 thread.join() 返回。</p><h2 id="4-4-线程应用实例"><a href="#4-4-线程应用实例" class="headerlink" title="4.4 线程应用实例"></a>4.4 线程应用实例</h2><h3 id="4-4-1-等待超时模式"><a href="#4-4-1-等待超时模式" class="headerlink" title="4.4.1 等待超时模式"></a>4.4.1 等待超时模式</h3><p>调用一个方法后，如果在等待时间内得到结果则立即返回，否则返回默认结果。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 伪代码：</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">long</span> mills<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">long</span> future <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> mills<span class="token punctuation">;</span>    <span class="token keyword">long</span> remaining <span class="token operator">=</span> mills<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> remaining <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>        remaining <span class="token operator">=</span> future <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMills</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-4-2-简单的数据库连接池"><a href="#4-4-2-简单的数据库连接池" class="headerlink" title="4.4.2 简单的数据库连接池"></a>4.4.2 简单的数据库连接池</h3><h3 id="4-4-3-基于数据库连接池的Web服务器"><a href="#4-4-3-基于数据库连接池的Web服务器" class="headerlink" title="4.4.3 基于数据库连接池的Web服务器"></a>4.4.3 基于数据库连接池的Web服务器</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第三章 Java 内存模型</title>
      <link href="/2019/06/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/3.Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/06/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/3.Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-Java-内存模型"><a href="#第三章-Java-内存模型" class="headerlink" title="第三章 Java 内存模型"></a>第三章 Java 内存模型</h1><p>主要包含4个部分：</p><ol><li>Java 内存模型的基础</li><li>Java 内存模型中的顺序一致性，即重排序和顺序一致性内存模型</li><li>同步原语，3个同步原语的内存语义和重排序规则在处理器中的实现</li><li>Java 内存模型的设计</li></ol><h2 id="3-1-Java-内存模型的基础"><a href="#3-1-Java-内存模型的基础" class="headerlink" title="3.1 Java 内存模型的基础"></a>3.1 Java 内存模型的基础</h2><h3 id="3-1-1-并发编程模型的两个关键问题"><a href="#3-1-1-并发编程模型的两个关键问题" class="headerlink" title="3.1.1 并发编程模型的两个关键问题"></a>3.1.1 并发编程模型的两个关键问题</h3><p>在并发编程中，需要处理两个关键问题：1. 线程之间如何通信；2.线程之间如何同步。</p><p><strong>通信</strong>，是指线程间以何种机制交换信息，如 <code>共享内存</code> 和<code>消息传递</code>。</p><p>共享内存：在此模型中，线程之间共享程序的公共状态，通过写 - 读内存中的公共状态进行隐式通信。</p><p>消息传递：在此模型中，线程间没有公共状态，只能通过发送消息来显式进行通信。</p><p><strong>同步</strong>，指程序中用于控制不同线程间操作发生相对顺序的机制。</p><p>共享内存：在此模型中，同步是显式进行的，程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。</p><p>消息传递：在此模型中，由于消息发送必须在消息接收之前，因此同步是隐式的。</p><h3 id="3-1-2-Java-内存模型的抽象结构"><a href="#3-1-2-Java-内存模型的抽象结构" class="headerlink" title="3.1.2 Java 内存模型的抽象结构"></a>3.1.2 Java 内存模型的抽象结构</h3><p>在 Java 中，所有实例域、静态域、数组元素都存储在堆内存中，堆内存在线程之间共享。局部变量、方法定义参数、异常处理参数不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。</p><p>Java 线程之间的通信由 Java 内存模型(JMM) 控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见。</p><p>JMM定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存(抽象概念)，本地内存中存储了该线程以读/写共享变量的副本。</p><p>本地内存涵盖了缓存、写缓冲区、寄存器以及其他硬件和编译器优化。</p><p><img src="https://pic3.zhimg.com/80/v2-af520d543f0f4f205f822ec3b151ad46_hd.jpg" alt="Java 内存模型的抽象结构示意图"></p><p>线程A与B之间通信，需要经历如下两个步骤：</p><ol><li>线程A把本地内存A中更新过的共享变量刷新到主内存中</li><li>线程B到主内存中读取线程A之前已更新过的共享变量</li></ol><p>总体来看，这两步的实质是线程A向线程B通信，且这个通信过程必须要经过主内存。</p><h3 id="3-1-3-指令重排序"><a href="#3-1-3-指令重排序" class="headerlink" title="3.1.3 指令重排序"></a>3.1.3 指令重排序</h3><p>在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排序。</p><p>指令重排的顺序：源代码 –&gt;  1.编译器优化重排序 –&gt; 2. 指令集并行重排序 –&gt; 3. 内存系统重排序  –&gt; 最终执行的指令序列</p><p>为了保证内存可见性，Java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。</p><h3 id="3-1-4-Happens-Before"><a href="#3-1-4-Happens-Before" class="headerlink" title="3.1.4 Happens-Before"></a>3.1.4 Happens-Before</h3><p>happens-before 用来阐述操作之间的内存可见性，在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在 happens-before 关系。这两个操作可以在不同的线程中。</p><h2 id="3-2-重排序"><a href="#3-2-重排序" class="headerlink" title="3.2 重排序"></a>3.2 重排序</h2><p>重排序是指编译器和处理器为了优化程序性能而对指令序列进行重新排序的一种手段。</p><h3 id="3-2-1-数据依赖性"><a href="#3-2-1-数据依赖性" class="headerlink" title="3.2.1 数据依赖性"></a>3.2.1 数据依赖性</h3><p>如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在数据依赖性。</p><p>编译器和处理器在重排序时，会遵守数据依赖性，不会改变存在数据依赖性关系的两个操作的执行顺序。</p><h3 id="3-2-2-as-if-serial"><a href="#3-2-2-as-if-serial" class="headerlink" title="3.2.2 as-if-serial"></a>3.2.2 as-if-serial</h3><p>as-if-serial：不管怎么重排序（提高并行度），程序的执行结果不能改变。</p><h3 id="3-2-3-结论"><a href="#3-2-3-结论" class="headerlink" title="3.2.3 结论"></a>3.2.3 结论</h3><p>在不改变程序结果的前提下，尽可能提高并行度。</p><h2 id="3-3-顺序一致性"><a href="#3-3-顺序一致性" class="headerlink" title="3.3 顺序一致性"></a>3.3 顺序一致性</h2><p>顺序一致性内存模型是一个理论参考模型，在设计时，处理器的内存模型和编程语言的内存模型都会以顺序一致性内存模型作为参照。</p><p>顺序一致性：即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。</p><h3 id="3-3-1-顺序一致性内存模型"><a href="#3-3-1-顺序一致性内存模型" class="headerlink" title="3.3.1 顺序一致性内存模型"></a>3.3.1 顺序一致性内存模型</h3><p>顺序一致性内存模型具有两大特性：</p><ol><li>一个线程中的所有操作必须按照程序的顺序来执行</li><li>（不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序。在顺序一致性内存模型中，每个操作都必须原子执行且立刻对所有线程可见。</li></ol><h2 id="3-4-volatile-的内存语义"><a href="#3-4-volatile-的内存语义" class="headerlink" title="3.4 volatile 的内存语义"></a>3.4 volatile 的内存语义</h2><p>当声明共享变量为 volatile 后，可以看成是使用同一个锁对这些单个读写操作做了同步。</p><p>volatile 具有以下特性：</p><ol><li>可见性。对一个volatile 变量的读，总是能看到对这个volatile 变量最后的写入。</li><li>原子性。对任意单个 volatile 变量的读写具有原子性，但类似于 volatile++ 这种复合操作不具有原子性。</li></ol><h3 id="3-4-1-volatile-的读写"><a href="#3-4-1-volatile-的读写" class="headerlink" title="3.4.1 volatile 的读写"></a>3.4.1 volatile 的读写</h3><blockquote><p>写：当写一个 volatile 变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存中。</p><blockquote><p>读：当读一个 volatile 变量时，JMM  会把该线程对应的本地内存置为无效，线程从主内存中读取共享变量。</p><h3 id="3-4-2-volatile-内存语义"><a href="#3-4-2-volatile-内存语义" class="headerlink" title="3.4.2 volatile 内存语义"></a>3.4.2 volatile 内存语义</h3><p>基于保守策略的 JMM 内存屏障插入策略：</p><ol><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障<ol><li><code>StoreStore</code> 屏障，将保障上面所有的普通写，在volatile 写之前刷新到主内存</li></ol></li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障<ol><li><code>StoreLoad</code> 屏障，避免volatile写与后面可能有的 volatile 读写操作重排序</li></ol></li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障<ol><li><code>LoadLoad</code> 屏障，用来禁止处理器把上面的 volatile 读与下面的普通读重排序</li></ol></li><li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障<ol><li><code>LoadStore</code> 屏障，用来禁止处理器把上面的 volatile 读与下面的普通写重排序</li></ol></li></ol></blockquote></blockquote><blockquote><p>volatile 仅能保证对单个 volatile 变量的读写具有原子性，而锁的互斥执行能确保整个临界区代码的执行具有原子性。在功能上，锁比 volatile 更强大；在可伸缩性和执行性能上，volatile 更有优势。</p></blockquote><h2 id="3-5-锁的内存语义"><a href="#3-5-锁的内存语义" class="headerlink" title="3.5 锁的内存语义"></a>3.5 锁的内存语义</h2><p>锁是 Java 并发编程中最重要的同步机制。锁除了让临界区互斥执行外，还可以让释放锁的线程向获取同一个锁的线程发送消息。</p><h3 id="3-5-1-锁的获取与释放"><a href="#3-5-1-锁的获取与释放" class="headerlink" title="3.5.1 锁的获取与释放"></a>3.5.1 锁的获取与释放</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MonitorExample</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据程序次序规则，1 happens-before 2, 2 happens-before 3 ...</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 2</span>    <span class="token punctuation">}</span>                                    <span class="token comment" spellcheck="true">// 3</span>    <span class="token comment" spellcheck="true">// 根据监视器锁规则，3 happens-before 4</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 4</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 5  根据happens-before 的传递性，2 happens-before 5</span>    <span class="token punctuation">}</span>                                    <span class="token comment" spellcheck="true">// 6</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        MonitorExample me <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MonitorExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            me<span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当线程释放锁时，JMM 会把线程对应的本地内存中的共享变量刷新到主内存中</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当线程获取锁时，JMM 会把该线程对应的本地内存置为无效，从而使得被监视器保护的临界区代码必须从主内存中读取共享变量</span>            me<span class="token punctuation">.</span><span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-2-锁的内存语义"><a href="#3-5-2-锁的内存语义" class="headerlink" title="3.5.2 锁的内存语义"></a>3.5.2 锁的内存语义</h3><p>以 ReentrantLock 为例，分为公平锁和非公平锁。</p><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>加锁方法 lock() 调用轨迹：</p><ol><li>ReentrantLock：lock()</li><li>FairSync：lock()</li><li>AbstractQueuedSynchronizer：acquire(int arg)</li><li>ReentrantLock： tryAcquire(int acquires)</li></ol><blockquote><p> 在获取锁时，会首先读 volatile 变量 state。</p></blockquote><p>解锁方法 unlock（）调用轨迹：</p><ol><li>ReentrantLock：unlock（）</li><li>AbstractQueuedSynchronizer：release(int arg)</li><li>Sync: tryRelease(int releases)</li></ol><blockquote><p>在释放锁的最后，会写 volatile 变量 state</p></blockquote><h4 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h4><p>加锁：</p><ol><li>ReentrantLock: lock()</li><li>NonfairSync: lock()</li><li>AbstractQueuedSynchronizer: compareAndSetState(int expect,int update)</li></ol><blockquote><p>第三步时，会以原子操作的方式更新 state 变量。而 <code>CAS 同时具有 volatile 读和 volatile 写的内存语义</code>。即编译器不会对 CAS 与 CAS 前面和后面的任意内存操作重排序。</p></blockquote><p>解锁同加锁，以CAS 操作 state。</p><h4 id="公平锁与非公平锁的区别"><a href="#公平锁与非公平锁的区别" class="headerlink" title="公平锁与非公平锁的区别"></a>公平锁与非公平锁的区别</h4><p>公平锁：加锁前先检查是否有排队等待的线程，优先排队等待的线程，FIFO(先入先出)</p><p>非公平锁：加锁时不考虑排队等待问题，直接尝试获取锁，获取不到自动到队尾等待</p><h3 id="3-5-4-concurrent-包的实现"><a href="#3-5-4-concurrent-包的实现" class="headerlink" title="3.5.4 concurrent 包的实现"></a>3.5.4 concurrent 包的实现</h3><p>一个通用化的实现方式：</p><ol><li>首先，声明共享变量为 volatile</li><li>然后，使用 CAS 的原子条件更新来实现线程之间的同步</li><li>同时，配合以 volatile 的读写和 CAS 具有的 volatile 读写的内存语义来实现线程之间的通信。 </li></ol><p>AQS，非阻塞数据结构和原子变量类（java.util.concurrent.atomic 包中的类），这些类都是使用这种模式来实现的。</p><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1505674051842&amp;di=c6a5159e65abf3795f1d61abf81c1be1&amp;imgtype=0&amp;src=http%3A%2F%2Fs8.sinaimg.cn%2Fmw690%2F004msBIGzy74jZFZxxZ87" alt="concurrent包的实现示意图"></p><h2 id="3-6-happens-before-的定义"><a href="#3-6-happens-before-的定义" class="headerlink" title="3.6 happens-before 的定义"></a>3.6 happens-before 的定义</h2><ol><li>如果一个操作 happens-before 另一个操作，那么第一个操作的执行结果将对第二个操作可见，且第一个操作的执行顺序在第二个操作之前</li><li>两个操作之间存在 happens-before 关系，并不意味着 Java 平台的具体实现必须按照 happens-before 关系指定的顺序来执行。但是JMM 会保证执行的结果一致性</li></ol><h3 id="3-6-1-happens-before-规则"><a href="#3-6-1-happens-before-规则" class="headerlink" title="3.6.1 happens-before 规则"></a>3.6.1 happens-before 规则</h3><ol><li>程序顺序规则：一个线程中的每个操作，happens-before 于该线程中的任意后续操作</li><li>监视器锁规则：对一个锁的解锁，happens-before 于任意后续对这个 volatile 域的读</li><li>volatile 变量规则，对一个 volatile域的写，happens-before 于任意后续对这个volatile 域的读</li><li>传递性：A happens-before B,B happens-before C =&gt; A happens-before C</li><li>start() 规则：如果线程A执行 ThreadB.start() ，那么A线程的 ThreadB.start() 操作 happens-before于线程B中的任意操作 </li><li>join() 规则：如果线程A执行ThreadB.join() 并成功返回，那么线程B中的任意操作 happens-before 于线程A 从ThreadB.join() 操作成功返回</li></ol><h2 id="3-7-双重检查锁定"><a href="#3-7-双重检查锁定" class="headerlink" title="3.7 双重检查锁定"></a>3.7 双重检查锁定</h2><p>第一种的同步实例化方法，当多个线程同时调用该方法时，会导致加锁和解锁的操作频发，带来性能的问题。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeLazyInit</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Instance instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 由于 getInstance() 方法做了同步处理，synchronized 将导致性能开销。</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> Instance <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二种使用双重检查机制，在第一次检查通过后，再进行加锁。但是由于 JMM 的重排序存在，执行结果可能并不如预期一致。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用双重锁机制，来降低同步的开销。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheckLocking</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Instance instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Instance <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果第一次检查instance 不为 null，那么就不需要执行下面的加锁和解锁操作，可以大幅降低synchronized 带来的性能开销</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DoubleCheckLocking<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 但是，这里存在问题</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>instance = new Instance() 应该分为具体的三步：1. 分配内存空间 2. 初始化对象 3. 将 instance 指向该内存空间 ，第二步和第三步之间可能出现指令重排。即存在instance尚未初始化，但是分配了内存空间的多线程问题。</p></blockquote><p>第三种，基于 volatile 解决方案，将声明对象的引用设置为 volatile 后，代码中的指令重排在多线程环境中将被禁止。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheckLocking</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Instance instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Instance <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DoubleCheckLocking<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第二章 Java 并发机制的底层实现原理</title>
      <link href="/2019/06/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/2.Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>/2019/06/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/2.Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/07/15/5d2bdcd10382530479.png" alt="UTOOLS1563155664180.png"></p><a id="more"></a><h1 id="第二章-Java-并发机制的底层实现原理"><a href="#第二章-Java-并发机制的底层实现原理" class="headerlink" title="第二章 Java 并发机制的底层实现原理"></a>第二章 Java 并发机制的底层实现原理</h1><p>Java 代码在编译之后会变成 Java 字节码，字节码被类加载器加载到 JVM 里，JVM 执行字节码，最终转化为汇编指令在 CPU 上执行。</p><p>Java 中所使用的并发机制依赖于 JVM 的实现和 CPU 的指令。</p><h2 id="2-1-volatile-的应用"><a href="#2-1-volatile-的应用" class="headerlink" title="2.1 volatile 的应用"></a>2.1 volatile 的应用</h2><p>volatile 是轻量级的 synchronized，它在多处理器开发中保证了共享变量的“可见性”。即当一个线程修改了一个共享变量时，另一个线程能够读到这个修改的值。</p><p>volatile 的官方定义：Java 编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致地更新，线程应该确保通过排他锁单独获得这个变量。</p><p>volatile 实现相关的 CPU 术语：</p><table><thead><tr><th>术语</th><th>英文</th><th style="text-align:left">术语描述</th></tr></thead><tbody><tr><td>内存屏障</td><td>memory barriers</td><td style="text-align:left">是一组处理器指令，用于实现对内存操作的顺序限制</td></tr><tr><td>缓冲行</td><td>cache line</td><td style="text-align:left">CPU 高速缓存中可以分配的最小存储单位。处理器填写缓存行时会加载整个缓存行，现代CPU需要执行几百次CPU指令</td></tr><tr><td>原子操作</td><td>atomic operations</td><td style="text-align:left">不可中断的一个或一系列操作</td></tr><tr><td>缓存命中</td><td>cache hit</td><td style="text-align:left">如果进行高速缓存行中操作的内存位置仍然是下次处理器访问的地址时，处理器将从缓存中读取操作数，而不是从内存中读取</td></tr><tr><td>写命中</td><td>write hit</td><td style="text-align:left">当处理器将操作数写回到一个内存缓存的区域时，它首先会检查这个缓存的内存地址是否在缓存行中，如果存在一个有效的缓存行，则处理器将这个操作数写回到缓存，而不是写回到内存</td></tr><tr><td>写缺失</td><td>write misses the cache</td><td style="text-align:left">一个有效的缓存行被写入到不存在的内存区域</td></tr></tbody></table><p>volatile 修改的变量，在进行修改时，会引发两件事：</p><ol><li>通过 Lock 前缀指令，将当前处理缓存行的数据写回到系统内存</li><li>写回内存的操作会使其他 CPU 里缓存了该内存地址的数据无效，当处理器对这个数据进行修改操作时，会重新从系统内存中把数据读到处理器缓存中。</li></ol><h2 id="2-2-synchronized-的实现原理与应用"><a href="#2-2-synchronized-的实现原理与应用" class="headerlink" title="2.2 synchronized 的实现原理与应用"></a>2.2 synchronized 的实现原理与应用</h2><p>synchronized 实现同步的基础：Java 中的每一个对象都可以作为锁。</p><ul><li>对于普通同步方法，锁是当前实例对象</li><li>对于静态同步方法，锁是当前类的 Class 对象</li><li>对于同步方法块，锁是 Synchronized 括号里配置的对象</li></ul><p>Synchronized 在 JVM 里的实现原理：JVM基于进入和退出 Monitor 对象来实现方法同步和代码块同步，但是两者的实现细节不一样。代码块同步是使用 monitorenter 和 monitorexit 指令实现的。</p><p>monitorenter 指令是在编译后插入到同步代码块的开始位置，而 monitorexit 是插入到方法结束处和异常处，JVM保证每个 monitorenter 必须对应 monitorexit。线程执行到 monitorenter 指令时，会尝试获取monitor的所有权，即尝试获得对象的锁。</p><h3 id="2-2-1-锁的升级与对比"><a href="#2-2-1-锁的升级与对比" class="headerlink" title="2.2.1 锁的升级与对比"></a>2.2.1 锁的升级与对比</h3><p>Java1.6 为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p><p>在1.6中，锁共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态。</p><p>锁可以升级但是不能降级，这种策略的目的是为了提高获得锁和释放锁的效率。</p><h4 id="1-偏向锁"><a href="#1-偏向锁" class="headerlink" title="1. 偏向锁"></a>1. 偏向锁</h4><p>大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让获得锁的代价更低而引入了偏向锁。</p><p>当一个线程访问同步块并获得锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需要检查MarkWord 里是否存储着指向当前线程的偏向锁。</p><p>即线程获取资源之后，会在资源上记录当前线程地址，并不会释放，当出现竞争时才会释放锁。</p><blockquote><p>-XX:-UseBiasedLocking=false 关闭偏向锁    </p><blockquote><p>-XX:BiasedLockingStartupDelay=0 关闭延迟(默认情况下，偏向锁在程序启动几秒后才会激活)</p></blockquote></blockquote><h4 id="2-轻量级锁"><a href="#2-轻量级锁" class="headerlink" title="2.轻量级锁"></a>2.轻量级锁</h4><p>加锁：线程在执行同步块之前，JVM会将对象头中的MarkWord 复制到当前线程的锁记录中。然后线程尝试使用 CAS 将对象头中的 MarkWord 替换为指向锁记录的指针。如果成功，线程获得锁；失败，表示其他线程竞争锁，当前线程尝试使用 自旋(即当前线程不停地尝试请求资源，直到成功) 来获取锁。</p><p>解锁：解锁时，使用 CAS 操作将 MarkWord 替换回对象头。成功，则表示没有竞争发生；失败，则表示锁存在竞争，此时锁会膨胀成重量级锁。</p><p><img src="https://gitee.com/chenssy/blog-home/raw/master/image/sijava/201812081005.png" alt="争夺锁导致的锁膨胀"></p><p>图中可以看出，自旋会消耗CPU，为了避免无用的自旋，一旦锁升级为重量级锁，就不会再降级为轻量级锁。重量级锁的所有线程在请求锁资源时，都会进入阻塞状态，只有当锁释放时，才会进行新一轮的夺锁之争。</p><p>锁的优缺点对比：</p><table><thead><tr><th>锁</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>偏向锁</td><td>加锁解锁不需要额外消耗，和执行非同步方法相比，仅纳秒级差距</td><td>如果线程间存在锁竞争，会带来锁撤销的消耗</td><td>只有一个线程访问同步块的场景</td></tr><tr><td>轻量级锁</td><td>竞争的线程不会阻塞，提高了程序的响应速度</td><td>如果始终得不到锁竞争，会使用自旋消耗CPU</td><td>追求响应时间  同步块执行速度非常快</td></tr><tr><td>重量级锁</td><td>线程竞争不使用自旋，不会消耗CPU</td><td>线程阻塞，响应时间缓慢</td><td>追求吞吐量   同步块执行速度较长</td></tr></tbody></table><h2 id="2-3-原子操作的实现原理"><a href="#2-3-原子操作的实现原理" class="headerlink" title="2.3 原子操作的实现原理"></a>2.3 原子操作的实现原理</h2><p>原子（atomic）：“不能被进一步分隔的最小粒子”。</p><p>原子操作（atomic operation）：“不可被中断的一个或一系列操作”。</p><h3 id="原子操作的相关术语："><a href="#原子操作的相关术语：" class="headerlink" title="原子操作的相关术语："></a>原子操作的相关术语：</h3><table><thead><tr><th>术语</th><th>英文</th><th>解释</th></tr></thead><tbody><tr><td>缓存行</td><td>cache line</td><td>缓存的最小操作单位</td></tr><tr><td>比较并交换</td><td>Compare and Swap</td><td>CAS，比较旧值与新值。当旧值发生改变之后才进行替换</td></tr><tr><td>CPU流水线</td><td>CPU pipeline</td><td>在CPU内由5~6个不同功能的电路单元组成一条指令处理流水线，然后将一条x86指令分为5~6步后再由这些电路单元分别执行，这样就能在一个CPU时钟周期完成一条指令，从而提高CPU的运算速度</td></tr><tr><td>内存顺序冲突</td><td>Memory order violation</td><td>内存顺序冲突一般由假共享引起，即多个CPU同时修改一个缓存行的不同部分，引起其中一个CPU操作无效，当出现该冲突时，CPU必须清空流水线</td></tr></tbody></table><h3 id="处理器如何实现原子操作："><a href="#处理器如何实现原子操作：" class="headerlink" title="处理器如何实现原子操作："></a>处理器如何实现原子操作：</h3><ol><li>通过总线锁保证原子性：<ol><li>即使用处理器提供 LOCK # 信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住，该处理器则独占内存。</li><li>缺点：总线锁是把CPU和内存之间的通信锁住了，这使得锁定期内，其他处理器不能操作其他内存地址的数据，因此开销很大。</li></ol></li><li>通过缓存锁定来保证原子性：<ol><li>指内存区域如果被缓存在处理器的缓存行中，并且在 Lock 操作期间被锁定，那么当它执行锁操作回写到内存时，处理器直接修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性。</li><li>缓存一致性：该机制会阻止同时修改由两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时，会使缓存行无效。</li><li>不能使用缓存锁定的场景：a. 操作的数据跨缓存行时，b. 处理器不支持缓存锁定。这两种情况都被调用总线锁定。</li></ol></li></ol><h3 id="Java-如何实现原子操作："><a href="#Java-如何实现原子操作：" class="headerlink" title="Java 如何实现原子操作："></a>Java 如何实现原子操作：</h3><p>在 Java 中可以通过 <code>锁</code> 和 <code>循环CAS</code> 的方式来实现原子操作。</p><p>从 Java 1.5 开始，JDK提供了一些原子包装类来支持原子操作。</p><h3 id="CAS-实现原子操作的三大问题"><a href="#CAS-实现原子操作的三大问题" class="headerlink" title="CAS 实现原子操作的三大问题"></a>CAS 实现原子操作的三大问题</h3><ol><li><code>ABA 问题</code>。<ol><li>原因：因为CAS 在操作值时，先比较旧值是否发生了变化，如果发生变化，再去修改该值。问题则出现在，如果A = 1；A=2；A=1；此时CAS检查时，并未发现A的变化，但是实际上却变化了。</li><li>解决思路：加上版本号即A1=1,A2=2,A3=1</li><li>JDK 中提供了一个类 AtomicStampedReference，通过检查值和预期标记的方法来判断是否需要更新</li></ol></li><li><code>循环时间长开销大</code> 。<ol><li>原因：自旋CAS如果长时间不成功，会给CPU带来非常大的执行开销。</li><li>解决方法：如果JVM能支持处理器提供的pause指令，则效率会有一定提升。pause指令能延迟流水线执行指令，避免在退出循环时因内存顺序冲突而引起CPU流水线被清空，从而提升CPU执行效率。</li></ol></li><li>只能保证一个共享变量的原子操作。<ol><li>原因：当对一个共享变量执行操作时，可以使用循环 CAS，但是对多个共享变量时，就无法保证操作的原子性，此时可以用锁。</li><li>解决方法：将多个共享变量合为一个共享变量来操作，如 i=2,j=a =&gt; ij=2a</li><li>JDK解决方法，提供了AtomicReference类来保证引用对象之间的原子性，即可以把多个变量放在一个对象中进行CAS操作。</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程的艺术》第一章 Java 并发编程的挑战</title>
      <link href="/2019/06/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/1.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E6%8C%91%E6%88%98/"/>
      <url>/2019/06/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF%E3%80%8B/1.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-Java-并发编程的挑战"><a href="#第一章-Java-并发编程的挑战" class="headerlink" title="第一章 Java 并发编程的挑战"></a>第一章 Java 并发编程的挑战</h1><p>说明并发编程的世界中可能遇到的哪些问题，以及如何解决。</p><p>并发的目的是让程序运行得更快，但并不是更多的线程就能让程序最大限度地并发执行。在多线程情景下，面临诸多挑战，如上下文切换、死锁、受限于软硬件资源等问题。</p><h2 id="1-1-上下文切换"><a href="#1-1-上下文切换" class="headerlink" title="1.1 上下文切换"></a>1.1 上下文切换</h2><p>Cpu 通过为每个线程分配 cpu 时间片来实现多线程执行代码，因为时间片非常的短，所以cpu 需要通过不停地切换线程执行，让我们感觉多个线程是在同时执行的。</p><p>但是，在切换之前cpu会保存上一个任务的状态，以便下次切换回任务时，会加载任务的状态。</p><p>所以任务从保存到再加载的过程就是一次上下文切换。</p><blockquote><p>很明显，当程序中的多个线程存在大量的上下文切换，程序执行的速度未必会比串行来得快。</p></blockquote><h3 id="1-1-1-减少上下文切换"><a href="#1-1-1-减少上下文切换" class="headerlink" title="1.1.1 减少上下文切换"></a>1.1.1 减少上下文切换</h3><ul><li>无锁并发编程。多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以通过将数据的ID 按照 Hash算法取模分段，不同线程处理不同段的数据的方式，避免使用锁。</li><li>CAS 算法。Java 的 Atomic 包使用CAS 算法来更新数据，不需要加锁</li><li>使用最少线程。避免创建不需要的线程，比如任务很少，但是创建了很多线程来处理，这样会造成大量线程都处于等待状态</li><li>协程。在单线程里实现多任务的调度，并在单线程里维持多个任务间的切换。</li></ul><h2 id="1-2-死锁"><a href="#1-2-死锁" class="headerlink" title="1.2 死锁"></a>1.2 死锁</h2><p>死锁，即多个线程因某些问题无法释放锁，导致多个线程之间互相等待的场景。</p><p>避免死锁的常见方法：</p><ul><li>避免一个线程同时获取多个锁</li><li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源</li><li>尝试使用定时锁，使用 lock.tryLock(timeout) 来替代使用内部锁机制</li><li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li></ul><h2 id="1-3-资源限制的挑战"><a href="#1-3-资源限制的挑战" class="headerlink" title="1.3 资源限制的挑战"></a>1.3 资源限制的挑战</h2><p>资源限制是指程序受限于软硬件的条件，而不能达到预期的处理效果。主要包含有：带宽的上传/下载速度、硬盘读写速度、CPU处理速度。数据库连接数、socket连接数等。</p><p>引发的问题：并发执行时，因为增加了上下文切换和资源调度时间的原因。程序运行时可能会更慢。</p><p>解决方法：使用ODPS、Hadoop或者搭建服务器集群，不同机器处理不同的数据。可以通过 “数据ID%机器数”，计算出一个机器编号，然后由对应编号的机器处理这笔数据。</p><p>在资源受限的情况下进行并发编程：需要根据不同的资源限制调整程序的并发度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程与高并发解决方案》读书笔记 - Java内存模型</title>
      <link href="/2019/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%8B/1.1_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%8B/1.1_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="《Java并发编程与高并发解决方案》读书笔记-Java内存模型"><a href="#《Java并发编程与高并发解决方案》读书笔记-Java内存模型" class="headerlink" title="《Java并发编程与高并发解决方案》读书笔记 - Java内存模型"></a>《Java并发编程与高并发解决方案》读书笔记 - Java内存模型</h1><h2 id="CPU多级缓存-乱序执行优化"><a href="#CPU多级缓存-乱序执行优化" class="headerlink" title="CPU多级缓存 - 乱序执行优化"></a>CPU多级缓存 - 乱序执行优化</h2><p>处理器为了提高运算速度而做出违背代码原有顺序的优化。</p><pre class=" language-java"><code class="language-java">例如：a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>a <span class="token operator">+</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>在处理器执行中，a 与 b 的赋值顺序可能并不是按照顺序执行的</code></pre><h2 id="编译器的指令重排"><a href="#编译器的指令重排" class="headerlink" title="编译器的指令重排"></a>编译器的指令重排</h2><p>由处理器和缓存引起的乱序之外，现代编译器同样提供了乱序优化.之所以出现编译器乱序优化其根本原因在于处理器每次只能分析一小块指令,但编译器却能在很大范围内进行代码分析,从而做出更优的策略,充分利用处理器的乱序执行功能.</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ol><li>江湖人称小白哥的 <a href="https://blog.csdn.net/dd864140130/article/details/56494925" target="_blank" rel="noopener">谈乱序执行和内存屏障</a></li><li>sdf</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java并发编程与高并发解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java并发编程与高并发解决方案》读书笔记 - 目录</title>
      <link href="/2019/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%8B/0.0_%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/05/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E3%80%8AJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E3%80%8B/0.0_%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="《Java并发编程与高并发解决方案》读书笔记-目录"><a href="#《Java并发编程与高并发解决方案》读书笔记-目录" class="headerlink" title="《Java并发编程与高并发解决方案》读书笔记 - 目录"></a>《Java并发编程与高并发解决方案》读书笔记 - 目录</h1><p>笔记来源于 <a href="https://coding.imooc.com/class/195.html" target="_blank" rel="noopener">慕课网课程 - Java并发编程与高并发解决方案</a></p><h2 id="并发及并发的线程安全处理"><a href="#并发及并发的线程安全处理" class="headerlink" title="并发及并发的线程安全处理"></a>并发及并发的线程安全处理</h2><p>主要包含以下六个模块：</p><ol><li>线程安全性：原子性、可见性、有序性、atomic包、CAS算法、synchorized与Lock、volatile、happens-before</li><li>安全发布对象：安全发布方法、不可变对象、final关键字使用、不可变方法、线程不安全的类与写法</li><li>线程封闭、同步容器、并发容器：堆栈封闭、ThreadLocal线程封闭、JDBC的线程封闭、同步容器、并发容器、J.U.C</li><li>AQS等J.U.C组件：CountDownLatch、Semaphore、CyclicBarrier、ReentrantLock与锁、Condition、FutureTask、Fork/Join框架、BlockingQueue</li><li>线程调度：new Thread的弊端、线程池的好处、ThreadPoolExecutor、Executor框架接口</li><li>线程安全补充内容：死锁的产生与预防、多线程并发最佳实践、Spring的线程安全、HashMap和ConcurrentHashMap的深入讲解</li></ol><h2 id="高并发处理的思路及手段"><a href="#高并发处理的思路及手段" class="headerlink" title="高并发处理的思路及手段"></a>高并发处理的思路及手段</h2><ol><li>扩容：水平扩容与垂直扩容</li><li>缓存：Redis、Memcache、Guava Cache等</li><li>队列：Kafka、RabbitMQ、RocketMQ等</li><li>应用拆分：服务化Dubbo与微服务SpringCloud</li><li>限流：Guava RateLimiter、常用的限流算法、自己实现分布式限流等</li><li>服务降级与服务熔断：服务降级的多种选择、Hystrix</li><li>数据库切库、分库、分表</li><li>高可用的一些手段：分布式任务调度Elastic-Job、主备curator、监控报警机制等</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java并发编程与高并发解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 并发编程 </tag>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI之PPT转image,SmartArt解决方法</title>
      <link href="/2018/11/16/java/POI-PPT2IMG/"/>
      <url>/2018/11/16/java/POI-PPT2IMG/</url>
      
        <content type="html"><![CDATA[<h1 id="POI之PPT转image-SmartArt解决方法"><a href="#POI之PPT转image-SmartArt解决方法" class="headerlink" title="POI之PPT转image,SmartArt解决方法"></a>POI之PPT转image,SmartArt解决方法</h1><p>关于使用 POI 将 PPT 转为 图片，随便就能查到以下代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xslf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XMLSlideShow<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xslf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSLFSlide<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PpttoPNG</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//creating an empty presentation</span>      File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"addingimage.pptx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XMLSlideShow ppt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLSlideShow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//getting the dimensions and size of the slide </span>      Dimension pgsize <span class="token operator">=</span> ppt<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XSLFSlide<span class="token punctuation">[</span><span class="token punctuation">]</span> slide <span class="token operator">=</span> ppt<span class="token punctuation">.</span><span class="token function">getSlides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slide<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         BufferedImage img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>            pgsize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> pgsize<span class="token punctuation">.</span>height<span class="token punctuation">,</span>BufferedImage<span class="token punctuation">.</span>TYPE_INT_RGB<span class="token punctuation">)</span><span class="token punctuation">;</span>         Graphics2D graphics <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//clear the drawing area</span>         graphics<span class="token punctuation">.</span><span class="token function">setPaint</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>         graphics<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle2D<span class="token punctuation">.</span>Float</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pgsize<span class="token punctuation">.</span>width<span class="token punctuation">,</span> pgsize<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//render</span>         slide<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>graphics<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//creating an image file as output</span>      FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ppt_image.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      javax<span class="token punctuation">.</span>imageio<span class="token punctuation">.</span>ImageIO<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token string">"png"</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>      ppt<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Image successfully created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>但是问题显然不会这么简单，经过实验发现。</p><p>通过POI导出的图片，出现以下几个问题：</p><ol><li>无法读取 SmartArt</li><li>艺术字只能显示为普通文本</li><li>图形阴影无法显示</li><li>部分自定义几何图形显示异常</li></ol><p>然后就出现了这种状况：<br><code>PPT文件的内容：</code> <img src="https://upload-images.jianshu.io/upload_images/13603359-ddc7e137e2ff31cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PPT文件的内容"><br><code>导出的内容(这是什么鬼)：</code> <img src="https://upload-images.jianshu.io/upload_images/13603359-51403ce29c688f11.png" alt="image.png"></p><p>然后上网查解决方法：</p><p><img src="https://images.gitee.com/uploads/images/2018/1116/111529_aa242626_1872936.png" alt="stack overflow" title="屏幕截图.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-0b2c169e961ec894.png" alt="无解又是什么鬼"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>无解，所以我们抛弃了 POI，改用其他方式导出。</p><h3 id="1-改用java调用Python"><a href="#1-改用java调用Python" class="headerlink" title="1.改用java调用Python"></a>1.改用java调用Python</h3><p>如果你不会python，可以将下面的py代码放到项目下，通过 <code>jython</code> 解释器来执行。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> comtypes<span class="token punctuation">.</span>client <span class="token keyword">as</span> client<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">init_powerpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    powerpoint <span class="token operator">=</span> client<span class="token punctuation">.</span>CreateObject<span class="token punctuation">(</span><span class="token string">"Powerpoint.Application"</span><span class="token punctuation">)</span>    powerpoint<span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> powerpoint<span class="token keyword">def</span> <span class="token function">ppt_to_pdf</span><span class="token punctuation">(</span>powerpoint<span class="token punctuation">,</span> inputFileName<span class="token punctuation">,</span> outputFileName<span class="token punctuation">,</span> formatType<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> outputFileName<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'pdf'</span><span class="token punctuation">:</span>        outputFileName <span class="token operator">=</span> outputFileName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"pdf"</span>    deck <span class="token operator">=</span> powerpoint<span class="token punctuation">.</span>Presentations<span class="token punctuation">.</span>Open<span class="token punctuation">(</span>inputFileName<span class="token punctuation">)</span>    deck<span class="token punctuation">.</span>SaveAs<span class="token punctuation">(</span>outputFileName<span class="token punctuation">,</span> formatType<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># formatType = 32 for ppt to pdf</span>    deck<span class="token punctuation">.</span>SaveAs<span class="token punctuation">(</span>inputFileName<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>    deck<span class="token punctuation">.</span>Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">convert_files_in_folder</span><span class="token punctuation">(</span>powerpoint<span class="token punctuation">,</span> folder<span class="token punctuation">)</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folder<span class="token punctuation">)</span>    pptfiles <span class="token operator">=</span> <span class="token punctuation">[</span>f <span class="token keyword">for</span> f <span class="token keyword">in</span> files <span class="token keyword">if</span> f<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">".ppt"</span><span class="token punctuation">,</span> <span class="token string">".pptx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pptfile <span class="token keyword">in</span> pptfiles<span class="token punctuation">:</span>        fullpath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> pptfile<span class="token punctuation">)</span>        ppt_to_pdf<span class="token punctuation">(</span>powerpoint<span class="token punctuation">,</span> fullpath<span class="token punctuation">,</span> fullpath<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    powerpoint <span class="token operator">=</span> init_powerpoint<span class="token punctuation">(</span><span class="token punctuation">)</span>    cwd <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span>    convert_files_in_folder<span class="token punctuation">(</span>powerpoint<span class="token punctuation">,</span> cwd<span class="token punctuation">)</span>    powerpoint<span class="token punctuation">.</span>Quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这种方法应该是最适合的了，导出的图片接近完美。</p><h3 id="2-使用第三方服务"><a href="#2-使用第三方服务" class="headerlink" title="2.使用第三方服务"></a>2.使用第三方服务</h3><p>阿里云提供了一个“智能媒体管理”的服务，其中包含了许多的文档转换的API。省事</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-0ebbce1f64d3e639.png" alt="收费标准"></p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-ab529c4e928c38f5.png" alt="转换服务"></p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz(五)-集群测试</title>
      <link href="/2018/11/05/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%BA%94)/"/>
      <url>/2018/11/05/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Quartz-五-集群测试"><a href="#SpringBoot整合Quartz-五-集群测试" class="headerlink" title="SpringBoot整合Quartz(五)-集群测试"></a>SpringBoot整合Quartz(五)-集群测试</h1><p>计划：(从Quartz的属性、方法、配置文件、配置类、持久化、集群等几个方面，写一些心得)</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-55f97ba1d65bc00f.png" alt="Quartz"></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz(六)-使用Elastic-Job</title>
      <link href="/2018/11/05/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E5%85%AD)/"/>
      <url>/2018/11/05/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<p>Elastic-Job 的底层还是使用的Quartz，只是节点通过 Zookeeper 来进行分配。</p><p>Quartz只能解决HA(高可用)</p><ol><li>But 这里有一个问题，ElasticJob 的开发代码中使用了 lombok，但是并没有引入该框架，所以需要我们在项目中引入 lombok。</li><li>因为项目使用 Zookeeper 作为注册中心，所以需要自行安装和配置 Zookeeper。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz(四)-使用IOC管理Job</title>
      <link href="/2018/11/04/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E5%9B%9B)/"/>
      <url>/2018/11/04/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Quartz-四-使用IOC管理Job"><a href="#SpringBoot整合Quartz-四-使用IOC管理Job" class="headerlink" title="SpringBoot整合Quartz(四)-使用IOC管理Job"></a>SpringBoot整合Quartz(四)-使用IOC管理Job</h1><p>计划：(从Quartz的属性、方法、配置文件、配置类、持久化、集群等几个方面，写一些心得)</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-55f97ba1d65bc00f.png" alt="Quartz"></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz(三)-整合MongoDB数据源</title>
      <link href="/2018/11/03/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%B8%89)/"/>
      <url>/2018/11/03/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Quartz-三-整合MongoDB数据源"><a href="#SpringBoot整合Quartz-三-整合MongoDB数据源" class="headerlink" title="SpringBoot整合Quartz(三)-整合MongoDB数据源"></a>SpringBoot整合Quartz(三)-整合MongoDB数据源</h1><p>计划：(从Quartz的属性、方法、配置文件、配置类、持久化、集群等几个方面，写一些心得)</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-55f97ba1d65bc00f.png" alt="Quartz"></p><a id="more"></a>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz(二)-整合MySQL数据源</title>
      <link href="/2018/11/02/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%BA%8C)/"/>
      <url>/2018/11/02/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Quartz-二-持久化到MySQL"><a href="#SpringBoot整合Quartz-二-持久化到MySQL" class="headerlink" title="SpringBoot整合Quartz(二)-持久化到MySQL"></a>SpringBoot整合Quartz(二)-持久化到MySQL</h1><p>计划：(从Quartz的属性、方法、配置文件、配置类、持久化、集群等几个方面，写一些心得)</p><p>在上一篇 <code>SpringBoot整合Quartz(一)-简单介绍Demo</code> 中，简单介绍了 Quartz 框架所需的依赖、常用属性、方法和配置。</p><p>这里我们将生成的 Job、Trigger 持久化到 MySQL 数据库中。</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-55f97ba1d65bc00f.png" alt="Quartz"></p><a id="more"></a><h2 id="1-修改quartz-properties配置文件"><a href="#1-修改quartz-properties配置文件" class="headerlink" title="1.修改quartz.properties配置文件"></a>1.修改quartz.properties配置文件</h2><p>主要是将存储方式从 <code>RAMJobStore</code> 改为 <code>JobStoreTX</code>。<br>从名称能看出，默认的 <code>RAMJobStore</code> 是存储在内存中的，当项目异常重启后，任务就随内存消失了。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 固定前缀org.quartz</span><span class="token comment" spellcheck="true"># 主要分为scheduler、threadPool、jobStore、plugin等部分</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token attr-name">org.quartz.scheduler.instanceName</span> <span class="token punctuation">=</span> <span class="token attr-value">DefaultQuartzScheduler</span><span class="token attr-name">org.quartz.scheduler.rmi.export</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">org.quartz.scheduler.rmi.proxy</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">org.quartz.scheduler.wrapJobExecutionInUserTransaction</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 实例化ThreadPool时，使用的线程类为SimpleThreadPool</span><span class="token attr-name">org.quartz.threadPool.class</span> <span class="token punctuation">=</span> <span class="token attr-value">org.quartz.simpl.SimpleThreadPool</span><span class="token comment" spellcheck="true"># threadCount和threadPriority将以setter的形式注入ThreadPool实例</span><span class="token comment" spellcheck="true"># 并发个数</span><span class="token attr-name">org.quartz.threadPool.threadCount</span> <span class="token punctuation">=</span> <span class="token attr-value">5</span><span class="token comment" spellcheck="true"># 优先级</span><span class="token attr-name">org.quartz.threadPool.threadPriority</span> <span class="token punctuation">=</span> <span class="token attr-value">5</span><span class="token attr-name">org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">org.quartz.jobStore.misfireThreshold</span> <span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token comment" spellcheck="true"># 默认存储在内存中</span><span class="token comment" spellcheck="true">#org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore</span><span class="token comment" spellcheck="true">#持久化</span><span class="token attr-name">org.quartz.jobStore.class</span> <span class="token punctuation">=</span> <span class="token attr-value">org.quartz.impl.jdbcjobstore.JobStoreTX</span><span class="token attr-name">org.quartz.jobStore.tablePrefix</span> <span class="token punctuation">=</span> <span class="token attr-value">QRTZ_</span><span class="token attr-name">org.quartz.jobStore.dataSource</span> <span class="token punctuation">=</span> <span class="token attr-value">qzDS</span><span class="token attr-name">org.quartz.dataSource.qzDS.driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">org.quartz.dataSource.qzDS.URL</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/study?useUnicode=true&amp;characterEncoding=UTF-8</span><span class="token attr-name">org.quartz.dataSource.qzDS.user</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span><span class="token attr-name">org.quartz.dataSource.qzDS.password</span> <span class="token punctuation">=</span> <span class="token attr-value">password</span><span class="token attr-name">org.quartz.dataSource.qzDS.maxConnections</span> <span class="token punctuation">=</span> <span class="token attr-value">10</span></code></pre><h2 id="2-导入数据库表"><a href="#2-导入数据库表" class="headerlink" title="2.导入数据库表"></a>2.导入数据库表</h2><pre class=" language-MySQL"><code class="language-MySQL">#  # In your Quartz properties file, you'll need to set# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate  #  #  # By: Ron Cordell - roncordell  #  I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.  DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;  DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;  DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;  DROP TABLE IF EXISTS QRTZ_LOCKS;  DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;  DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;  DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;  DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;  DROP TABLE IF EXISTS QRTZ_TRIGGERS;  DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;  DROP TABLE IF EXISTS QRTZ_CALENDARS;  CREATE TABLE QRTZ_JOB_DETAILS(  SCHED_NAME VARCHAR(120) NOT NULL,  JOB_NAME VARCHAR(200) NOT NULL,  JOB_GROUP VARCHAR(200) NOT NULL,  DESCRIPTION VARCHAR(250) NULL,  JOB_CLASS_NAME VARCHAR(250) NOT NULL,  IS_DURABLE VARCHAR(1) NOT NULL,  IS_NONCONCURRENT VARCHAR(1) NOT NULL,  IS_UPDATE_DATA VARCHAR(1) NOT NULL,  REQUESTS_RECOVERY VARCHAR(1) NOT NULL,  JOB_DATA BLOB NULL,  PRIMARY KEY (SCHED_NAME,JOB_NAME,JOB_GROUP))  ENGINE=InnoDB;  CREATE TABLE QRTZ_TRIGGERS (  SCHED_NAME VARCHAR(120) NOT NULL,  TRIGGER_NAME VARCHAR(200) NOT NULL,  TRIGGER_GROUP VARCHAR(200) NOT NULL,  JOB_NAME VARCHAR(200) NOT NULL,  JOB_GROUP VARCHAR(200) NOT NULL,  DESCRIPTION VARCHAR(250) NULL,  NEXT_FIRE_TIME BIGINT(13) NULL,  PREV_FIRE_TIME BIGINT(13) NULL,  PRIORITY INTEGER NULL,  TRIGGER_STATE VARCHAR(16) NOT NULL,  TRIGGER_TYPE VARCHAR(8) NOT NULL,  START_TIME BIGINT(13) NOT NULL,  END_TIME BIGINT(13) NULL,  CALENDAR_NAME VARCHAR(200) NULL,  MISFIRE_INSTR SMALLINT(2) NULL,  JOB_DATA BLOB NULL,  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),  FOREIGN KEY (SCHED_NAME,JOB_NAME,JOB_GROUP)  REFERENCES QRTZ_JOB_DETAILS(SCHED_NAME,JOB_NAME,JOB_GROUP))  ENGINE=InnoDB;  CREATE TABLE QRTZ_SIMPLE_TRIGGERS (  SCHED_NAME VARCHAR(120) NOT NULL,  TRIGGER_NAME VARCHAR(200) NOT NULL,  TRIGGER_GROUP VARCHAR(200) NOT NULL,  REPEAT_COUNT BIGINT(7) NOT NULL,  REPEAT_INTERVAL BIGINT(12) NOT NULL,  TIMES_TRIGGERED BIGINT(10) NOT NULL,  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)  REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))  ENGINE=InnoDB;  CREATE TABLE QRTZ_CRON_TRIGGERS (  SCHED_NAME VARCHAR(120) NOT NULL,  TRIGGER_NAME VARCHAR(200) NOT NULL,  TRIGGER_GROUP VARCHAR(200) NOT NULL,  CRON_EXPRESSION VARCHAR(120) NOT NULL,  TIME_ZONE_ID VARCHAR(80),  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)  REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))  ENGINE=InnoDB;  CREATE TABLE QRTZ_SIMPROP_TRIGGERS    (    SCHED_NAME VARCHAR(120) NOT NULL,      TRIGGER_NAME VARCHAR(200) NOT NULL,      TRIGGER_GROUP VARCHAR(200) NOT NULL,      STR_PROP_1 VARCHAR(512) NULL,      STR_PROP_2 VARCHAR(512) NULL,      STR_PROP_3 VARCHAR(512) NULL,      INT_PROP_1 INT NULL,      INT_PROP_2 INT NULL,      LONG_PROP_1 BIGINT NULL,      LONG_PROP_2 BIGINT NULL,      DEC_PROP_1 NUMERIC(13,4) NULL,      DEC_PROP_2 NUMERIC(13,4) NULL,      BOOL_PROP_1 VARCHAR(1) NULL,      BOOL_PROP_2 VARCHAR(1) NULL,      PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),      FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)       REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))  ENGINE=InnoDB;  CREATE TABLE QRTZ_BLOB_TRIGGERS (  SCHED_NAME VARCHAR(120) NOT NULL,  TRIGGER_NAME VARCHAR(200) NOT NULL,  TRIGGER_GROUP VARCHAR(200) NOT NULL,  BLOB_DATA BLOB NULL,  PRIMARY KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP),  INDEX (SCHED_NAME,TRIGGER_NAME, TRIGGER_GROUP),  FOREIGN KEY (SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP)  REFERENCES QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP))  ENGINE=InnoDB;  CREATE TABLE QRTZ_CALENDARS (  SCHED_NAME VARCHAR(120) NOT NULL,  CALENDAR_NAME VARCHAR(200) NOT NULL,  CALENDAR BLOB NOT NULL,  PRIMARY KEY (SCHED_NAME,CALENDAR_NAME))  ENGINE=InnoDB;  CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS (  SCHED_NAME VARCHAR(120) NOT NULL,  TRIGGER_GROUP VARCHAR(200) NOT NULL,  PRIMARY KEY (SCHED_NAME,TRIGGER_GROUP))  ENGINE=InnoDB;  CREATE TABLE QRTZ_FIRED_TRIGGERS (  SCHED_NAME VARCHAR(120) NOT NULL,  ENTRY_ID VARCHAR(95) NOT NULL,  TRIGGER_NAME VARCHAR(200) NOT NULL,  TRIGGER_GROUP VARCHAR(200) NOT NULL,  INSTANCE_NAME VARCHAR(200) NOT NULL,  FIRED_TIME BIGINT(13) NOT NULL,  SCHED_TIME BIGINT(13) NOT NULL,  PRIORITY INTEGER NOT NULL,  STATE VARCHAR(16) NOT NULL,  JOB_NAME VARCHAR(200) NULL,  JOB_GROUP VARCHAR(200) NULL,  IS_NONCONCURRENT VARCHAR(1) NULL,  REQUESTS_RECOVERY VARCHAR(1) NULL,  PRIMARY KEY (SCHED_NAME,ENTRY_ID))  ENGINE=InnoDB;  CREATE TABLE QRTZ_SCHEDULER_STATE (  SCHED_NAME VARCHAR(120) NOT NULL,  INSTANCE_NAME VARCHAR(200) NOT NULL,  LAST_CHECKIN_TIME BIGINT(13) NOT NULL,  CHECKIN_INTERVAL BIGINT(13) NOT NULL,  PRIMARY KEY (SCHED_NAME,INSTANCE_NAME))  ENGINE=InnoDB;  CREATE TABLE QRTZ_LOCKS (  SCHED_NAME VARCHAR(120) NOT NULL,  LOCK_NAME VARCHAR(40) NOT NULL,  PRIMARY KEY (SCHED_NAME,LOCK_NAME))  ENGINE=InnoDB;  CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS(SCHED_NAME,REQUESTS_RECOVERY);  CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS(SCHED_NAME,JOB_GROUP);  CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);  CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS(SCHED_NAME,JOB_GROUP);  CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS(SCHED_NAME,CALENDAR_NAME);  CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);  CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE);  CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_STATE);  CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_GROUP,TRIGGER_STATE);  CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS(SCHED_NAME,NEXT_FIRE_TIME);  CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS(SCHED_NAME,TRIGGER_STATE,NEXT_FIRE_TIME);  CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME);  CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_STATE);  CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS(SCHED_NAME,MISFIRE_INSTR,NEXT_FIRE_TIME,TRIGGER_GROUP,TRIGGER_STATE);  CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME);  CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,INSTANCE_NAME,REQUESTS_RECOVERY);  CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_NAME,JOB_GROUP);  CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,JOB_GROUP);  CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_NAME,TRIGGER_GROUP);  CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS(SCHED_NAME,TRIGGER_GROUP);  commit;</code></pre><h2 id="3-QuartzConfig"><a href="#3-QuartzConfig" class="headerlink" title="3.QuartzConfig"></a>3.QuartzConfig</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"SchedulerFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SchedulerFactoryBean <span class="token function">schedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        SchedulerFactoryBean factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setQuartzProperties</span><span class="token punctuation">(</span><span class="token function">quartzProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Properties <span class="token function">quartzProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        PropertiesFactoryBean propertiesFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        propertiesFactoryBean<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"/quartz.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在quartz.properties中的属性被读取并注入后再初始化对象</span>        propertiesFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> propertiesFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * quartz初始化监听器     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> QuartzInitializerListener <span class="token function">executorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QuartzInitializerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过SchedulerFactoryBean获取Scheduler的实例     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Scheduler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Scheduler <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">schedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-执行测试"><a href="#4-执行测试" class="headerlink" title="4.执行测试"></a>4.执行测试</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuartzServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 创建工厂类 SchedulerFactory</span>        SchedulerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 通过 getScheduler() 方法获得 Scheduler 实例</span>        Scheduler scheduler <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 使用上文定义的 HelloJob</span>        JobDetail jobDetail <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>HelloJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//job 的name和group</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"jobName"</span><span class="token punctuation">,</span> <span class="token string">"jobGroup"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3秒后启动任务</span>        Date statTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 启动 Scheduler</span>        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 5. 创建Trigger</span>        <span class="token comment" spellcheck="true">//使用SimpleScheduleBuilder或者CronScheduleBuilder</span>        Trigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"jobTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"jobTriggerGroup"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/2 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//两秒执行一次</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6. 注册任务和定时器</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打开数据库，我们能看到触发器Trigger、任务Job等。<br><img src="https://upload-images.jianshu.io/upload_images/13603359-db046f08f7a9ff75.png" alt="测试"></p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity(二)-使用数据库进行验证</title>
      <link href="/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%BA%8C)/"/>
      <url>/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合SpringSecurity-二-使用数据库进行验证"><a href="#SpringBoot整合SpringSecurity-二-使用数据库进行验证" class="headerlink" title="SpringBoot整合SpringSecurity(二)-使用数据库进行验证"></a>SpringBoot整合SpringSecurity(二)-使用数据库进行验证</h1><p>本文使用的是 SpringBoot + SpringSecurity，做一个 Web端的权限验证框架。大致分为以下几个部分：</p><ol><li>初始化Security框架</li><li>使用数据库验证</li><li>重写<code>hasAnyAuthority</code>，改为动态验证</li><li>整合 <code>CAS</code> 实现多模块权限验证</li><li>测试集群状况下的身份验证</li><li>解决多重登录问题</li></ol><p>下面我们开始第二部分，使用数据库中的用户进行验证。</p><h2 id="一、创建登录用户"><a href="#一、创建登录用户" class="headerlink" title="一、创建登录用户"></a>一、创建登录用户</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoreUser</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用户名     */</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 密码     */</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 权限     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> roles<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// todo getter and setter</span><span class="token punctuation">}</span></code></pre><p>用户对象我们只用了必不可缺的几个字段。其中的 <code>roles</code>，代表着用户具有的那些权限。本章暂未用到，但是后面会用到，没有权限还用什么权限框架呢。</p><p>dao层和service层这里就略过了，我是通过 JPA 来使用的。</p><h2 id="二、重写UserDetailsService"><a href="#二、重写UserDetailsService" class="headerlink" title="二、重写UserDetailsService"></a>二、重写UserDetailsService</h2><p>通过重写 <code>UserDetailsService</code>的<code>loadUserByUsername(username)</code>方法，将数据库中对象查询并生成对应的 <code>UserDetails</code>。</p><p>如果需要扩展其他权限，可以通过继承 <code>UserDetails</code>，来生成自己的<code>OtherUserDetails</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUserService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> CoreUserService coreUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">LoginUserService</span><span class="token punctuation">(</span>CoreUserService coreUserService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coreUserService <span class="token operator">=</span> coreUserService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">final</span> CoreUser user <span class="token operator">=</span> coreUserService<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"没有找到该用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注入用户的权限</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>SimpleGrantedAuthority<span class="token operator">></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>            user<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>role <span class="token operator">-</span><span class="token operator">></span> authorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> authorities<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、修改SecurityConfig"><a href="#三、修改SecurityConfig" class="headerlink" title="三、修改SecurityConfig"></a>三、修改SecurityConfig</h2><p>通过重写 <code>configure(AuthenticationManagerBuilder auth)</code>方法，指定 <code>userDetailsService</code>为我们定义的 <code>loginUserService</code>。<br>因为我们没有登录页面，所以还是使用 <code>SpringSecurity</code> 的默认登录页。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> LoginUserService loginUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">SecurityConfiguration</span><span class="token punctuation">(</span>LoginUserService loginUserService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loginUserService <span class="token operator">=</span> loginUserService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        auth<span class="token punctuation">.</span><span class="token function">userDetailsService</span><span class="token punctuation">(</span>loginUserService<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> NoOpPasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>NoOpPasswordEncoder<span class="token punctuation">)</span> NoOpPasswordEncoder<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h2><p>打开浏览器，测试 <code>localhost:8080/hello</code>，因未登录跳转至 <code>localhost:8080/login</code>，输入我们在数据库中定义的username、password即可。</p><p>注册就是添加一条数据，这里就不做演示了。</p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity(三)-动态验证权限</title>
      <link href="/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%B8%89)/"/>
      <url>/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合SpringSecurity-三-动态验证权限"><a href="#SpringBoot整合SpringSecurity-三-动态验证权限" class="headerlink" title="SpringBoot整合SpringSecurity(三)-动态验证权限"></a>SpringBoot整合SpringSecurity(三)-动态验证权限</h1><h2 id="用户-角色-权限关系"><a href="#用户-角色-权限关系" class="headerlink" title="用户 - 角色 - 权限关系"></a>用户 - 角色 - 权限关系</h2><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/%E6%9D%83%E9%99%90%E8%A7%92%E8%89%B2%E5%85%B3%E7%B3%BB.png" alt="用户角色权限关系图"></p><blockquote><p>其中roles、permission可以理解为1对多的关系，具体实现我就不写在这里了。</p><h2 id="注入用户权限"><a href="#注入用户权限" class="headerlink" title="注入用户权限"></a>注入用户权限</h2><p>在登录时，通过实现 UserDetailsService 将 Admin 用户对象转换为 SpringSecurity 可识别的 UserDetails 对象。</p><p>我们需要在加载 Admin 的同时，将 Admin用户 对应的 Role 角色，Role角色对应的 Permission权限加载到 authorizations中。</p><p>修改后的 AdminDetails 如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminDetails</span> <span class="token keyword">extends</span> <span class="token class-name">Admin</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> String loginName<span class="token punctuation">;</span> <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Role<span class="token operator">></span> authRoles<span class="token punctuation">;</span> <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Permission<span class="token operator">></span> authPermissions<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">AdminDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token function">AdminDetails</span><span class="token punctuation">(</span>String loginName<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>loginName <span class="token operator">=</span> loginName<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token operator">></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     List<span class="token operator">&lt;</span>Permission<span class="token operator">></span> permissions <span class="token operator">=</span> <span class="token function">getAuthPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">final</span> List<span class="token operator">&lt;</span>GrantedAuthority<span class="token operator">></span> authorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>Permission permission <span class="token operator">:</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>             authorities<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span>permission<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> authorities<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> String <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> String <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> BooleanUtils<span class="token punctuation">.</span><span class="token function">isNotFalse</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> String <span class="token function">getLoginName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> loginName<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Role<span class="token operator">></span> <span class="token function">getAuthRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> authRoles<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthRoles</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Role<span class="token operator">></span> authRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>authRoles <span class="token operator">=</span> authRoles<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Permission<span class="token operator">></span> <span class="token function">getAuthPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">return</span> authPermissions<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthPermissions</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Permission<span class="token operator">></span> authPermissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>authPermissions <span class="token operator">=</span> authPermissions<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="LoginDetailsService-加载权限信息"><a href="#LoginDetailsService-加载权限信息" class="headerlink" title="LoginDetailsService 加载权限信息"></a>LoginDetailsService 加载权限信息</h2><p>LoginDetailsService 实现 UserDetailsService 的 loadUserByUsername 方法，通过用户名从数据库中获取到 Admin 用户，并将其包装为一个 UserDetails 的实现类返回。</p><p>在UserDetails 的实现类中，将用户具有的 Permission权限 加载为 Authorities。</p><p>用于后面将 Request 请求和 Authorities 做对比，达到请求拦截验证的效果。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginDetailService</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AdminRepository adminRepository<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> RoleRepository roleRepository<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> PermissionRepository permissionRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">LoginDetailService</span><span class="token punctuation">(</span>AdminRepository adminRepository<span class="token punctuation">,</span>                              RoleRepository roleRepository<span class="token punctuation">,</span>                              PermissionRepository permissionRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adminRepository <span class="token operator">=</span> adminRepository<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleRepository <span class="token operator">=</span> roleRepository<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>permissionRepository <span class="token operator">=</span> permissionRepository<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        Admin admin <span class="token operator">=</span> adminRepository<span class="token punctuation">.</span><span class="token function">findByIdentity</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>admin <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"当前用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        AdminDetails details <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdminDetails</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils<span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>admin<span class="token punctuation">,</span> details<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set admin roles</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> roleCodes <span class="token operator">=</span> details<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterable<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles <span class="token operator">=</span> roleRepository<span class="token punctuation">.</span><span class="token function">findByCodeInAndStatus</span><span class="token punctuation">(</span>roleCodes<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Role<span class="token operator">></span> authRoles <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        details<span class="token punctuation">.</span><span class="token function">setAuthRoles</span><span class="token punctuation">(</span>authRoles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set admin permissions</span>        <span class="token keyword">final</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> permissionIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Role authRole <span class="token operator">:</span> authRoles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            permissionIds<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>authRole<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Iterable<span class="token operator">&lt;</span>Permission<span class="token operator">></span> permissions <span class="token operator">=</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findAllById</span><span class="token punctuation">(</span>permissionIds<span class="token punctuation">)</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Permission<span class="token operator">></span> authPermissions <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        details<span class="token punctuation">.</span><span class="token function">setAuthPermissions</span><span class="token punctuation">(</span>authPermissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> details<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="实现-AccessDecisionManager"><a href="#实现-AccessDecisionManager" class="headerlink" title="实现 AccessDecisionManager"></a>实现 AccessDecisionManager</h2><p>AccessDecisionManager 的 decide() 方法，决定了客户端发起的HTTP请求(如：GET:/role)是否能够通过，否则返回 AccessDeniedException 无权限异常(即403异常)。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAccessDecisionManager</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDecisionManager</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 判断是否拥有权限的决策方法     *     * @param authentication   由 LoginService 循环添加到 GrantedAuthority 对象中的权限信息集合     * @param object           包含客户端发起的请求的 request 信息     * @param configAttributes 为 InvocationSecurityMetadataSource 的 getAttributes(Object object) 方法返回的结果，此方法是为了判定用户请求的url是否在权限表中，如果存在，则返回decide方法，用来判定用户是否有此权限。如果不在权限表中则放行。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">decide</span><span class="token punctuation">(</span>Authentication authentication<span class="token punctuation">,</span> Object object<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> configAttributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> AccessDeniedException<span class="token punctuation">,</span> InsufficientAuthenticationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> configAttributes <span class="token operator">||</span> configAttributes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ConfigAttribute c<span class="token punctuation">;</span>        String needRole<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigAttribute attribute <span class="token operator">:</span> configAttributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c <span class="token operator">=</span> attribute<span class="token punctuation">;</span>            needRole <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>GrantedAuthority authority <span class="token operator">:</span> authentication<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>needRole<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>authority<span class="token punctuation">.</span><span class="token function">getAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">(</span><span class="token string">"no right"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>ConfigAttribute attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="实现-FilterInvocationSecurityMetadataSource"><a href="#实现-FilterInvocationSecurityMetadataSource" class="headerlink" title="实现 FilterInvocationSecurityMetadataSource"></a>实现 FilterInvocationSecurityMetadataSource</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationSecurityMetadataSourceService</span> <span class="token keyword">implements</span> <span class="token class-name">FilterInvocationSecurityMetadataSource</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> PermissionRepository permissionRepository<span class="token punctuation">;</span>    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">>></span> map <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 加载权限表中所有权限     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadResourceDefine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> array<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Permission<span class="token operator">></span> permissions <span class="token operator">=</span> permissionRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Permission permission <span class="token operator">:</span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">(</span>permission<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecurityConfig</span><span class="token punctuation">(</span>permission<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 用权限的url作为key，用configAttribute作为value</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>permission<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalArgumentException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token function">loadResourceDefine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Object包含用户请求的request信息</span>        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FilterInvocation<span class="token punctuation">)</span> object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AntPathRequestMatcher matcher<span class="token punctuation">;</span>        String resUrl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resUrl <span class="token operator">=</span> s<span class="token punctuation">;</span>            matcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathRequestMatcher</span><span class="token punctuation">(</span>resUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>ConfigAttribute<span class="token operator">></span> <span class="token function">getAllConfigAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="实现-AbstractSecurityInterceptor"><a href="#实现-AbstractSecurityInterceptor" class="headerlink" title="实现 AbstractSecurityInterceptor"></a>实现 AbstractSecurityInterceptor</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilterSecurityInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSecurityInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FilterInvocationSecurityMetadataSource securityMetadataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyAccessDecisionManager</span><span class="token punctuation">(</span>MyAccessDecisionManager myAccessDecisionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setAccessDecisionManager</span><span class="token punctuation">(</span>myAccessDecisionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        FilterInvocation filterInvocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterInvocation</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">invoke</span><span class="token punctuation">(</span>filterInvocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>FilterInvocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        InterceptorStatusToken token <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">beforeInvocation</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            invocation<span class="token punctuation">.</span><span class="token function">getChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterInvocation</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getSecureObjectClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> FilterInvocation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> SecurityMetadataSource <span class="token function">obtainSecurityMetadataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>securityMetadataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="最后，注册过滤器"><a href="#最后，注册过滤器" class="headerlink" title="最后，注册过滤器"></a>最后，注册过滤器</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MyFilterSecurityInterceptor myFilterSecurityInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token function">SecurityConfig</span><span class="token punctuation">(</span>MyFilterSecurityInterceptor myFilterSecurityInterceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myFilterSecurityInterceptor <span class="token operator">=</span> myFilterSecurityInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 所有请求都需要验证，即验证后可以访问所有请求</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 登录页无需验证</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 注销请求无需验证</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭跨站攻击(否则会导致swagger无法进行测试等问题)</span>        <span class="token comment" spellcheck="true">// 注册过滤器</span>        http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>myFilterSecurityInterceptor<span class="token punctuation">,</span> FilterSecurityInterceptor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity(四)-整合CAS</title>
      <link href="/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E5%9B%9B)/"/>
      <url>/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E5%9B%9B)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合SpringSecurity-四-整合CAS"><a href="#SpringBoot整合SpringSecurity-四-整合CAS" class="headerlink" title="SpringBoot整合SpringSecurity(四)-整合CAS"></a>SpringBoot整合SpringSecurity(四)-整合CAS</h1>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz(一)-简单介绍Demo</title>
      <link href="/2018/11/01/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%B8%80)/"/>
      <url>/2018/11/01/Quartz/SpringBoot%E6%95%B4%E5%90%88Quartz(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合Quartz-一-简单介绍Demo"><a href="#SpringBoot整合Quartz-一-简单介绍Demo" class="headerlink" title="SpringBoot整合Quartz(一)-简单介绍Demo"></a>SpringBoot整合Quartz(一)-简单介绍Demo</h1><p>计划：(从Quartz的属性、方法、配置文件、配置类、持久化、集群等几个方面，写一些心得)</p><p>Quartz 作为一款由 Java 编写的开源作业调度框架,<a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener">官网传送门</a>。与我而言，作用是定时执行某一个任务。</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-55f97ba1d65bc00f.png" alt="Quartz"></p><a id="more"></a><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>因为我们使用的是 <code>SpringBoot</code> 和 <code>Quartz</code> 整合。</p><p>如果没有使用 <code>spring-boot-gradle-plugin</code> 指定SpringBoot的版本，则需要在下面的依赖汇中加入版本号。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Gradle 方式</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-quartz'</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Maven 方式</span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>quartz<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="配置文件-Quartz-properties"><a href="#配置文件-Quartz-properties" class="headerlink" title="配置文件-Quartz.properties"></a>配置文件-Quartz.properties</h2><p>通过配置文件 quartz.properties，初始化 Quartz 的一些配置.</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">//</span> <span class="token attr-value">ThreadPool 实现的类名</span>org.quartz.threadPool.class：org.quartz.simpl.SimpleThreadPool<span class="token attr-name">//</span> <span class="token attr-value">线程数量</span><span class="token attr-name">org.quartz.threadPool.threadCount</span> <span class="token attr-value">： 10</span><span class="token attr-name">//</span> <span class="token attr-value">线程优先级</span><span class="token attr-name">//</span> <span class="token attr-value">threadPriority 属性的最大值是常量 java.lang.Thread.MAX_PRIORITY，等于10。最小值为常量 java.lang.Thread.MIN_PRIORITY，为1</span><span class="token attr-name">org.quartz.threadPool.threadPriority</span> <span class="token attr-value">： 5</span><span class="token attr-name">//</span> <span class="token attr-value">自创建父线程</span><span class="token attr-name">//org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread：</span> <span class="token attr-value">true</span></code></pre><h2 id="配置Config"><a href="#配置Config" class="headerlink" title="配置Config"></a>配置Config</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>Scheduler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>ee<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>QuartzInitializerListener<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PropertiesFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ClassPathResource<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableScheduling<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>quartz<span class="token punctuation">.</span>SchedulerFactoryBean<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @description: * @date: 2018-11-05 17:27 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableScheduling</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"SchedulerFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> SchedulerFactoryBean <span class="token function">schedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        SchedulerFactoryBean factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setQuartzProperties</span><span class="token punctuation">(</span><span class="token function">quartzProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Properties <span class="token function">quartzProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        PropertiesFactoryBean propertiesFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        propertiesFactoryBean<span class="token punctuation">.</span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"/quartz.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在quartz.properties中的属性被读取并注入后再初始化对象</span>        propertiesFactoryBean<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> propertiesFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * quartz初始化监听器     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> QuartzInitializerListener <span class="token function">executorListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QuartzInitializerListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过SchedulerFactoryBean获取Scheduler的实例     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Scheduler"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Scheduler <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">schedulerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="常用属性与方法"><a href="#常用属性与方法" class="headerlink" title="常用属性与方法"></a>常用属性与方法</h2><h3 id="1-Job类"><a href="#1-Job类" class="headerlink" title="1.Job类"></a>1.Job类</h3><p>继承 <code>Job</code> 类，表明子类是一个任务（<code>Job 的子类必须存在一个无参构造。</code>）。实现 <code>execute(JobExecutionContext context)</code> 方法，来定义任务的执行内容。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 例子：定义一个执行输出语句的任务 * @date: 2018-11-05 17:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>JobExecutionContext context<span class="token punctuation">)</span> <span class="token keyword">throws</span> JobExecutionException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello执行："</span> <span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-JobDetails接口"><a href="#2-JobDetails接口" class="headerlink" title="2.JobDetails接口"></a>2.JobDetails接口</h3><p>Job 在执行时，通过 JobDetails 反射出具体的执行对象。包含了 Job 在执行时的具体属性。</p><p>JobDetailImpl 实现 JobDetails，定义所有的属性，包括以下几个：</p><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>Job任务的名称</td></tr><tr><td>group</td><td>组。注意：同组中只能存在一个 JobClass 在执行。</td></tr><tr><td>description</td><td>描述。</td></tr><tr><td>jobClass</td><td>具体的 Job。必须是 Job 的实现类。</td></tr><tr><td>jobDataMap</td><td>自定义的属性。可将任务的 key-value 存入 map 中，实现  Job 属性的扩展。</td></tr><tr><td>durability</td><td>是否持久化（默认false）。非持久化的 Job，会在 Trigger 执行完毕后，自动删除。</td></tr><tr><td>shouldRecover</td><td>是否可恢复（默认false）。当设置为“是”，执行 Scheduler 发生崩溃等异常情况时，Job 会在 Scheduler 重启时，重新执行。</td></tr><tr><td>key</td><td>键，标识</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 通过 JobBuilder 获得一个 JobDetails 对象 */</span><span class="token keyword">public</span> JobDetail <span class="token function">getJobDetail</span><span class="token punctuation">(</span>String jobClassName<span class="token punctuation">,</span> String jobGroupName<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span>jobClassName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobClassName<span class="token punctuation">,</span> jobGroupName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 通过class 实例对象 */</span><span class="token keyword">private</span> <span class="token keyword">static</span> BaseJob <span class="token function">getClass</span><span class="token punctuation">(</span>String classname<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> class1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>BaseJob<span class="token punctuation">)</span> class1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-Trigger"><a href="#3-Trigger" class="headerlink" title="3.Trigger"></a>3.Trigger</h3><p>触发器类，包含着 Job 的触发执行时间规则。</p><table><thead><tr><th>子类</th><th>说明</th></tr></thead><tbody><tr><td>SimpleTrigger</td><td>当仅需要触发一次，或者以固定时间间隔周期执行时，最合适</td></tr><tr><td>CronTrigger</td><td>通过 cron表达式 定义时间规则的调度方案</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 创建一个 Trigger 触发器 */</span><span class="token keyword">public</span> Trigger <span class="token function">getTrigger</span><span class="token punctuation">(</span>String jobClassName<span class="token punctuation">,</span> String jobGroupName<span class="token punctuation">,</span> String cronExpression<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表达式调度构建器(即任务执行的时间)</span>    CronScheduleBuilder scheduleBuilder <span class="token operator">=</span> CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span>cronExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按新的cronExpression表达式构建一个新的trigger</span>    CronTrigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span>jobClassName<span class="token punctuation">,</span> jobGroupName<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>scheduleBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> trigger<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-JobStore"><a href="#4-JobStore" class="headerlink" title="4.JobStore"></a>4.JobStore</h3><p>存储Job和运行期间的状态。<br>默认使用的是 <code>RAMJobStore</code> ,使用内存来配置、构造和运行，但是当程序停止或者重启后，任务就会丢失。<br>后面我们会通过修改 JobStore 来使，Job和Trigger持久化到数据库中。也会更利于我们使用集群</p><h3 id="5-Scheduler"><a href="#5-Scheduler" class="headerlink" title="5.Scheduler"></a>5.Scheduler</h3><p>调度器，是 Quartz 调用执行 Job，以及设置 trigger 的主要接口。</p><table><thead><tr><th>常用方法</th><th>说明</th></tr></thead><tbody><tr><td>start()</td><td>开启调度线程，也就是启动Scheduler。</td></tr><tr><td>shutdown()</td><td>关闭。</td></tr><tr><td>setJobFactory(JobFactory factory)</td><td>指定生成 Job 的JobFactory。</td></tr><tr><td>scheduleJob(JobDetail jobDetail, Trigger trigger)</td><td>接收一个Job，按照指定的 trigger执行。</td></tr><tr><td>deleteJob(JobKey jobKey)</td><td>删除 Job。</td></tr><tr><td>pauseJob(JobKey jobKey)</td><td>暂停 Job。</td></tr><tr><td>pauseTrigger(TriggerKey triggerKey)</td><td>暂停 Trigger。</td></tr><tr><td>resumeJob(JobKey jobKey)</td><td>重启。</td></tr><tr><td>rescheduleJob(TriggerKey triggerKey, Trigger newTrigger)</td><td>修改。</td></tr></tbody></table><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quartzTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SchedulerException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 创建工厂类 SchedulerFactory</span>    SchedulerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 通过 getScheduler() 方法获得 Scheduler 实例</span>    Scheduler scheduler <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 使用上文定义的 HelloJob</span>    JobDetail jobDetail <span class="token operator">=</span> JobBuilder<span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span>HelloJob<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//job 的name和group</span>            <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"jobName"</span><span class="token punctuation">,</span> <span class="token string">"jobGroup"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3秒后启动任务</span>    Date statTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. 启动 Scheduler</span>    scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 创建Trigger</span>    <span class="token comment" spellcheck="true">//使用SimpleScheduleBuilder或者CronScheduleBuilder</span>    Trigger trigger <span class="token operator">=</span> TriggerBuilder<span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"jobTriggerName"</span><span class="token punctuation">,</span> <span class="token string">"jobTriggerGroup"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>CronScheduleBuilder<span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"0/2 * * * * ?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//两秒执行一次</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 注册任务和定时器</span>    scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity(一)-简单介绍Demo</title>
      <link href="/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%B8%80)/"/>
      <url>/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合SpringSecurity-一-简单介绍Demo"><a href="#SpringBoot整合SpringSecurity-一-简单介绍Demo" class="headerlink" title="SpringBoot整合SpringSecurity(一)-简单介绍Demo"></a>SpringBoot整合SpringSecurity(一)-简单介绍Demo</h1><p>本文使用的是 SpringBoot + SpringSecurity，做一个 Web端的权限验证框架。大致分为以下几个部分：</p><ol><li>初始化Security框架</li><li>使用数据库验证</li><li>重写<code>hasAnyAuthority</code>，改为动态验证</li><li>整合 <code>CAS</code> 实现多模块权限验证</li><li>测试集群状况下的身份验证</li><li>解决多重登录问题</li></ol><p>下面我们开始第一部分，初始化一个 <code>Spring Security</code> 环境:</p><h2 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h2><p>新建一个 SpringBoot 项目，引入依赖的方式有很多种：</p><h3 id="1-通过IDE来初始化"><a href="#1-通过IDE来初始化" class="headerlink" title="1.通过IDE来初始化"></a>1.通过IDE来初始化</h3><p><img src="https://upload-images.jianshu.io/upload_images/13603359-9e0376a4368e75e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.通过IDE来初始化"></p><h3 id="2-在构建工具中引入依赖"><a href="#2-在构建工具中引入依赖" class="headerlink" title="2.在构建工具中引入依赖"></a>2.在构建工具中引入依赖</h3><p>如果是已经创建好的项目，想重新引入依赖，可以在 <code>POM.xml</code> 或者 <code>build.gradle</code> 中加入以下几个依赖，使用starter的好处是可以快速集成spring框架：</p><pre class=" language-gradle"><code class="language-gradle">implementation('org.springframework.boot:spring-boot-starter-security')runtimeOnly('mysql:mysql-connector-java')implementation('org.springframework.boot:spring-boot-starter-data-mongodb')implementation('org.springframework.boot:spring-boot-starter-web')testImplementation('org.springframework.boot:spring-boot-starter-test')testImplementation('org.springframework.security:spring-security-test')</code></pre><p>注：因为我们后面需要使用 <code>MySQL</code> 或者 <code>MongoDB</code> 作为数据源，所以这里先引入这两个依赖</p><p>这时我们直接请求 <code>localhost:8080</code>，会被 security 以未登录身份强制跳转至默认的登录页面:</p><p><img src="http://koral-home.oss-cn-beijing.aliyuncs.com/18-11-20/72708746.jpg" alt="Please login"></p><h2 id="二、添加登录账号"><a href="#二、添加登录账号" class="headerlink" title="二、添加登录账号"></a>二、添加登录账号</h2><h3 id="1-HelloController"><a href="#1-HelloController" class="headerlink" title="1.HelloController"></a>1.HelloController</h3><p>随便写一个控制器，用于测试登录之后的请求是否通过了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello SpringSecurity !"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-SecurityConfiguration"><a href="#2-SecurityConfiguration" class="headerlink" title="2.SecurityConfiguration"></a>2.SecurityConfiguration</h3><p>创建 <code>SecurityConfiguration</code> 安全配置类，在其中添加默认的登录用户。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在内存中认证，后面也是通过这里指定数据库验证的</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 加密方式</span>                <span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 用户名密码</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 权限</span>                <span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 不加密的 密码加密方式     * 如果不指定密码加密方式，会抛出异常如下：     *  There is no PasswordEncoder mapped for the id “null”     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> NoOpPasswordEncoder <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>NoOpPasswordEncoder<span class="token punctuation">)</span> NoOpPasswordEncoder<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重新访问 <code>localhost:8080/hello</code>，输入我们设置的账号密码，即可看到内容 <code>hello world</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity(六)-多重身份认证</title>
      <link href="/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E5%85%AD)/"/>
      <url>/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E5%85%AD)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合SpringSecurity-六-多重身份认证"><a href="#SpringBoot整合SpringSecurity-六-多重身份认证" class="headerlink" title="SpringBoot整合SpringSecurity(六)-多重身份认证"></a>SpringBoot整合SpringSecurity(六)-多重身份认证</h1>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity(五)-测试集群</title>
      <link href="/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%BA%94)/"/>
      <url>/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%BA%94)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合SpringSecurity-五-测试集群"><a href="#SpringBoot整合SpringSecurity-五-测试集群" class="headerlink" title="SpringBoot整合SpringSecurity(五)-测试集群"></a>SpringBoot整合SpringSecurity(五)-测试集群</h1>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合SpringSecurity(三)-动态验证权限</title>
      <link href="/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%B8%89.2)/"/>
      <url>/2018/11/01/SpringSecurity/SpringBoot%E6%95%B4%E5%90%88SpringSecurity(%E4%B8%89.2)/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot整合SpringSecurity-三-动态更新用户的权限"><a href="#SpringBoot整合SpringSecurity-三-动态更新用户的权限" class="headerlink" title="SpringBoot整合SpringSecurity(三)-动态更新用户的权限"></a>SpringBoot整合SpringSecurity(三)-动态更新用户的权限</h1><p>用户权限的加载是在 调用了 UserDetailsService.loadUserByUsername(String username) 后构建出的 UserDetails，并将UserDetails 构建出 UsernamePasswordAuthenticationToken，通过 Token 生成了Authentication。</p><p>解题思路：</p><ol><li>监听 session 的创建和销毁事件，将其保存在map中</li><li>若有用户发生权限变更，则通过sessionID 拿到session，从而获取到 SecurityContext上下文，重新加载用户的信息</li><li>重新加载的代码类似于 UsernamePasswordAuthenticationFilter 的 attemptAuthentication(request,response) 方法。</li></ol><p>遗留问题：</p><ol><li>不支持小程序等无状态应用，即使用 Token，而不是 session 记录状态。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> Study社区 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 参考指南</title>
      <link href="/2018/10/22/SpringBoot/SpringBoot%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/"/>
      <url>/2018/10/22/SpringBoot/SpringBoot%E5%8F%82%E8%80%83%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot-参考指南"><a href="#SpringBoot-参考指南" class="headerlink" title="SpringBoot 参考指南"></a>SpringBoot 参考指南</h1><p>我会从 SpringBoot 的安装、构建、配置、启动运行等方面简单的介绍 SpringBoot 的技术点。</p><p>构建系统：Maven｜Gradle｜Ant｜Starters<br>最佳实践：代码结构｜@Configuration｜@EnableAutoConfiguration｜Beans和依赖注入<br>运行代码：IDE｜Packaged｜Maven｜Gradle<br>应用打包：产品级jars<br>Spring Boot命令行：使用CLI</p><p>核心特性：SpringApplication｜外部化配置｜Profiles｜日志<br>Web应用：MVC｜内嵌容器<br>使用数据：SQL｜NO-SQL<br>消息：概述｜JMS<br>测试：概述｜Boot应用｜工具<br>扩展：Auto-configuration｜@Conditions</p><p>管理端点：概述｜自定义<br>连接选项：HTTP｜JMX｜SSH<br>监控：指标｜审计｜追踪｜进程</p><p>部署Spring Boot应用：云部署 | 操作系统服务<br>构建工具插件：Maven｜Gradle<br>附录：应用属性｜Auto-configuration类｜可执行Jars</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot 参考指南 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gradle构建SpringBoot项目</title>
      <link href="/2018/10/11/SpringBoot/1.%E7%94%A8Gradle%E6%9E%84%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/10/11/SpringBoot/1.%E7%94%A8Gradle%E6%9E%84%E5%BB%BASpringBoot%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Gradle构建SpringBoot项目"><a href="#使用Gradle构建SpringBoot项目" class="headerlink" title="使用Gradle构建SpringBoot项目"></a>使用Gradle构建SpringBoot项目</h1><p><img src="https://upload-images.jianshu.io/upload_images/13603359-a178a9b22adf602a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>本章中包含了 <code>Gradle工程的创建</code>、<code>依赖SpringBoot</code>、<code>生成IDE工程文件</code>、<code>调试模式</code>、<code>自动化测试</code> 五个部分。<a href="https://github.com/davenkin/gradle-spring-boot.git" target="_blank" rel="noopener">本文 Github 代码</a></p><a id="more"></a><h2 id="一、创建Gradle工程"><a href="#一、创建Gradle工程" class="headerlink" title="一、创建Gradle工程"></a>一、创建Gradle工程</h2><ol><li>通过 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initializr</a> 网站创建一个 SpringBoot 工程，或者通过 IDE 来创建 SpringBoot 项目。</li><li>根目录下存在 <code>build.gradle</code> 文件，即证明项目创建成功</li><li>使用 Gradle Wrapper，能够不安装 Gradle 也能运行 gradle。(如果你是使用IDEA创建的项目，应该会默认使用 Gradle Wrapper)</li></ol><h2 id="二、添加-SpringBoot-依赖"><a href="#二、添加-SpringBoot-依赖" class="headerlink" title="二、添加 SpringBoot 依赖"></a>二、添加 SpringBoot 依赖</h2><h3 id="1-在-build-gradle-中配置-SpringBoot-插件"><a href="#1-在-build-gradle-中配置-SpringBoot-插件" class="headerlink" title="1. 在 build.gradle 中配置 SpringBoot 插件:"></a>1. 在 <code>build.gradle</code> 中配置 SpringBoot 插件:</h3><pre class=" language-java"><code class="language-java">buildscript <span class="token punctuation">{</span>    ext <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 指定 SpringBoot 的版本</span>        springBootVersion <span class="token operator">=</span> <span class="token string">'2.0.5.RELEASE'</span>    <span class="token punctuation">}</span>    repositories <span class="token punctuation">{</span>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// SpringBoot的默认版本</span>        <span class="token function">classpath</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>apply plugin<span class="token operator">:</span> <span class="token string">'java'</span>apply plugin<span class="token operator">:</span> <span class="token string">'eclipse'</span>apply plugin<span class="token operator">:</span> <span class="token string">'org.springframework.boot'</span>apply plugin<span class="token operator">:</span> <span class="token string">'io.spring.dependency-management'</span>group <span class="token operator">=</span> <span class="token string">'com.example'</span>version <span class="token operator">=</span> <span class="token string">'0.0.1-SNAPSHOT'</span>sourceCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>targetCompatibility <span class="token operator">=</span> <span class="token number">1.8</span>repositories <span class="token punctuation">{</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// SpringBoot依赖</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Web依赖</span>    <span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-web"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 测试依赖</span>    <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">'org.springframework.boot:spring-boot-starter-test'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="2-创建启动文件-Run-java"><a href="#2-创建启动文件-Run-java" class="headerlink" title="2. 创建启动文件 Run.java"></a>2. 创建启动文件 <code>Run.java</code></h3><p>该类是 SpringBoot 程序的入口。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-创建Controller接口"><a href="#3-创建Controller接口" class="headerlink" title="3. 创建Controller接口"></a>3. 创建Controller接口</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello [Spring Boot + Docker] World! "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4. 启动测试"></a>4. 启动测试</h3><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/gradlew bootRun</code></pre><p>使用浏览器或者 Postman 打开 <code>localhost:8080</code>，即可看到 <code>Hello World页面</code> 了。</p><h2 id="三、生成IDE工程文件"><a href="#三、生成IDE工程文件" class="headerlink" title="三、生成IDE工程文件"></a>三、生成IDE工程文件</h2><p>我们可以通过 Gradle 的 <code>IDE插件</code> 一键式的生成 IDE 工程文件，然后在 IDE 中直接打开这样的工程文件。这样，所有人都能够使用相同的 IDE 配置。</p><p>在 <code>build.gradle</code> 中配置：</p><pre class=" language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'idea'</span>apply plugin<span class="token operator">:</span> <span class="token string">'eclipse'</span></code></pre><p>然后执行：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/gradlew idea<span class="token punctuation">.</span>/gradlew eclipse</code></pre><p>此时会分别生成后缀为 ipr 的 <code>IDEA 工程文件</code>，和 <code>.project工程文件</code>，分别对应着 IDEA 工程和 Eclipse 工程。</p><pre><code>请注意，所有IDE工程文件都不应该提交到代码库，对于Git来说应该将这些文件注册到.gitignore文件中。各个开发者拿到代码后需要各自运行./graldlw idea或./gradlew eclipse命令以生成本地工程文件。</code></pre><h2 id="四、调试模式"><a href="#四、调试模式" class="headerlink" title="四、调试模式"></a>四、调试模式</h2><p>第一种方式,直接运行命令：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">.</span>/gradlew bootRun <span class="token operator">--</span>debug<span class="token operator">-</span>jvm</code></pre><p>第二种方式，在 build.gradle 中添加：</p><pre class=" language-java"><code class="language-java">apply plugin<span class="token operator">:</span> <span class="token string">'application'</span>applicationDefaultJvmArgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"</span><span class="token punctuation">]</span></code></pre><p>然后运行 <code>./gradlew bootRun</code></p><p>这两种方式都会使程序监听 5005端口。但是第一种方式会暂停以等待调试客户端的连接，然后启动 SpringBoot；而第二种方式程序不会暂停，而是直接启动整个程序。</p><h2 id="五、自动化测试"><a href="#五、自动化测试" class="headerlink" title="五、自动化测试"></a>五、自动化测试</h2><p>技浅，不太明白。等我开始写测试了之后再看。</p><h2 id="六、使用-JaCoCo"><a href="#六、使用-JaCoCo" class="headerlink" title="六、使用 JaCoCo"></a>六、使用 JaCoCo</h2><p>JaCoCo 是一款代码测试覆盖率的统计工具。</p><ol><li>在build.gradle 中添加配置：<code>apply plugin &quot;jacoco&quot;</code></li><li>运行 <code>./gradlew build</code>,生成原始数据文件，并且会在 <code>build\libs\</code> 下生成 jar文件</li><li>运行 <code>./gradlew jacocoTestReport</code>，生成测试报告</li><li>打开 <code>build/report/jacoco/test/index.html</code>，即可看到单元测试覆盖率报告.</li></ol><p>具体可以查看文章借鉴。</p><p>文章借鉴自：<a href="http://www.cnblogs.com/davenkin/p/gradle-spring-boot.html" target="_blank" rel="noopener">无知者云</a></p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gradle构建SpringBoot项目</title>
      <link href="/2018/10/11/SpringBoot/2.SpringBoot%E7%9A%84%E4%B8%89%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/10/11/SpringBoot/2.SpringBoot%E7%9A%84%E4%B8%89%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot的三种启动方式"><a href="#SpringBoot的三种启动方式" class="headerlink" title="SpringBoot的三种启动方式"></a>SpringBoot的三种启动方式</h1><h2 id="一、Main方法"><a href="#一、Main方法" class="headerlink" title="一、Main方法"></a>一、Main方法</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @SpringBootApplication SpringBoot的组合注解，标注为SpringBoot的应用 *  scanBasePackages  扫描的包 * @EnableAsync 开启异步方法 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages <span class="token operator">=</span> <span class="token string">"com.pgc"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>CommonApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 项目的入口     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二、Maven方式"><a href="#二、Maven方式" class="headerlink" title="二、Maven方式"></a>二、Maven方式</h2><h2 id="三、Gradle方式"><a href="#三、Gradle方式" class="headerlink" title="三、Gradle方式"></a>三、Gradle方式</h2><h2 id="四、运行jar文件"><a href="#四、运行jar文件" class="headerlink" title="四、运行jar文件"></a>四、运行jar文件</h2><p>通过 jar 文件启动的方式，需要先将项目编译为jar文件。</p><pre class=" language-java"><code class="language-java">mvn install</code></pre><h2 id="五、war文件方式"><a href="#五、war文件方式" class="headerlink" title="五、war文件方式"></a>五、war文件方式</h2><p>如果项目的打包方式为“war”，则将打包之后的 war 文件，直接复制到对应的服务器下即可。由应用服务器来启动。</p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC算法、垃圾收集器</title>
      <link href="/2018/10/11/java/GC%E7%AE%97%E6%B3%95/"/>
      <url>/2018/10/11/java/GC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="GC算法、垃圾收集器"><a href="#GC算法、垃圾收集器" class="headerlink" title="GC算法、垃圾收集器"></a>GC算法、垃圾收集器</h1><p>在 Java 中有两个最基本的回收算法：复制算法和标记清理算法</p><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>两个区域A和B，初始对象在A，继续存活的对象被转移到B。为新生代最常用的算法</p><h2 id="标记清理算法"><a href="#标记清理算法" class="headerlink" title="标记清理算法"></a>标记清理算法</h2><p>一块区域，标记可达对象(可达性分析)，然后回收不可达对象。</p><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记 - 整理算法"></a>标记 - 整理算法</h3><p>通过标记清理算法回收会，会出现碎片，通过碎片整理算法，整理出更大的内存存放更大的对象</p><h2 id="新生代和年老代"><a href="#新生代和年老代" class="headerlink" title="新生代和年老代"></a>新生代和年老代</h2><p>新生代：初始对象，生命周期短</p><p>永久代：长时间存在的对象</p><p>整个Java 的垃圾回收是 新生代和年老代的协作，被称为 分代回收。</p><hr><p>Serial New 收集器，是针对新生代的收集器，采用的是复制算法</p><p>Parallel New 并行收集器，新生代采用复制算法，年老代采用标记整理</p><p>Parallel Scavenge 并行收集器，针对新生代，采用复制收集算法</p><p>Serial Old 串行收集器，新生代采用复制，年老代采用标记整理</p><p>CMS 收集器，基于标记清理</p><p>G1 收集器，整体上基于标记整理，局部采用复制</p><ul><li>新生代基本采用复制算法，年老代采用标记整理算法，CMS采用标记清理</li></ul><h2 id="如何判断对象已死？"><a href="#如何判断对象已死？" class="headerlink" title="如何判断对象已死？"></a>如何判断对象已死？</h2><h3 id="1-引用计数法"><a href="#1-引用计数法" class="headerlink" title="1. 引用计数法"></a>1. 引用计数法</h3><p>通过一个计数器记录该对象被引用的次数，简单高效。</p><p>弊端：无法解决循环引用问题。例如A包含指向B的引用，B包含指向A的引用，但是没有引用指向A和B，此时AB的引用次数都为1，都不会被回收。</p><h3 id="2-根搜索"><a href="#2-根搜索" class="headerlink" title="2. 根搜索"></a>2. 根搜索</h3><p>通过选取一些 <code>根对象</code> 作为起始点，开始向下搜索，如果一个对象到跟对象不可达时，则说明此对象没有被引用，可以回收。</p><p>可作为 <code>根对象</code> 的有：栈中变量引用的对象，类静态属性引用对象，常量引用对象等。</p><h3 id="3-策略：垃圾回收算法"><a href="#3-策略：垃圾回收算法" class="headerlink" title="3. 策略：垃圾回收算法"></a>3. 策略：垃圾回收算法</h3><p>即上面说的几种算法</p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Docker+Jenkis+Git持续化集成(一)：安装Docker</title>
      <link href="/2018/10/11/docker/1.%E5%AE%89%E8%A3%85Docker/"/>
      <url>/2018/10/11/docker/1.%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Docker-for-Windows"><a href="#安装Docker-for-Windows" class="headerlink" title="安装Docker for Windows"></a>安装Docker for Windows</h1><p><img src="https://upload-images.jianshu.io/upload_images/13603359-b91f23b00455e174.png" alt="Docker for Windows"></p><a id="more"></a><h2 id="一、在Win10系统下安装Docker"><a href="#一、在Win10系统下安装Docker" class="headerlink" title="一、在Win10系统下安装Docker"></a>一、在Win10系统下安装Docker</h2><p>安装前提：</p><ol><li>Windows 10 64位：Pro，Enterprise或Education</li><li>在 <code>Windows 功能</code> 中开启 <code>Hyper-V</code> 功能</li><li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">下载 Docker</a>，双击运行即可</li></ol><h2 id="坑："><a href="#坑：" class="headerlink" title="坑："></a>坑：</h2><h3 id="1-安装完-Dokcer-之后，提示未找到-CA"><a href="#1-安装完-Dokcer-之后，提示未找到-CA" class="headerlink" title="1. 安装完 Dokcer 之后，提示未找到 CA"></a>1. 安装完 Dokcer 之后，提示未找到 CA</h3><pre class=" language-shell"><code class="language-shell">C:\Users\user>dockercould not read CA certificate "C:\\Users\\user\\.docker\\machine\\machines\\default\\ca.pem": open C:\Users\user\.docker\machine\machines\default\ca.pem: The system cannot find the path specified.</code></pre><p><code>原因</code> ：当从 Docker Toolbox 升级到 Docker for Windows 之后，卸载 Docker Toolbox 时，不会删除用户的 env变量。</p><p><code>解决方法</code> ：</p><ol><li>从应用管理中卸载 Docker Toolbox</li><li>卸载 VirtualBox(<code>不能同时使用 Docker 和 Virtualbox，因为 Docker Toolbox 和 HType-V 是必须的</code>)</li><li>删除 Docker Toolbox env 变量：<ol><li>进入系统变量设置：</li><li>从系统/yoghurt变量中删除所有“DOCKER_*”的条目<ol><li>DOCKER_TLS_VERIFY</li><li>DOCKER_CERT_PATH</li><li>DOCKER_HOST</li><li>DOCKER_TOOLBOX_INSTALL_PATH</li></ol></li></ol></li><li>从命令提示符或者 PowerShell 中删除 Docker_*:</li></ol><pre class=" language-shell"><code class="language-shell">[Environment]::SetEnvironmentVariable("DOCKER_CERT_PATH", $null, "User")[Environment]::SetEnvironmentVariable("DOCKER_HOST", $null, "User")[Environment]::SetEnvironmentVariable("DOCKER_MACHINE_NAME", $null, "User")[Environment]::SetEnvironmentVariable("DOCKER_TLS_VERIFY", $null, "User")[Environment]::SetEnvironmentVariable("DOCKER_TOOLBOX_INSTALL_PATH", $null, "User")</code></pre><ol start="5"><li>重新启动 PowerShell，测试 Docker 命令。(如有必要，也可以重启)</li></ol><h3 id="2-无法启动-Ubuntu"><a href="#2-无法启动-Ubuntu" class="headerlink" title="2. 无法启动 Ubuntu"></a>2. 无法启动 Ubuntu</h3><p><img src="https://upload-images.jianshu.io/upload_images/13603359-4aa636098789359a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>原因：新版的 Docker for Windows 默认使用的是 Windows 模式</p><p><a href="https://docs.docker.com/docker-for-windows/#test-your-installation" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Docker+Jenkis+Git持续化集成(二)：SpringBoot集成Docker</title>
      <link href="/2018/10/11/docker/2.SpringBoot+docker/"/>
      <url>/2018/10/11/docker/2.SpringBoot+docker/</url>
      
        <content type="html"><![CDATA[<h1 id="将-SpringBoot-项目部署到-Docker-下"><a href="#将-SpringBoot-项目部署到-Docker-下" class="headerlink" title="将 SpringBoot 项目部署到 Docker 下"></a>将 SpringBoot 项目部署到 Docker 下</h1><p>这里我们不使用 IDE 的集成化环境，更便于理解。</p><h2 id="一、新建一个-SpringBoot-项目"><a href="#一、新建一个-SpringBoot-项目" class="headerlink" title="一、新建一个 SpringBoot 项目"></a>一、新建一个 SpringBoot 项目</h2><p>创建 SpringBoot 项目的方式有很多，比如 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring Initializr</a> 网站。</p><p>我们将生成的压缩文件解压，即可看到一个完整的项目结构。在这里我们会分别介绍 Maven 和 Gradle 两种方式构建的项目。</p><p>不管使用哪种方式生成的项目，都应该具备 Application.java 作为启动文件。</p><h2 id="二、Maven方式"><a href="#二、Maven方式" class="headerlink" title="二、Maven方式"></a>二、Maven方式</h2><h3 id="1-完善依赖"><a href="#1-完善依赖" class="headerlink" title="1. 完善依赖"></a>1. 完善依赖</h3><p>在 POM.XML 文件中加上 Springboot 和 web 的依赖，我们需要用到 controller 控制器来测试项目是否可以访问。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>bingohuang.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-docker-cloudcomb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>docker test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>docker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- SpringBoot 的依赖解析 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Web --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Test --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>创建一个 HelloController</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello [Spring Boot + Docker] World! "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-构建Maven"><a href="#2-构建Maven" class="headerlink" title="2. 构建Maven"></a>2. 构建Maven</h3><p>在根目录执行： <code>mvn package</code> 命令。出现 <code>BUILD SUCCESS</code> 即表示构建成功。</p><p>maven 会更新项目的远程依赖，并会在根目录下生成一个 target 目录，并在该目录中生成一个可执行的 jar 文件。</p><h3 id="3-运行jar文件"><a href="#3-运行jar文件" class="headerlink" title="3. 运行jar文件"></a>3. 运行jar文件</h3><p>SpringBoot 的强大之处就体现出来了。<br>我们运行刚刚生成好的 jar 文件，它会调用内置的 Tomcat 服务器，将我们的项目运行在默认的 8080 端口：</p><pre class=" language-shell"><code class="language-shell">java -jar target/spring-boot-docker-test.0.0.1.jar</code></pre><p>访问 localhost:8080 ，即可看到 <code>&quot;Hello [Spring Boot + Docker] World! &quot;</code></p><h2 id="三、构建Gradle"><a href="#三、构建Gradle" class="headerlink" title="三、构建Gradle"></a>三、构建Gradle</h2><p>使用Gradle方式构建，我放在了 <a href="./SpringBoot/1.用Gradle构建SpringBoot项目.md">另一篇博客</a> 中。</p><p>但是通过 <code>./gradlew build</code> 生成的 jar 文件，放在了 <code>build/libs/**.jar</code> 下</p><h2 id="四、SpringBoot项目Docker化、容器化"><a href="#四、SpringBoot项目Docker化、容器化" class="headerlink" title="四、SpringBoot项目Docker化、容器化"></a>四、SpringBoot项目Docker化、容器化</h2><h3 id="1-创建DockerFile"><a href="#1-创建DockerFile" class="headerlink" title="1. 创建DockerFile"></a>1. 创建DockerFile</h3><p>在项目的根目录下创建一个 Dockerfile 文件：<code>touch Dockerfile</code>：</p><pre class=" language-java"><code class="language-java">#指定Java的版本FROM frolvlad<span class="token operator">/</span>alpine<span class="token operator">-</span>oraclejdk8<span class="token operator">:</span>slim#将生成的jar文件拷贝到镜像中COPY target<span class="token operator">/</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>docker<span class="token operator">-</span>cloudcomb<span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span>jar app<span class="token punctuation">.</span>jarENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"-jar"</span><span class="token punctuation">,</span><span class="token string">"/app.jar"</span><span class="token punctuation">]</span></code></pre><h3 id="2-构建-Docker"><a href="#2-构建-Docker" class="headerlink" title="2. 构建 Docker"></a>2. 构建 Docker</h3><p>执行构建 docker 镜像的命令(最后有一个点)：</p><pre class=" language-java"><code class="language-java">docker build <span class="token operator">-</span>t docker<span class="token operator">-</span>demo<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token punctuation">.</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/13603359-cd9cfb6dc094c8aa.png" alt="成功构建镜像"></p><p>此时我们已经成功构建了 docker 镜像，输入 <code>docker images</code> 可以看到：</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-6a5022ef8e99b201.png" alt="查看镜像"></p><h3 id="3-运行Docker镜像"><a href="#3-运行Docker镜像" class="headerlink" title="3. 运行Docker镜像"></a>3. 运行Docker镜像</h3><p>我们运行上图中生成的 docker image:</p><pre class=" language-java"><code class="language-java">docker run <span class="token operator">-</span>p <span class="token number">8080</span><span class="token operator">:</span><span class="token number">8080</span> <span class="token operator">-</span>t docker<span class="token operator">-</span>demo<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span></code></pre><p>浏览器访问 localhost:8080，即可看到我们在 HelloController 的 hello() 方法中是输出。</p><p>至此，SpringBoot + Docker 的构建完成！</p><h2 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h2><p>IDEA 插件下载错误：<br><a href="http://ouip1glzq.bkt.clouddn.com/blog/20180802092006.png" target="_blank" rel="noopener">错误提示</a></p><p><code>原因</code> ：连接插件中心使用的是 https 的链接<br><code>解决方法</code> ：尝试 Settings =&gt; System Settings =&gt; Updates =&gt; 去掉勾选 Use secure connection</p>]]></content>
      
      
      <categories>
          
          <category> Docker学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Docker+Jenkis+Git持续化集成(二)：SpringBoot集成Docker</title>
      <link href="/2018/10/11/docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/10/11/docker/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="进入docker-container"><a href="#进入docker-container" class="headerlink" title="进入docker container"></a>进入docker container</h3><p>使用场景：例如当我们初始化一个 Jenkins的Docker Container 时，第一次需要我们去某目录下查看初始化的密码。</p><p>使用命令： <code>docker exec -it container_id /bin/bash</code></p><p>遇见的问题(一)：在windows环境下，可能需要加上 <code>winpty</code> 前缀。</p><p>遇见的问题(二)：C:/Program Files/Git/usr/bin/bash :no such file or directory:unknown - 解决方法：将 /bin/bash 改为 /bin/sh 或者 bash 即可。</p>]]></content>
      
      
      <categories>
          
          <category> Docker学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC测试框架</title>
      <link href="/2018/10/11/java/MockMvc%E6%B5%8B%E8%AF%95/"/>
      <url>/2018/10/11/java/MockMvc%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC测试框架"><a href="#SpringMVC测试框架" class="headerlink" title="SpringMVC测试框架"></a>SpringMVC测试框架</h1><h3 id="基于RESTful风格的SpringMVC的测试，我们可以测试完整的Spring-MVC流程，即从URL请求到控制器处理，再到视图渲染都可以测试。"><a href="#基于RESTful风格的SpringMVC的测试，我们可以测试完整的Spring-MVC流程，即从URL请求到控制器处理，再到视图渲染都可以测试。" class="headerlink" title="基于RESTful风格的SpringMVC的测试，我们可以测试完整的Spring MVC流程，即从URL请求到控制器处理，再到视图渲染都可以测试。"></a>基于RESTful风格的SpringMVC的测试，我们可以测试完整的Spring MVC流程，即从URL请求到控制器处理，再到视图渲染都可以测试。</h3><h2 id="快速入门-这个方法中包含了大多数的常见情况："><a href="#快速入门-这个方法中包含了大多数的常见情况：" class="headerlink" title="快速入门-这个方法中包含了大多数的常见情况："></a>快速入门-这个方法中包含了大多数的常见情况：</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SpringBootTest</span>    <span class="token annotation punctuation">@AutoConfigureMockMvc</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CourseControllerTest</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> MockMvc mockMvc<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ObjectMapper是一个可以重复使用的对象</span>        <span class="token annotation punctuation">@Autowired</span>        <span class="token keyword">private</span> ObjectMapper mapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">courseListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>            mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>MockMvcRequestBuilders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/course"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>            String json <span class="token operator">=</span> <span class="token string">"{\"name\":\"Mock测试\",\"classHour\":\"4课时\",\"id\":\"rn:practice:Course:5af27fa5d34f435e581e5bbf\"}"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将json格式字符串转换成Course对象里的属性值</span>            Course course <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span>Course<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//perform,执行一个RequestBuilders请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理</span>            mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span>                    <span class="token comment" spellcheck="true">//构造一个post请求</span>                    MockMvcRequestBuilders<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/course"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//使用writeValueAsString()方法来获取对象的JSON字符串表示</span>                    <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>course<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//andExpect，添加ResultMathcers验证规则，验证控制器执行完成后结果是否正确，【这是一个断言】</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span>MediaType<span class="token punctuation">.</span>APPLICATION_JSON_UTF8<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//假定返回的结果中，"name" 值为 "Mock测试2",如果不是的话，会抛出异常java.lang.AssertionError，并给出期望值和实际值</span>            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span>MockMvcResultMatchers<span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"Mock测试2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//添加ResultHandler结果处理器，比如调试时 打印结果(print方法)到控制台</span>            <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//返回相应的MvcResult</span>            <span class="token punctuation">.</span><span class="token function">andReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><h2 id="一-MockMvcBuilder"><a href="#一-MockMvcBuilder" class="headerlink" title="一 MockMvcBuilder"></a>一 MockMvcBuilder</h2><p>MockMvcBuilder是用来构造MockMvc的构造器，其主要有两个实现：StandaloneMockMvcBuilder和DefaultMockMvcBuilder，分别对应两种测试方式，即独立安装和集成Web环境测试（此种方式并不会集成真正的web环境，而是通过相应的Mock API进行模拟测试，无须启动服务器）。对于我们来说直接使用静态工厂MockMvcBuilders创建即可。</p><h3 id="1-集成Web环境方式"><a href="#1-集成Web环境方式" class="headerlink" title="1.集成Web环境方式"></a>1.集成Web环境方式</h3><pre><code>MockMvcBuilders.webAppContextSetup(WebApplicationContext context)：指定WebApplicationContext，将会从该上下文获取相应的控制器并得到相应的MockMvc；@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&quot;classpath:config/IncotermsRestServiceTest-context.xml&quot;)@WebAppConfigurationpublic class IncotermsRestServiceTest {    @Autowired    private WebApplicationContext wac;    private MockMvc mockMvc;    @Before    public void setup() {        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();   //构造MockMvc    }    ...}注意：    (1)@WebAppConfiguration：测试环境使用，用来表示测试环境使用的ApplicationContext将是WebApplicationContext类型的；value指定web应用的根；    (2)通过@Autowired WebApplicationContext wac：注入web环境的ApplicationContext容器；    (3)然后通过MockMvcBuilders.webAppContextSetup(wac).build()创建一个MockMvc进行测试；</code></pre><h3 id="2-独立测试方式"><a href="#2-独立测试方式" class="headerlink" title="2.独立测试方式"></a>2.独立测试方式</h3><pre><code>MockMvcBuilders.standaloneSetup(Object... controllers)：通过参数指定一组控制器，这样就不需要从上下文获取了；public class PricingExportResultsRestServiceTest {    @InjectMocks    private PricingExportResultsRestService pricingExportResultsRestService;    @Mock    private ExportRateScheduleService exportRateScheduleService;    @Mock    private PricingUrlProvider pricingUrlProvider;    private MockMvc mockMvc;    @Before    public void setup() {        MockitoAnnotations.initMocks(this);        mockMvc = MockMvcBuilders.standaloneSetup(pricingExportResultsRestService).build();  //构造MockMvc    }    ...}主要是两个步骤：(1)首先自己创建相应的控制器，注入相应的依赖(2)通过MockMvcBuilders.standaloneSetup模拟一个Mvc测试环境，通过build得到一个MockMvc</code></pre><h2 id="二-MockMvc"><a href="#二-MockMvc" class="headerlink" title="二 MockMvc"></a>二 MockMvc</h2><h4 id="先看一个测试例子1："><a href="#先看一个测试例子1：" class="headerlink" title="先看一个测试例子1："></a>先看一个测试例子1：</h4><pre><code>　　@Test    public void createIncotermSuccess() throws Exception {        IncotermTo createdIncoterm = new IncotermTo();        createdIncoterm.setId(new IncotermId(UUID.fromString(&quot;6305ff33-295e-11e5-ae37-54ee7534021a&quot;)));        createdIncoterm.setCode(&quot;EXW&quot;);        createdIncoterm.setDescription(&quot;code exw&quot;);        createdIncoterm.setLocationQualifier(LocationQualifier.DEPARTURE);when(inventoryService.create(any(IncotermTo.class))).thenReturn(createdIncoterm);   mockMvc.perform(post(&quot;/secured/resources/incoterms/create&quot;).accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)                .content(&quot;{\&quot;code\&quot; : \&quot;EXW\&quot;, \&quot;description\&quot; : \&quot;code exw\&quot;, \&quot;locationQualifier\&quot; : \&quot;DEPARTURE\&quot;}&quot;.getBytes()))                //.andDo(print())                .andExpect(status().isOk())                .andExpect(jsonPath(&quot;id.value&quot;).exists())                .andExpect(jsonPath(&quot;id.value&quot;).value(&quot;6305ff33-295e-11e5-ae37-54ee7534021a&quot;))                .andExpect(jsonPath(&quot;code&quot;).value(&quot;EXW&quot;));    }perform：执行一个RequestBuilder请求，会自动执行SpringMVC的流程并映射到相应的控制器执行处理；andExpect：添加ResultMatcher验证规则，验证控制器执行完成后结果是否正确；andDo：添加ResultHandler结果处理器，比如调试时打印结果到控制台；andReturn：最后返回相应的MvcResult；然后进行自定义验证/进行下一步的异步处理；</code></pre><h4 id="看一个具体的例子2："><a href="#看一个具体的例子2：" class="headerlink" title="看一个具体的例子2："></a>看一个具体的例子2：</h4><pre><code>@Test  public void testView() throws Exception {      MvcResult result = mockMvc.perform(MockMvcRequestBuilders.get(&quot;/user/1&quot;))              .andExpect(MockMvcResultMatchers.view().name(&quot;user/view&quot;))              .andExpect(MockMvcResultMatchers.model().attributeExists(&quot;user&quot;))              .andDo(MockMvcResultHandlers.print())              .andReturn();      Assert.assertNotNull(result.getModelAndView().getModel().get(&quot;user&quot;));  }  </code></pre><blockquote><p>   整个过程：<br>   1、mockMvc.perform执行一个请求；<br>   2、MockMvcRequestBuilders.get(“/user/1”)构造一个请求<br>   3、ResultActions.andExpect添加执行完成后的断言<br>   4、ResultActions.andDo添加一个结果处理器，表示要对结果做点什么事情，比如此处使用MockMvcResultHandlers.print()输出整个响应结果信息。<br>   5、ResultActions.andReturn表示执行完成后返回相应的结果。   </p></blockquote><pre><code>整个测试过程非常有规律：1、准备测试环境2、通过MockMvc执行请求3.1、添加验证断言3.2、添加结果处理器3.3、得到MvcResult进行自定义断言/进行下一步的异步请求4、卸载测试环境</code></pre><h2 id="三-RequestBuilder-MockMvcRequestBuilders"><a href="#三-RequestBuilder-MockMvcRequestBuilders" class="headerlink" title="三 RequestBuilder/MockMvcRequestBuilders"></a>三 RequestBuilder/MockMvcRequestBuilders</h2><p>从名字可以看出，RequestBuilder用来构建请求的，其提供了一个方法buildRequest(ServletContext servletContext)用于构建MockHttpServletRequest；其主要有两个子类MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder（如文件上传使用），即用来Mock客户端请求需要的所有数据。</p><h3 id="1-MockMvcRequestBuilders主要API"><a href="#1-MockMvcRequestBuilders主要API" class="headerlink" title="1.MockMvcRequestBuilders主要API"></a>1.MockMvcRequestBuilders主要API</h3><pre><code>MockHttpServletRequestBuilder get(String urlTemplate, Object... urlVariables)：根据uri模板和uri变量值得到一个GET请求方式的MockHttpServletRequestBuilder；如get(/user/{id}, 1L)；MockHttpServletRequestBuilder post(String urlTemplate, Object... urlVariables)：同get类似，但是是POST方法；MockHttpServletRequestBuilder put(String urlTemplate, Object... urlVariables)：同get类似，但是是PUT方法；MockHttpServletRequestBuilder delete(String urlTemplate, Object... urlVariables) ：同get类似，但是是DELETE方法；MockHttpServletRequestBuilder options(String urlTemplate, Object... urlVariables)：同get类似，但是是OPTIONS方法；MockHttpServletRequestBuilder request(HttpMethod httpMethod, String urlTemplate, Object... urlVariables)： 提供自己的Http请求方法及uri模板和uri变量，如上API都是委托给这个API；MockMultipartHttpServletRequestBuilder fileUpload(String urlTemplate, Object... urlVariables)：提供文件上传方式的请求，得到MockMultipartHttpServletRequestBuilder；RequestBuilder asyncDispatch(final MvcResult mvcResult)：创建一个从启动异步处理的请求的MvcResult进行异步分派的RequestBuilder；</code></pre><h3 id="2-MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder-API"><a href="#2-MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder-API" class="headerlink" title="2.MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder API"></a>2.MockHttpServletRequestBuilder和MockMultipartHttpServletRequestBuilder API</h3><h2 id="1-MockHttpServletRequestBuilder-API"><a href="#1-MockHttpServletRequestBuilder-API" class="headerlink" title="(1)MockHttpServletRequestBuilder API"></a>(1)MockHttpServletRequestBuilder API</h2><pre><code>MockHttpServletRequestBuilder header(String name, Object... values)/MockHttpServletRequestBuilder headers(HttpHeaders httpHeaders)：添加头信息；MockHttpServletRequestBuilder contentType(MediaType mediaType)：指定请求的contentType头信息；MockHttpServletRequestBuilder accept(MediaType... mediaTypes)/MockHttpServletRequestBuilder accept(String... mediaTypes)：指定请求的Accept头信息；MockHttpServletRequestBuilder content(byte[] content)/MockHttpServletRequestBuilder content(String content)：指定请求Body体内容；MockHttpServletRequestBuilder cookie(Cookie... cookies)：指定请求的Cookie；MockHttpServletRequestBuilder locale(Locale locale)：指定请求的Locale；MockHttpServletRequestBuilder characterEncoding(String encoding)：指定请求字符编码；MockHttpServletRequestBuilder requestAttr(String name, Object value) ：设置请求属性数据；MockHttpServletRequestBuilder sessionAttr(String name, Object value)/MockHttpServletRequestBuilder sessionAttrs(Map&lt;string, object=&quot;&quot;&gt; sessionAttributes)：设置请求session属性数据；MockHttpServletRequestBuilder flashAttr(String name, Object value)/MockHttpServletRequestBuilder flashAttrs(Map&lt;string, object=&quot;&quot;&gt; flashAttributes)：指定请求的flash信息，比如重定向后的属性信息；MockHttpServletRequestBuilder session(MockHttpSession session) ：指定请求的Session；MockHttpServletRequestBuilder principal(Principal principal) ：指定请求的Principal；MockHttpServletRequestBuilder contextPath(String contextPath) ：指定请求的上下文路径，必须以“/”开头，且不能以“/”结尾；MockHttpServletRequestBuilder pathInfo(String pathInfo) ：请求的路径信息，必须以“/”开头；MockHttpServletRequestBuilder secure(boolean secure)：请求是否使用安全通道；MockHttpServletRequestBuilder with(RequestPostProcessor postProcessor)：请求的后处理器，用于自定义一些请求处理的扩展点；</code></pre><h2 id="2-MockMultipartHttpServletRequestBuilder"><a href="#2-MockMultipartHttpServletRequestBuilder" class="headerlink" title="(2)MockMultipartHttpServletRequestBuilder"></a>(2)MockMultipartHttpServletRequestBuilder</h2><pre><code>继承自MockHttpServletRequestBuilder，又提供了如下APIMockMultipartHttpServletRequestBuilder file(String name, byte[] content)/MockMultipartHttpServletRequestBuilder file(MockMultipartFile file)：指定要上传的文件；</code></pre><h2 id="四-ResultActions"><a href="#四-ResultActions" class="headerlink" title="四 ResultActions"></a>四 ResultActions</h2><pre><code>调用MockMvc.perform(RequestBuilder requestBuilder)后将得到ResultActions，通过ResultActions完成如下三件事：ResultActions andExpect(ResultMatcher matcher) ：添加验证断言来判断执行请求后的结果是否是预期的；ResultActions andDo(ResultHandler handler) ：添加结果处理器，用于对验证成功后执行的动作，如输出下请求/结果信息用于调试；MvcResult andReturn() ：返回验证成功后的MvcResult；用于自定义验证/下一步的异步处理；</code></pre><h2 id="五-ResultMatcher-MockMvcResultMatchers"><a href="#五-ResultMatcher-MockMvcResultMatchers" class="headerlink" title="五 ResultMatcher/MockMvcResultMatchers"></a>五 ResultMatcher/MockMvcResultMatchers</h2><pre><code>1.ResultMatcher用来匹配执行完请求后的结果验证，其就一个match(MvcResult result)断言方法，如果匹配失败将抛出相应的异常；spring mvc测试框架提供了很多***ResultMatchers来满足测试需求。注意这些***ResultMatchers并不是ResultMatcher的子类，而是返回ResultMatcher实例的。Spring mvc测试框架为了测试方便提供了MockMvcResultMatchers静态工厂方法方便操作；</code></pre><p>2.具体的API如下：</p><pre><code>HandlerResultMatchers handler()：请求的Handler验证器，比如验证处理器类型/方法名；此处的Handler其实就是处理请求的控制器；RequestResultMatchers request()：得到RequestResultMatchers验证器；ModelResultMatchers model()：得到模型验证器；ViewResultMatchers view()：得到视图验证器；FlashAttributeResultMatchers flash()：得到Flash属性验证；StatusResultMatchers status()：得到响应状态验证器；HeaderResultMatchers header()：得到响应Header验证器；CookieResultMatchers cookie()：得到响应Cookie验证器；ContentResultMatchers content()：得到响应内容验证器；JsonPathResultMatchers jsonPath(String expression, Object ... args)/ResultMatcher jsonPath  (String expression, Matcher matcher)：得到Json表达式验证器；XpathResultMatchers xpath(String expression, Object... args)/XpathResultMatchers xpath(String expression, Map&lt;string, string=&quot;&quot;&gt; namespaces, Object... args)：得到Xpath表达式验证器；ResultMatcher forwardedUrl(final String expectedUrl)：验证处理完请求后转发的url（绝对匹配）；ResultMatcher forwardedUrlPattern(final String urlPattern)：验证处理完请求后转发的url（Ant风格模式匹配，@since spring4）；ResultMatcher redirectedUrl(final String expectedUrl)：验证处理完请求后重定向的url（绝对匹配）；ResultMatcher redirectedUrlPattern(final String expectedUrl)：验证处理完请求后重定向的url（Ant风格模式匹配，@since spring4）</code></pre><h2 id="六-一些常用的测试"><a href="#六-一些常用的测试" class="headerlink" title="六 一些常用的测试"></a>六 一些常用的测试</h2><h3 id="1-测试普通控制器"><a href="#1-测试普通控制器" class="headerlink" title="1.测试普通控制器"></a>1.测试普通控制器</h3><pre><code>mockMvc.perform(get(&quot;/user/{id}&quot;, 1)) //执行请求          .andExpect(model().attributeExists(&quot;user&quot;)) //验证存储模型数据          .andExpect(view().name(&quot;user/view&quot;)) //验证viewName          .andExpect(forwardedUrl(&quot;/WEB-INF/jsp/user/view.jsp&quot;))//验证视图渲染时forward到的jsp          .andExpect(status().isOk())//验证状态码          .andDo(print()); //输出MvcResult到控制台</code></pre><h3 id="2-得到MvcResult自定义验证"><a href="#2-得到MvcResult自定义验证" class="headerlink" title="2.得到MvcResult自定义验证"></a>2.得到MvcResult自定义验证</h3><pre><code>MvcResult result = mockMvc.perform(get(&quot;/user/{id}&quot;, 1))//执行请求          .andReturn(); //返回MvcResult  Assert.assertNotNull(result.getModelAndView().getModel().get(&quot;user&quot;)); //自定义断言   </code></pre><h3 id="3-验证请求参数绑定到模型数据及Flash属性"><a href="#3-验证请求参数绑定到模型数据及Flash属性" class="headerlink" title="3.验证请求参数绑定到模型数据及Flash属性"></a>3.验证请求参数绑定到模型数据及Flash属性</h3><pre><code>mockMvc.perform(post(&quot;/user&quot;).param(&quot;name&quot;, &quot;zhang&quot;)) //执行传递参数的POST请求(也可以post(&quot;/user?name=zhang&quot;))              .andExpect(handler().handlerType(UserController.class)) //验证执行的控制器类型              .andExpect(handler().methodName(&quot;create&quot;)) //验证执行的控制器方法名              .andExpect(model().hasNoErrors()) //验证页面没有错误              .andExpect(flash().attributeExists(&quot;success&quot;)) //验证存在flash属性              .andExpect(view().name(&quot;redirect:/user&quot;)); //验证视图  </code></pre><h3 id="4-文件上传"><a href="#4-文件上传" class="headerlink" title="4.文件上传"></a>4.文件上传</h3><pre><code>byte[] bytes = new byte[] {1, 2};  mockMvc.perform(fileUpload(&quot;/user/{id}/icon&quot;, 1L).file(&quot;icon&quot;, bytes)) //执行文件上传          .andExpect(model().attribute(&quot;icon&quot;, bytes)) //验证属性相等性          .andExpect(view().name(&quot;success&quot;)); //验证视图  </code></pre><h3 id="5-JSON请求-响应验证"><a href="#5-JSON请求-响应验证" class="headerlink" title="5.JSON请求/响应验证"></a>5.JSON请求/响应验证</h3><pre><code>String requestBody = &quot;{\&quot;id\&quot;:1, \&quot;name\&quot;:\&quot;zhang\&quot;}&quot;;      mockMvc.perform(post(&quot;/user&quot;)              .contentType(MediaType.APPLICATION_JSON).content(requestBody)              .accept(MediaType.APPLICATION_JSON)) //执行请求              .andExpect(content().contentType(MediaType.APPLICATION_JSON)) //验证响应contentType              .andExpect(jsonPath(&quot;$.id&quot;).value(1)); //使用Json path验证JSON 请参考http://goessner.net/articles/JsonPath/       String errorBody = &quot;{id:1, name:zhang}&quot;;      MvcResult result = mockMvc.perform(post(&quot;/user&quot;)              .contentType(MediaType.APPLICATION_JSON).content(errorBody)              .accept(MediaType.APPLICATION_JSON)) //执行请求              .andExpect(status().isBadRequest()) //400错误请求              .andReturn();       Assert.assertTrue(HttpMessageNotReadableException.class.isAssignableFrom(result.getResolvedException().getClass()));//错误的请求内容体</code></pre><h3 id="6-异步测试"><a href="#6-异步测试" class="headerlink" title="6.异步测试"></a>6.异步测试</h3><pre><code>//Callable  MvcResult result = mockMvc.perform(get(&quot;/user/async1?id=1&amp;name=zhang&quot;)) //执行请求          .andExpect(request().asyncStarted())          .andExpect(request().asyncResult(CoreMatchers.instanceOf(User.class))) //默认会等10秒超时          .andReturn();  mockMvc.perform(asyncDispatch(result))          .andExpect(status().isOk())          .andExpect(content().contentType(MediaType.APPLICATION_JSON))          .andExpect(jsonPath(&quot;$.id&quot;).value(1));  </code></pre><h3 id="7-全局配置"><a href="#7-全局配置" class="headerlink" title="7.全局配置"></a>7.全局配置</h3><pre><code>mockMvc = webAppContextSetup(wac)          .defaultRequest(get(&quot;/user/1&quot;).requestAttr(&quot;default&quot;, true)) //默认请求 如果其是Mergeable类型的，会自动合并的哦mockMvc.perform中的RequestBuilder          .alwaysDo(print())  //默认每次执行请求后都做的动作          .alwaysExpect(request().attribute(&quot;default&quot;, true)) //默认每次执行后进行验证的断言          .build();  mockMvc.perform(get(&quot;/user/1&quot;))          .andExpect(model().attributeExists(&quot;user&quot;));  </code></pre>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React-Router-Dom</title>
      <link href="/2018/10/01/React/6.ReactRouterDom/"/>
      <url>/2018/10/01/React/6.ReactRouterDom/</url>
      
        <content type="html"><![CDATA[<h1 id="路由-ReactRouterDom"><a href="#路由-ReactRouterDom" class="headerlink" title="路由 ReactRouterDom"></a>路由 ReactRouterDom</h1><h2 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h2><blockquote><p>yarn add react-router-dom</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> React学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Immutable</title>
      <link href="/2018/10/01/React/5.Immutable/"/>
      <url>/2018/10/01/React/5.Immutable/</url>
      
        <content type="html"><![CDATA[<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="拆分-reducer"><a href="#拆分-reducer" class="headerlink" title="拆分 reducer"></a>拆分 reducer</h2><p>当Reducer中需要接收的action过多，且各个组件都有自己的action、reducer、constants时，可以将reducer.js分散到各个组件模块中。在总的reducer中使用 combineReducers ，将各个子reducer连接起来。</p><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/Reducer%E6%8B%86%E5%88%86.jpg" alt="拆分Reducer"></p><p>common/header</p><pre><code>- /store    /actionCreator.js    /constants.js    /reducer.js    /index.js- /index.js</code></pre><p>store<br>    /index.js<br>    /reducer.js</p><h2 id="Immutable-将state属性私有"><a href="#Immutable-将state属性私有" class="headerlink" title="Immutable 将state属性私有"></a>Immutable 将state属性私有</h2><p>在 Redux 的开发中，要求 store 中的 state，只能由其自己进行修改，因此我们可以使用Immutable 来对 state 进行封装。将其改为一个不可变对象。</p><p>只能通过操作 Immutable 提供的 get、set 方法来修改数据。</p><h3 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1. 引入依赖"></a>1. 引入依赖</h3><blockquote><p>yarn add immutable // 项目中添加 Immutable 依赖</p></blockquote><h3 id="2-将state转换为-Immutable-对象"><a href="#2-将state转换为-Immutable-对象" class="headerlink" title="2. 将state转换为 Immutable 对象"></a>2. 将state转换为 Immutable 对象</h3><p>在使用时，将state通过 Immutable 提供的 fromJS 方法进行包装。包装之后的state便无法再通过 . 属性的方式获取到值。非常类似 Java 中的封装。</p><p>下面是 Header 组件的 reducer.js：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">"Hello React !"</span><span class="token punctuation">,</span>    focused<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"aaa"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"bbb"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'focused'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-将子组件的-state-转换为-Immutable-对象"><a href="#3-将子组件的-state-转换为-Immutable-对象" class="headerlink" title="3. 将子组件的 state 转换为 Immutable 对象"></a>3. 将子组件的 state 转换为 Immutable 对象</h3><p>重点是将 combineReducers 方法，改为从 redux-immutalbe 中获取。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-immutable'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> reducer <span class="token keyword">as</span> headerReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../common/header/store"</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    header<span class="token punctuation">:</span> headerReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducers<span class="token punctuation">;</span></code></pre><h3 id="4-Header组件使用-state-header-value"><a href="#4-Header组件使用-state-header-value" class="headerlink" title="4. Header组件使用 state.header.value"></a>4. Header组件使用 state.header.value</h3><p>下面是使用 redux-saga 进行组件与 store 的连接，请查阅 <a href="www.xx.cc">Redux-Saga</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Header</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ......</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> state<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        focused<span class="token punctuation">:</span> state<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'focused'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        list<span class="token punctuation">:</span> state<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">...</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span>mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Header<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完整React配置</title>
      <link href="/2018/10/01/React/README/"/>
      <url>/2018/10/01/React/README/</url>
      
        <content type="html"><![CDATA[<h1 id="React-入门"><a href="#React-入门" class="headerlink" title="React 入门"></a>React 入门</h1><h2 id="一、初始化项目结构"><a href="#一、初始化项目结构" class="headerlink" title="一、初始化项目结构"></a>一、初始化项目结构</h2><h3 id="1-创建ReactApp"><a href="#1-创建ReactApp" class="headerlink" title="1. 创建ReactApp"></a>1. 创建ReactApp</h3><blockquote><p>create-react-app leetcode</p></blockquote><h3 id="2-引入其他可能用到的依赖"><a href="#2-引入其他可能用到的依赖" class="headerlink" title="2. 引入其他可能用到的依赖"></a>2. 引入其他可能用到的依赖</h3><blockquote><p>yarn add antd                 // Ant Design 设计库<br>yarn add redux                // Redux 数据层框架<br>yarn add react-redux          // React-Redux React更加方便集成Redux<br>yarn add redux-thunk          // Redux-Thunk 异步Action<br>yarn add axios                // Axios Http请求工具<br>yarn add react-router-dom     // ReactRouterDom 路由工具<br>yarn add immutable            // Immutable 封装工具，将store封装起来<br>yarn add redux-immutable      // ReactImmutable 子组件封装工具，将store的子reducer封装起来<br>yarn add styled-components    // StyledComponents 使用JS编写CSS样式<br>yarn add react-loadable       // 异步加载组件  </p></blockquote><h3 id="3-创建Redux中的Store，并使用Redux-DevelopTools"><a href="#3-创建Redux中的Store，并使用Redux-DevelopTools" class="headerlink" title="3. 创建Redux中的Store，并使用Redux-DevelopTools"></a>3. 创建Redux中的Store，并使用Redux-DevelopTools</h3><h4 id="3-1-在src目录下，创建store-reducer-js"><a href="#3-1-在src目录下，创建store-reducer-js" class="headerlink" title="3.1 在src目录下，创建store/reducer.js"></a>3.1 在src目录下，创建store/reducer.js</h4><p>defaultState 为默认的state，此文件导出一个函数，state为store中存储的内容，action为视图层发出的事件。</p><blockquote><p>需要先引入 redux。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>官方定义：Action 是把数据从应用（译者注：这里之所以不叫 view 是因为这些数据有可能是服务器响应，用户输入或其它非 view 的数据 ）传到 store 的有效载荷。<br>其格式大致为：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> <span class="token string">'ADD_TODO'</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过dispatch发送至store，再由具体的reducer对action进行处理，将修改之后的state返回给store，由store自己更新state。</p><h4 id="3-2-在src目录下，创建store-index-js"><a href="#3-2-在src目录下，创建store-index-js" class="headerlink" title="3.2 在src目录下，创建store/index.js"></a>3.2 在src目录下，创建store/index.js</h4><p>Store 就是把它们联系到一起的对象。Store 有以下职责：</p><ul><li>维持应用的 state；</li><li>提供 getState() 方法获取 state；</li><li>提供 dispatch(action) 方法更新 state；</li><li>通过 subscribe(listener) 注册监听器;</li><li>通过 subscribe(listener) 返回的函数注销监听器。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>    reducer<span class="token punctuation">,</span>    window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><blockquote><p>注：<code>window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</code> 为开启 Redux_Devtools<br>在使用其他中间件时，需要引入 applyMiddleware,下面会有 <a href="xxx">示例</a>。</p></blockquote><h4 id="3-3-测试store是否可用"><a href="#3-3-测试store是否可用" class="headerlink" title="3.3 测试store是否可用"></a>3.3 测试store是否可用</h4><p>第一步：在 reducer 的 defaultState 中加入一个属性 value</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">'Hello World!'</span><span class="token punctuation">}</span></code></pre><p>第二步：在任意组件引入 store/index.js，并获取到该value值。这里以 src/App.js 为例：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>      <span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>第三步：启动项目，访问首页即可看到 value 值。</p><h3 id="4-使用Immutable封装state"><a href="#4-使用Immutable封装state" class="headerlink" title="4. 使用Immutable封装state"></a>4. 使用Immutable封装state</h3><p>immutable 是 facebook 开源的一个项目，用于实现 js 中的数据不可变，解决引用带来的副作用。</p><p>非常类似Java中的封装特性，即将属性私有化，提供公有方法访问私有变量。</p><blockquote><p>需要先引入 immutable</p></blockquote><p>修改之前的 src/store/reducer.js，将 defaultState 使用 immutable 提供的 fromJS 方法进行封装。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">'Hello World!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>完成之后，也需要在调用 store.getState().value 的地方，将其改为 store.getState().get(‘value’)。如上面的 src/App.js：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>      <span class="token punctuation">{</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-拆分reducer，各组件分别管理各自的reducer"><a href="#5-拆分reducer，各组件分别管理各自的reducer" class="headerlink" title="5. 拆分reducer，各组件分别管理各自的reducer"></a>5. 拆分reducer，各组件分别管理各自的reducer</h3><blockquote><p>需要依赖 redux-immutable</p></blockquote><p>使用 redux 自身的 combineReducers 也可以做到管理子 reducer，如下：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> reducer <span class="token keyword">as</span> premiumReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../premium/store'</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    premium<span class="token punctuation">:</span> premiumReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducer<span class="token punctuation">;</span></code></pre><p>但是 combineReducers 只能处理普通的 JS 对象，而 Store 中的所有属性已经被 Immutable 封装，此时我们要想使用子 reducer 中的属性时，需要这样写 <code>store.getState().premium.get(&#39;value&#39;)</code> 的方式获取数据。</p><p>显然，premium 依然可以存在被修改的副作用。</p><p>因此，我们只需要将 combineReducers 改为从 <code>redux-immutable</code> 中导入即可。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-immutable'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> reducer <span class="token keyword">as</span> premiumReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../premium/store'</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    premium<span class="token punctuation">:</span> premiumReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducer<span class="token punctuation">;</span></code></pre><p>获取数据的方式也会变为：<code>store.getState().getIn([&#39;premium&#39;,&#39;value&#39;])</code></p><h3 id="6-增加Router路由功能"><a href="#6-增加Router路由功能" class="headerlink" title="6. 增加Router路由功能"></a>6. 增加Router路由功能</h3><blockquote><p>需要依赖 react-router-dom</p></blockquote><p>第一步：创建另一个组件 src/premium/index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Premium</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>Premium page<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Premium<span class="token punctuation">;</span></code></pre><p>第二步：修改App.js，将其改为Router.js</p><p>定义两个路由， ‘/‘ 直接返回一个 Div dom；’/premium’ 返回刚刚创建的组件。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Premium <span class="token keyword">from</span> <span class="token string">'./premium'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/'</span> exact render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Home Page<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/premium'</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>Premium<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Router<span class="token punctuation">;</span></code></pre><p>同时，src/index.js 也需要将 App 组件名换成 Router。</p><p>第三步：测试路由功能是否有效</p><p>启动项目，分别访问 <code>localhost:3000</code> 和 <code>localhost:3000/premium</code> 即可。</p><h3 id="7-使用React-Redux控制Store"><a href="#7-使用React-Redux控制Store" class="headerlink" title="7. 使用React-Redux控制Store"></a>7. 使用React-Redux控制Store</h3><p>通过 React-Redux 提供的 <code>&lt;Provider store&gt;</code> 标签，使 Provider 内的任何组件，都能够有权利使用 store 中的数据。</p><p>前提是组件需要先通过 connect 进行连接。</p><blockquote><p>需要依赖 react-redux</p></blockquote><h4 id="7-1-修改-Router-js-原App-js"><a href="#7-1-修改-Router-js-原App-js" class="headerlink" title="7.1 修改 Router.js (原App.js)"></a>7.1 修改 Router.js (原App.js)</h4><p>将需要用到 store 存储的组件，放在 Provider 标签内。并指定所使用的 store</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Premium <span class="token keyword">from</span> <span class="token string">'./premium'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>BrowserRouter<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/'</span> exact render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Home Page<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">'/premium'</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>Premium<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>BrowserRouter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Router<span class="token punctuation">;</span></code></pre><h4 id="7-2-修改-premium-index-js"><a href="#7-2-修改-premium-index-js" class="headerlink" title="7.2 修改 premium/index.js"></a>7.2 修改 premium/index.js</h4><p>Premium 组件，使用 connect 进行连接。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Premium</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> state<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'premium'</span><span class="token punctuation">,</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Premium<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="7-3-connect-mapState-mapDispatch-module"><a href="#7-3-connect-mapState-mapDispatch-module" class="headerlink" title="7.3 connect(mapState,mapDispatch)(module)"></a>7.3 connect(mapState,mapDispatch)(module)</h4><p>mapStateToProps 函数，接收一个 state，即 store 中存储的 state，返回一个对象。该对象即组件的 props。<br>所以可以理解为，mapStateToProps 将 store 中的数据存入 this.props 中。</p><p>mapDispatchToProps 函数，接收一个dispatch，用来派发 action 给 store。由 reducer 接收并处理 action。</p><p>module 即需要进行连接的组件。</p><h3 id="8-测试State与Action"><a href="#8-测试State与Action" class="headerlink" title="8. 测试State与Action"></a>8. 测试State与Action</h3><p>一个简单的测试，使用一个input，值为store中的value，当input修改时，发送action修改store中的value，与此同时更改input的value。</p><p>依旧使用 /premium/store/reducer 中的 value 作为测试数据。</p><h4 id="8-1-修改-premium-index-js"><a href="#8-1-修改-premium-index-js" class="headerlink" title="8.1 修改 premium/index.js"></a>8.1 修改 premium/index.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Premium</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> value<span class="token punctuation">,</span> changeInputValue <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>input                value<span class="token operator">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span>                onChange<span class="token operator">=</span><span class="token punctuation">{</span>changeInputValue<span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> state<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'premium'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">changeInputValue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">{</span>          type<span class="token punctuation">:</span> <span class="token string">'CHANGE_INPUT_VALUE'</span><span class="token punctuation">,</span>          value<span class="token punctuation">:</span> value        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Premium<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="8-2-修改-premium-store-reducer-js"><a href="#8-2-修改-premium-store-reducer-js" class="headerlink" title="8.2 修改 premium/store/reducer.js"></a>8.2 修改 premium/store/reducer.js</h4><p>reducer.js 接收action，并进行处理，修改 store 中存储的 state 属性。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token string">'Hello World!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'CHANGE_INPUT_VALUE'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> action<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="8-3-测试"><a href="#8-3-测试" class="headerlink" title="8.3 测试"></a>8.3 测试</h4><p>启动项目，并打开 Redux DevTools 控制台，更改 input 内容，观察 state 中的数据变动。</p><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/ReduxDevTools.png" alt="Redux DevTools"></p><h3 id="9-Redux-Thunk-异步加载数据"><a href="#9-Redux-Thunk-异步加载数据" class="headerlink" title="9. Redux-Thunk 异步加载数据"></a>9. Redux-Thunk 异步加载数据</h3><p>当某一时刻触发的事件，需要从后端接口请求数据渲染页面时。可以通过 Redux-Thunk 使 Action 支持异步函数(原 Action 只是返回一个带 type 属性的对象)。</p><blockquote><p>需要依赖 redux-thunk</p></blockquote><h4 id="9-1-添加-Redux-Thunk-中间件"><a href="#9-1-添加-Redux-Thunk-中间件" class="headerlink" title="9.1 添加 Redux-Thunk 中间件"></a>9.1 添加 Redux-Thunk 中间件</h4><p>在 Redux 的 Store 创建时，引入 thunk 中间件，并使用它。</p><p>配置方法来源于 <a href="https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup" target="_blank" rel="noopener">github：redux-devtools-extension</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token punctuation">;</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token punctuation">;</span><span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ <span class="token operator">||</span> compose<span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>    reducer<span class="token punctuation">,</span>    <span class="token function">composeEnhancers</span><span class="token punctuation">(</span>        <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><h4 id="9-2-Mock数据-public-api-list-json"><a href="#9-2-Mock数据-public-api-list-json" class="headerlink" title="9.2 Mock数据 /public/api/list.json"></a>9.2 Mock数据 /public/api/list.json</h4><p>在 src 同级的 public 目录下创建文件 <code>/public/api/list.json</code>：</p><p>如果能使用后端语言直接返回也可以</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"success"</span><span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"刘六"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="9-3-修改-premium-index-js，发送ajax请求，获取list-json"><a href="#9-3-修改-premium-index-js，发送ajax请求，获取list-json" class="headerlink" title="9.3 修改 premium/index.js，发送ajax请求，获取list.json"></a>9.3 修改 premium/index.js，发送ajax请求，获取list.json</h4><blockquote><p>需要依赖 axios</p></blockquote><p>点击 <code>获取数据</code> 的按钮时，触发事件 getList。获取ajax请求，并生成一个 action 发送给 store，替换 reducer 中的 list。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> fromJS <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'immutable'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Premium</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> list<span class="token punctuation">,</span> getList <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>getList<span class="token punctuation">}</span><span class="token operator">></span>获取数据<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>            <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>            <span class="token punctuation">{</span>                list <span class="token operator">&amp;&amp;</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    list<span class="token punctuation">:</span> state<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'premium'</span><span class="token punctuation">,</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/list.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> list <span class="token operator">=</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token keyword">const</span> action2 <span class="token operator">=</span> <span class="token punctuation">{</span>                    type<span class="token punctuation">:</span> <span class="token string">'UPDATE_LIST'</span><span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 注意这里：因为store中的数据是Immutable类型的，所以其属性也应该是Immutable类型的</span>                    list<span class="token punctuation">:</span> <span class="token function">fromJS</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token function">dispatch</span><span class="token punctuation">(</span>action2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Premium<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>因为前面配置了 Redux-Thunk 中间件，所以 action 能够直接返回一个函数，并且在dispatch 时自动执行。</p></blockquote><h4 id="9-4-premium-store-reducer支持UPDATE-LIST的Action"><a href="#9-4-premium-store-reducer支持UPDATE-LIST的Action" class="headerlink" title="9.4 premium/store/reducer支持UPDATE_LIST的Action"></a>9.4 premium/store/reducer支持UPDATE_LIST的Action</h4><p>reducer 接收action，并将值设置到state中。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token function">fromJS</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'UPDATE_LIST'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span>action<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="9-5-测试ajax异步获取数据"><a href="#9-5-测试ajax异步获取数据" class="headerlink" title="9.5 测试ajax异步获取数据"></a>9.5 测试ajax异步获取数据</h4><p>启动项目，点击 button 按钮。页面会显示 list.json 中的数据。</p><h3 id="10-优化Redux层"><a href="#10-优化Redux层" class="headerlink" title="10. 优化Redux层"></a>10. 优化Redux层</h3><h4 id="10-1-将常量抽离"><a href="#10-1-将常量抽离" class="headerlink" title="10.1 将常量抽离"></a>10.1 将常量抽离</h4><p>将 premium/reducer.js 和 /premium/index.js 中 action.type 属性，抽离为一个单独的文件，在使用时直接调用该常量文件进行获取。方便进行调试和代码报错排查。</p><h4 id="10-2-将Action的创建抽离"><a href="#10-2-将Action的创建抽离" class="headerlink" title="10.2 将Action的创建抽离"></a>10.2 将Action的创建抽离</h4><p>将 premium/index.js 中所有 action 的创建，抽离到一个 ActionCreator.js 中。</p><h4 id="10-3-将抽离之后的文件统一管理"><a href="#10-3-将抽离之后的文件统一管理" class="headerlink" title="10.3 将抽离之后的文件统一管理"></a>10.3 将抽离之后的文件统一管理</h4><p>抽离之后的文件大致分为如下：</p><ul><li>public<ol><li>api<ul><li>list.json     // 测试ajax请求的数据</li></ul></li><li>favicon.ico</li><li>index.html</li><li>mainifest.json</li></ol></li><li>src<ol><li>premium<ol><li>store<ul><li>actionCreator.js  // 管理Action的创建</li><li>constants.js      // 管理常量</li><li>reducer.js        // 处理action</li><li>index.js          // 将上面三个文件导出</li></ul></li><li>index.js         // 首页</li><li>style.js</li></ol></li><li>store             // redux的存储层、redux-thunk、redux-devtools的配置<ol><li>index.js         // 使用当前目录下的reducer创建store</li><li>reducer.js       // react-redux 引入组件的store/index.js，并管理子reducer</li></ol></li><li>index.js          // React 项目的入口</li><li>index.css</li><li>router.js         // 路由文件，包含store作用域的限制、路由的配置</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> React学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactRedux</title>
      <link href="/2018/10/01/React/4.ReactRedux/"/>
      <url>/2018/10/01/React/4.ReactRedux/</url>
      
        <content type="html"><![CDATA[<h1 id="React-Redux-入门"><a href="#React-Redux-入门" class="headerlink" title="React-Redux 入门"></a>React-Redux 入门</h1><p>以下内容来源于 <img src="https://react-redux.js.org/introduction/quick-start" alt="React-Redux官网"></p><p>使用 React-Redux + Redux-saga 重构 TodoList</p><ol><li>新增 Redux 依赖</li><li>设置 Redux store</li><li>添加 React-Redux 依赖</li></ol><h2 id="一、使用Provider标签"><a href="#一、使用Provider标签" class="headerlink" title="一、使用Provider标签"></a>一、使用Provider标签</h2><p>React Redux 提供了 <code>&lt;Provider/&gt;</code> 标签，使Redux Store 可以用于被包含的程序组件内。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">,</span>  rootElement<span class="token punctuation">)</span></code></pre><h2 id="二、组件连接Store"><a href="#二、组件连接Store" class="headerlink" title="二、组件连接Store"></a>二、组件连接Store</h2><p>React Redux 提供了 connect 将组件连接到 store。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> reset <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actionCreators'</span><span class="token comment" spellcheck="true">// const Counter = ...</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token comment" spellcheck="true">/*, ownProps*/</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement<span class="token punctuation">,</span> reset <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span>  mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Counter<span class="token punctuation">)</span></code></pre><h2 id="三、拆分Reducer-js"><a href="#三、拆分Reducer-js" class="headerlink" title="三、拆分Reducer.js"></a>三、拆分Reducer.js</h2><p>当Reducer中需要接收的action过多，且各个组件都有自己的action、reducer、constants时，可以将reducer.js分散到各个组件模块中。在总的reducer中使用 combineReducers ，将各个子reducer连接起来。</p>]]></content>
      
      
      <categories>
          
          <category> React学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReduxThunk</title>
      <link href="/2018/10/01/React/3.ReduxThunk/"/>
      <url>/2018/10/01/React/3.ReduxThunk/</url>
      
        <content type="html"><![CDATA[<h1 id="ReduxThunk"><a href="#ReduxThunk" class="headerlink" title="ReduxThunk"></a>ReduxThunk</h1><p>Redux Thunk 可以使 Redux 的 Action 不只是返回对象，也可以是一个函数。该函数在 Component 执行 dispatch(atcion) 时会自动执行。<br>使用原因：使用 Redux Thunk 替换在组件生命周期函数中，使用异步函数的问题。<br>解决因生命周期函数所需执行的内容过多问题。</p><h2 id="Redux-Data-Flow"><a href="#Redux-Data-Flow" class="headerlink" title="Redux Data Flow"></a>Redux Data Flow</h2><p>Redux的数据流程图：</p><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/ReduxDataFlow.jpg" alt="Redux Data Flow"></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><blockquote><p>yarn add redux-thunk</p></blockquote><h2 id="Redux使用Redux-thunk中间件"><a href="#Redux使用Redux-thunk中间件" class="headerlink" title="Redux使用Redux-thunk中间件"></a>Redux使用Redux-thunk中间件</h2><p>在创建 Redux 的 Store 时，应用所需使用的中间件。<br><a href="https://github.com/reduxjs/redux-thunk#installation" target="_blank" rel="noopener">来源于github:redux-thunk</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token punctuation">;</span><span class="token keyword">import</span> rootReducer <span class="token keyword">from</span> <span class="token string">'./reducers/index'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Note: this API requires redux@>=3.1.0</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>  rootReducer<span class="token punctuation">,</span>  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果需要使用多个中间件，这里使用 Redux-DevTools 和 Redux-Thunk 两个中间件做演示，请使用下面的方式：<br><a href="https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup" target="_blank" rel="noopener">来源于github:redux-devtools-extension</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware<span class="token punctuation">,</span> compose <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token punctuation">;</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token punctuation">;</span><span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span>    <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>        window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ <span class="token operator">?</span>        window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> compose<span class="token punctuation">;</span><span class="token keyword">const</span> enhancer <span class="token operator">=</span> <span class="token function">composeEnhancers</span><span class="token punctuation">(</span>    <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 如果有其他中间件，可以在这里引入</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>    reducer<span class="token punctuation">,</span>    enhancer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux入门</title>
      <link href="/2018/10/01/React/2.ReduxFlow/"/>
      <url>/2018/10/01/React/2.ReduxFlow/</url>
      
        <content type="html"><![CDATA[<h1 id="Redux-入门"><a href="#Redux-入门" class="headerlink" title="Redux 入门"></a>Redux 入门</h1><p>使用Redux重构之前的TodoList，使用全局state来实现。</p><h2 id="Redux-Flow"><a href="#Redux-Flow" class="headerlink" title="Redux Flow"></a>Redux Flow</h2><p>Redux的工作流：<br><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/ReduxFlow.jpg" alt="Redux Flow"></p><h2 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h2><p>需要先引入Ant Design和 Redux</p><blockquote><p>yarn add antd<br>yarn add redux</p></blockquote><h2 id="二、创建全局Store"><a href="#二、创建全局Store" class="headerlink" title="二、创建全局Store"></a>二、创建全局Store</h2><p>第一步：创建 store/reducer.js<br>reducer必须返回一个函数，state参数为存储的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// state默认值</span>    inputValue<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二步：创建 store/index.js<br>使用redux的 createStore 方法，使用之前创建的reducer作为参数，创建一个store</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><h2 id="使用与修改"><a href="#使用与修改" class="headerlink" title="使用与修改"></a>使用与修改</h2><p>一：使用redux的公共存储</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store/index.js'</span><span class="token comment" spellcheck="true">// import store from './store' // 可以缩写为这样</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接能打印出store中的内容</span></code></pre><p>二：修改redux中的内容</p><p>注意：redux的reducer只支持读取state，而不支持修改state。如果需要修改，请深拷贝原有state，修改新的newState，并将newState返回。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>    inputValue<span class="token punctuation">:</span> <span class="token string">'Hello React !'</span><span class="token punctuation">,</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"1111"</span><span class="token punctuation">,</span><span class="token string">"2222"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'change_input_value'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'add_list_item'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'del_list_item'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>三、监听store内容的修改</p><pre class=" language-js"><code class="language-js">    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span>    <span class="token function">handleStoreChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="整体使用如下："><a href="#整体使用如下：" class="headerlink" title="整体使用如下："></a>整体使用如下：</h2><h3 id="src-TodoList-js"><a href="#src-TodoList-js" class="headerlink" title="src/TodoList.js"></a>src/TodoList.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'antd/dist/antd.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Input<span class="token punctuation">,</span> Button<span class="token punctuation">,</span>List <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>    getInputChangeAction<span class="token punctuation">,</span>    getAddItemAction<span class="token punctuation">,</span>    getDeleteItemAction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store/actionCreator'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TodoList</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleDeleteItem<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleStoreChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginTop<span class="token punctuation">:</span> <span class="token string">'10px'</span><span class="token punctuation">,</span> marginLeft<span class="token punctuation">:</span> <span class="token string">'10px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Input                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token string">'300px'</span><span class="token punctuation">,</span> marginRight<span class="token punctuation">:</span> <span class="token string">'10px'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>                    value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span>                    onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span>                <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">'primary'</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleBtnClick<span class="token punctuation">}</span><span class="token operator">></span>æ��äº¤<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>                <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>List                    style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token string">'300px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>                    bordered                    dataSource<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>list<span class="token punctuation">}</span>                    renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>                        <span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleDeleteItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span>                    <span class="token punctuation">)</span><span class="token punctuation">}</span>                <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">handleInputChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getInputChangeAction</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">handleStoreChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">handleBtnClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getAddItemAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">handleDeleteItem</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> action <span class="token operator">=</span> <span class="token function">getDeleteItemAction</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TodoList<span class="token punctuation">;</span></code></pre><h3 id="src-store-index-js"><a href="#src-store-index-js" class="headerlink" title="src/store/index.js"></a>src/store/index.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">'./reducer'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>    reducer<span class="token punctuation">,</span>    window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION__ <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">__REDUX_DEVTOOLS_EXTENSION__</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><h3 id="src-store-reducer-js"><a href="#src-store-reducer-js" class="headerlink" title="src/store/reducer.js"></a>src/store/reducer.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>    inputValue<span class="token punctuation">:</span> <span class="token string">'Hello React !'</span><span class="token punctuation">,</span>    list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"1111"</span><span class="token punctuation">,</span><span class="token string">"2222"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'change_input_value'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> action<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'add_list_item'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>inputValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'del_list_item'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">const</span> newState <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newState<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="src-store-actionTypes-js"><a href="#src-store-actionTypes-js" class="headerlink" title="src/store/actionTypes.js"></a>src/store/actionTypes.js</h3><p>将所有的 Action 类型提取为常量，统一管理。方便调试与代码定位。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_INPUT_VALUE <span class="token operator">=</span> <span class="token string">'change_input_value'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD_LIST_ITEM <span class="token operator">=</span> <span class="token string">'add_list_item'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> DEL_LIST_ITEM <span class="token operator">=</span> <span class="token string">'del_list_item'</span><span class="token punctuation">;</span></code></pre><h3 id="src-store-actionCreator-js"><a href="#src-store-actionCreator-js" class="headerlink" title="src/store/actionCreator.js"></a>src/store/actionCreator.js</h3><p>将 Action 的创建统一管理，使用 Creator 提供创建 Action 的方法。使流程更加清晰</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>     CHANGE_INPUT_VALUE<span class="token punctuation">,</span>    ADD_LIST_ITEM<span class="token punctuation">,</span>    DEL_LIST_ITEM<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./actionTypes'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getInputChangeAction <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span> CHANGE_INPUT_VALUE<span class="token punctuation">,</span>    value<span class="token punctuation">:</span> value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getAddItemAction <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span> ADD_LIST_ITEM<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getDeleteItemAction <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span> DEL_LIST_ITEM<span class="token punctuation">,</span>    index<span class="token punctuation">:</span> index<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React入门</title>
      <link href="/2018/10/01/React/1.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/10/01/React/1.%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="React入门"><a href="#React入门" class="headerlink" title="React入门"></a>React入门</h1><p>父组件向子组件传值：父组件可以通过向子组件传递属性，子组件通过props拿到该属性。<br>子组件向父组件传值：父组件先 将操作元素的方法 传递给子组件，子组件通过props调用父组件的方法。</p><p>单向数据流：子组件只能读取父组件传递的属性，不能修改父组件的属性。</p><p>当组件的state或props发生改变时，render函数就会重新执行</p><p>React对性能的提升：<br>    使用虚拟DOM的方式来渲染页面，当组件的state和props发生改变时，会重新调用一次组件的render方法，重新生成一次页面。如果是直接使用新的DOM替换旧的DOM，非常损耗性能。而使用虚拟DOM可以极大地提升性能。</p><p>React的虚拟DOM的流程：</p><pre><code>1. state 数据2. JSX 模板3. 数据 + 模板 生成虚拟DOM    1. `[&#39;div&#39;, {id :&#39;abc&#39;}, [&#39;span&#39;,{},&#39;hello&#39;]]`4. 使用虚拟DOM 生成真实的DOM    1. `&lt;div id=&#39;abc&#39;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt;`5. 数据(state、props)发生了改变6. 数据 + 模板 生成新的虚拟DOM    1. `[&#39;div&#39;, {id :&#39;abc&#39;}, [&#39;span&#39;,{},&#39;bye bye&#39;]]`7. 比较新的虚拟DOM 和原有的虚拟DOM，找出差异处    1. Diff 算法：    2. 将多个setState合为一个setState渲染    3. 逐层比较，类似于异或    4. 列表循环时，key值要保持稳定8. 使用新的虚拟DOM重新渲染差异处</code></pre><p>优点：</p><pre><code>1. 极大地提升了性能    1. 将直接生成真实DOM，改为先生成虚拟DOM，再通过虚拟DOM生成真实DOM    2. 降低比较真实DOM的损耗，改为直接比较虚拟DOM    3. 从直接渲染新的真实DOM，改为先比较虚拟DOM    4. 使用虚拟DOM的差异重新渲染数据2. 使跨端应用得以实现（如React Native）    1. 在第三步生成虚拟DOM之后，可以通过虚拟DOM生成如Android、IOS可使用的组件</code></pre><h2 id="React生命周期函数"><a href="#React生命周期函数" class="headerlink" title="React生命周期函数"></a>React生命周期函数</h2><p>在某一时刻，自动执行的函数</p><ol><li>Initialization 初始化阶段<ol><li>constructor</li></ol></li><li>Mounting 挂载阶段<ol><li>componentWillMount 组件被挂载前，自动执行</li><li>render 组件挂载时，自动执行</li><li>componentDidMount 组件挂载完成时，自动执行</li></ol></li><li>Updation 数据更新阶段<ol><li>props 属性更新<ol><li>componentWillReceiveProps 子组件重新接受Props时，自动执行</li><li>shouldComponentUpdate 重新渲染render前，自动执行，且影响render是否执行</li><li>componentWillUpdate 组件将被更新前、shouldComponentUpdate后，自动执行</li><li>render</li><li>componentDidUpdate 组件更新之后，自动执行</li></ol></li><li>states 状态更新<ol><li>shouldComponentUpdate 重新渲染render前，自动执行，且影响render是否执行</li><li>componentWillUpdate 组件将被更新前、shouldComponentUpdate后，自动执行</li><li>render</li><li>componentDidUpdate 组件更新之后，自动执行</li></ol></li></ol></li><li>Unmounting 移除挂载阶段<ol><li>componentWillUnmount 子组件将被移除前，自动执行</li></ol></li></ol><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>新增依赖</p><blockquote><p>yarn add axios</p></blockquote><h3 id="Charles-Mock数据"><a href="#Charles-Mock数据" class="headerlink" title="Charles Mock数据"></a>Charles Mock数据</h3><p>使用Charles进行数据的Mock</p><h2 id="Ant-Design"><a href="#Ant-Design" class="headerlink" title="Ant Design"></a>Ant Design</h2><p>使用 <code>Ant Design</code> 重构代码样式布局。</p><blockquote><p>yarn add antd // 新增ant design依赖</p></blockquote><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>详见 ReduxFlow</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>普通组件、UI组件、容器组件、无状态组件</p>]]></content>
      
      
      <categories>
          
          <category> React学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot QA</title>
      <link href="/2018/09/30/SpringBoot/SpringBoot/"/>
      <url>/2018/09/30/SpringBoot/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="1-RestController-和-Controller"><a href="#1-RestController-和-Controller" class="headerlink" title="1. @RestController 和 @Controller"></a>1. @RestController 和 @Controller</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token operator">:</span> 将所有返回的结果以字符串形式返回<span class="token annotation punctuation">@Controller</span> ：返回结果由视图解析器返回视图</code></pre><h2 id="2-SpringBootApplication"><a href="#2-SpringBootApplication" class="headerlink" title="2. @SpringBootApplication"></a>2. @SpringBootApplication</h2><blockquote><p>是SpringBoot的核心注解，目的是开启自动配置。</p></blockquote><p>关闭自动配置：@SpringBootApplication(exclude={DataSourceAutoConfiguration.class})</p><p>运行原理：相当于是以下注解的集合：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>Element<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documentd</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>EnableAutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>AutoConfigurationPackages<span class="token punctuation">.</span>Register<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="3-Thymeleaf模板引擎-同Freemarker"><a href="#3-Thymeleaf模板引擎-同Freemarker" class="headerlink" title="3. Thymeleaf模板引擎(同Freemarker)"></a>3. Thymeleaf模板引擎(同Freemarker)</h2><ol><li>通过 <code>xmlns:th=http://www.thymeleaf.org</code> 命名空间，转换位动态视图；</li><li>使用 <code>“@{}”</code> 方式引用web静态资源</li><li>通过“${}”访问model中的属性，如：<span th:text="${singlePerson.name}"></span><br>注：需要处理的动态内容需要加上“th：”前缀</li><li>迭代：使用“th：each”，如：th:each=”person:${person}”  其中person作为迭代元素使用</li><li>数据判断： <code>th:if=&quot;${not #lists.isEmpty(people)}&quot;</code></li><li>js中访问model  </li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script th<span class="token punctuation">:</span>inline<span class="token operator">=</span><span class="token string">"javascript"</span><span class="token operator">></span>     <span class="token keyword">var</span> singlePerson<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>singlePerson<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>script<span class="token operator">></span></code></pre><blockquote><p>使用 <code>th:inline=&quot;javascript&quot;</code> 使js能够访问model<br>通过[[${}]]获取实际的值</p></blockquote><h2 id="4-注册Servlet、Filter、Listener"><a href="#4-注册Servlet、Filter、Listener" class="headerlink" title="4. 注册Servlet、Filter、Listener"></a>4. 注册Servlet、Filter、Listener</h2><p>Servlet:ServletRegistrationBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletRegistrationBean <span class="token function">serbletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//直接注册servlet及其请求路径</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XXServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/xx/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Filter:FilterRegisterationBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> FilterRegisterationBean <span class="token function">filterRegisterationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置过滤器</span>    FilterRegisterationBean filterRegisterationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">filterRegisterationBean<span class="token punctuation">.</span>setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">YYFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行顺序  </span>    filterRegisterationBean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterRegisterationBean<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"MyFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置名称</span>    filterRegisterationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置过滤路径</span>    <span class="token keyword">return</span> filterRegisterationBean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Listener:ServletListenerRegisterationBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ServletListenerRegisterationBean<span class="token operator">&lt;</span>ZZListener<span class="token operator">></span> <span class="token function">servletListenerRegisterationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegisterationBean</span><span class="token operator">&lt;</span>ZZListener<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZZListener</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-修改tomcat、jetty、undertow"><a href="#5-修改tomcat、jetty、undertow" class="headerlink" title="5.修改tomcat、jetty、undertow"></a>5.修改tomcat、jetty、undertow</h2><p>直接在pom文件中，修改依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>     <span class="token operator">&lt;</span>exclusions<span class="token operator">></span>        <span class="token operator">&lt;</span>exclusion<span class="token operator">></span>          <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span> <span class="token comment" spellcheck="true">//将web对应的服务器修改为其它</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>exclusion<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>exclusions<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.5</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>tomcat<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.5</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">.</span>RELEASE<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="6-WebSocket"><a href="#6-WebSocket" class="headerlink" title="6. WebSocket"></a>6. WebSocket</h2><h3 id="1-websocket的配置"><a href="#1-websocket的配置" class="headerlink" title="1. websocket的配置"></a>1. websocket的配置</h3><ol><li>使用@Configuration及@EnableWebSocketMessageBroker  来开启WebSocket支持</li><li>继承AbstratWebSocketMessageBrokerConfigurer类<ol><li>重写 <code>registerStomEndpoint(StomEndpointRegister)</code> 与 <code>configureMessageBroker(essageBrokerRegistry)</code> 方法</li><li><code>Sregistry.addEndpoint(&quot;/endpointWisely&quot;).withSockJS()</code>;  即通过endpointWisely连接SockJs</li><li>Mregistry.enableSimpleBroker(“/topic”);  配置一个topic消息代理</li></ol></li></ol><h3 id="2-wscontroller"><a href="#2-wscontroller" class="headerlink" title="2. wscontroller"></a>2. wscontroller</h3><p>@MessageMapping(“/welcome”) 同RequestMapping,映射地址</p><p>@SendTo(“/topic/getResponse”) 当服务端有消息时，会对订阅了”/topic/getResponse”的客户端发送消息</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> WiselyResponse <span class="token function">say</span><span class="token punctuation">(</span>WiselyMessage message<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WiselyResponse</span><span class="token punctuation">(</span><span class="token string">"Welcome "</span> <span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ! "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  返回发送的消息<span class="token punctuation">}</span></code></pre><h3 id="3-ws-html"><a href="#3-ws-html" class="headerlink" title="3. ws.html"></a>3. ws.html</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//连接并订阅</span><span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SockJS</span><span class="token punctuation">(</span><span class="token string">'/endpointWisely'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//连接名称为“。。。”的endpoint</span><span class="token keyword">var</span> stompClient <span class="token operator">=</span> Stomp<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//使用stomp子协议</span>    stompClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>        stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'topic/getResponse'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//订阅</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自定义的展示方法</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>stompClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"/welcome"</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span>name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//发送消息</span></code></pre><h2 id="7-Spring-Data-JPA"><a href="#7-Spring-Data-JPA" class="headerlink" title="7.Spring Data JPA"></a>7.Spring Data JPA</h2><h3 id="1-EnableJpaRepositories"><a href="#1-EnableJpaRepositories" class="headerlink" title="1. @EnableJpaRepositories"></a>1. @EnableJpaRepositories</h3><pre><code>使用@EnableJpaRepositories(&quot;com.wisely.repos&quot;)来开启Spring Data JPA支持 其中的value参数用来扫描数据访问层所在包下的数据访问的接口定义</code></pre><h3 id="2-定义查询方法"><a href="#2-定义查询方法" class="headerlink" title="2. 定义查询方法"></a>2. 定义查询方法</h3><blockquote><p><code>常规查询</code> ：find、read、readBy、query、queryBy、get、getBy<br><code>查询关键字</code> ：And(和)、Or(或)、Is = Equals(等)、Between(位于之间)、LessThan(小于)、LessThanEqual(小于等于)<br>GreaterThan(大于)、GreaterThanEqual(大于等于)、After(日期大于)、Before(日期之前)<br>IsNull、IsNotNull = NotNull、Like、Not Like、Starting With(前面加%)<br>EndingWith(后面加%)、Containing(前后都加%)、OrderBy(排序)、Not、In<br>NotIn、True、False、IgnoreCase<br><code>限制查询结果</code> ：Top、First<br><code>@NamedQuery</code> : 一个名称映射一个查询语句<br>    eg:    @NamedQuery(name = “Person.findByName”,query = “select p from Person p where p.name=?1”)<br>        写在实体类名上<br>@Query查询<br>    直接在@Query的value中书写sql语句，参数可以使用索引(“?1”)或者命名(“:name”)<br>更新查询：使用@Modifying 和 @Query 来组合更新查询</p></blockquote><h3 id="3-排序与分页"><a href="#3-排序与分页" class="headerlink" title="3. 排序与分页"></a>3. 排序与分页</h3><pre><code>Sort排序对象：     List&lt;Person&gt; findByName(String name,Sort sort);Pageable对象：    List&lt;Person&gt; findByName(String name,Pageable pageable);使用：    List&lt;Person&gt; persons = personRepository.findByName(&quot;xx&quot;,new Sort(Direction.ASC,&quot;age&quot;));        List&lt;Person&gt; persons = personRepository.findByName(&quot;xx&quot;,new Pageable(0,10));</code></pre><h3 id="4-repository默认的方法："><a href="#4-repository默认的方法：" class="headerlink" title="4. repository默认的方法："></a>4. repository默认的方法：</h3><pre><code>save()    保存；        findAll()    查询所有；        findAll(new Sort(Sort.Direction.ASC,&quot;age&quot;))        排序查询所有；findAll(new PageRequest(0,10))        分页查询；findAll(new PageRequest(1,2,new Sort(Sort.Direction.DESC,&quot;age&quot;)))    分页排序</code></pre><h2 id="8-SpringBoot的注解式事务-Transactional"><a href="#8-SpringBoot的注解式事务-Transactional" class="headerlink" title="8.SpringBoot的注解式事务  @Transactional"></a>8.SpringBoot的注解式事务  @Transactional</h2><pre><code>属性：    1.propagation 定义事务的生命周期        REQUIRED             如果没有事务则新建        REQUIRED_NEW        始终开启新事务        SUPPORTS            有就用，没有就不用        NESTED                类似于REQUIRED_NEW，但是不支持jps与hibernate        NOT_SUPPORTS        不在事务中执行        NEVER                强制不在事务中执行，有事务则抛出异常        MANDATORY            强制在事务中执行，没有则抛出异常    2.isolation  事务的隔离机制，决定了事务的完整性        READ_UNCOMMITED      读不提交(脏读、幻读、不可重复读)        READ_COMMITED        读提交(不可重复读和幻读)，解决脏读        REPEATABLE_READ        A读取某条数据时，B不许修改(幻读)        SERIALIZABLE        序列化    3.timeout    事务过期时间    4.readOnly    指当前事务是否是只读事务    5.rollbackFor    指定哪个异常会回滚    6.noRollBackFor    指定哪个异常不会回滚</code></pre><p>1.@GetMapping注解：相当于 @RequestMapping(Method=RequestMethod.GET)<br>    该注解将HTTP GET映射到特定的方法上<br>2.@RequestParam注解：将Request参数绑定到处理函数的参数中<br>    如：public String getUserId(@RequestParam(“id”) int id); 这样就可以将localhost:8080/?id=123中的id参数赋给方法中的id<br>3.@JsonIgnoreProperties(ignoreUnknown = true)<br>    将这个注解卸载类上之后，就会忽略类中不存在的字段<br>    使用@JsonIgnoreProperties({“internalId”,”secretKey”})指定的字段不会被序列化和反序列化<br>4.数据校验<br>    1.在实体类的属性前添加如：@NotEmpty、@Min(value=18,message=”未成年禁止入内”)等<br>    2.在Controller层的方法，要校验的参数上添加@Valid注解<br>        如果需要返回错误信息，则需要传入BindingResult对象，用于获取校验失败情况下的反馈信息<br>5.ModelMapper对象<br>    一个从对象到对象的框架，能将javaBean对象从一种表现形式转化为另一种表现形式，采用“约定”来配置<br>    eg:        Person person = modelMapper.map(personDTO,Person.class);            //将PersonDTO的对象，转换成Person对象<br>            Person personInDB = personService.getById(userId,PersonDTO.getId())    //在service层对userid和person.id做了处理，从数据库取出person.id对应的Person，userid则是权限判断<br>            return modelMapper.map(personService.save(userId,person),PersonDTO.class);    //再将保存返回的person转为personDTO<br>6.@PathVariable注解<br>    可以绑定占位符传过来的值到方法的参数上<br>7.@RequestMapping的变形<br>    @GetMapping、@PostMapping、@PutMapping、@DeleteMapping<br>8.@RequestParam和@PathVariable的区别<br>    1.@RequestParam和@PathVariable都是从request中接收请求的，都可以接收参数<br>    2.@RequestParam  支持defaultValue（默认值）、name、value、required参数<br>    3.@PathVariable  能够识别URL里面的一个模板 eg:@RequestMapping(“/hello/{id}”)<br>    4.@PathParam     同@PathVariable，但是属于JBoss的<br>    5.@QueryParam     同@RequestParam,属于JAX-RS<br>    6.@ResponseBody  服务器返回的时候以一种什么样的方式进行返回<br>    7.@RequestBody<br>9.@Documentd注解<br>    映射实体类与MongoDB文件<br>10.http状态码<br>    1XX 临时响应，并需要请求者继续执行操作的状态代码<br>    2XX 请求成功<br>    3XX 重定向代码<br>    4XX 表示请求出错<br>    5XX 服务器内部错误<br>11.自定义注解<br>    @Retention注解<br>        定义被它所注解的注解保留多久，一共有三种策略：<br>            public enum RetentionPolicy{<br>                SOURCE,CLASS,RUNTIME<br>            }<br>        1.SOURCE  被编译器忽略<br>        2.CLASS  注解会被保留在Class文件中，但在运行时并不会被vm保留(默认)<br>        3.RUNTIME  保留至运行时，可以通过反射去获取注解信息。<br>    @Target注解<br>        说明该注解可以被声明在哪些元素之前<br>            public enum ElementType{<br>                TYPE,FIELD,METHOD,PARAMETER,CONSTRUCTOR,LOCAL_VARIABLE,<br>                ANNOTATION_TYPE,PACKAGE,TYPE_PARAMETER,TYPE_USE<br>            }<br>        1.TYPE  类之前<br>        2.FIELD  类的字段前<br>        3.METHOD  类的方法前<br>        4.PARAMETER  方法参数前<br>        5.CONSTRUCTOR  构造方法前<br>        6.LOCAL_VARIABLE  局部变量之前<br>        7.ANNOTATION_TYPE  注解类型之前<br>        8.PACKAGE  包名前<br>12.Spring框架下的AOP Annotation<br>    1.切入点语法：<br>        execution(public <em> </em> (..))<br>        execution(<em> set</em> (..))<br>        execution(<em> com.xyz.servie.AccountService.</em> (..))<br>        execution(<em> com.xyz.service.</em>.<em> (..))<br>        within(com.xyz.service.</em>)    //service包中<br>        within(com.xyz.service..*)    //service或其子包<br>    2.声明通知<br>        1.@Before 前置通知<br>        2.@AfterReturning  后置通知<br>        3.AfterThrowing  异常通知，在一个方法抛出异常后执行<br>        4.@After  最终通知，必会执行的<br>        5.@Around  环绕通知，在方法执行前及执行后，常用于线程安全的情况下，共享数据<br>13.Spring Security<br>    1.安全处理方法：<br>        1.access(String)                Spring EL表达式结果为true时可访问<br>        2.anonymouns()                    匿名可访问<br>        3.denyAll()                        用户不能访问<br>        4.fullyAuthenticated()            用户完全认证可访问(非remeber me)<br>        5.hasAnyAuthority(String..)        如果用户有参数，则其中任一权限可访问<br>        6.hasAnyRole(String..)                    如果用户有参数，则其中任一角色可访问<br>        7.hasAuthority(String)            如果用户有参数，则其权限可访问<br>        8.hasRole(String)                若用户由参数中的角色可访问<br>        9.permitAll()                    用户可任意访问<br>        10.rememberMe()                    允许通过remember-me登陆的用户访问<br>        11.authenticated()                用户登陆后可访问<br>14.JMS<br>    1.安装ActiveMQ<br>    2.在application.properties中配置ActiveMQ的消息代理地址<br>        spring.activemq.broker-url=tcp://localhost:61616<br>    3.定义发送端<br>        需要实现MessageCreator接口，并重写其createMessage方法<br>        eg:     class Msg implements MessageCreator{<br>                    @override<br>                    public Message createMessage() throws JMSException{<br>                        return session.createTextMessage(“发送了消息”);<br>                    }<br>                }<br>    4.定义发送及目的地<br>        1.使用CommandLineRunner接口，用于程序启动后执行的代码，通过重写其run方法执行<br>        2.注入Springboot提供的JmsTemplate的Bean<br>        3.通过JmsTemplate的send方法向 “my-destination” 目的地发送Msg 的消息<br>        eg:        class Ch934Application implements CommandLineRunner{<br>                    @AutoWired<br>                    JmsTemplate jmsTemplate;</p><pre><code>                @Override                public void run(String... args) throws Exception{                    jmsTemplate.send(&quot;my-destination”,new Msg());                }            }    4.定义消息监听        使用@JmsListener注解，来简化JMS开发。只需要在这个注解的属性destination指定要监听的目的地，即可接收该目的地发送的消息。    eg:        class Receiver{                @JmsListener(destination = &quot;my-destination”)                public void receiveMessage(String message){                    sout(&quot;收到：&quot;+message+&quot;，消息&quot;)                }            }    #SpringBoot的配置文件.properties</code></pre><h1 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h1><pre><code>logging.config=classpath:logback-spring.xml</code></pre><h1 id="Mysql-Configuration"><a href="#Mysql-Configuration" class="headerlink" title="Mysql Configuration"></a>Mysql Configuration</h1><pre><code>spring.datasource.url=jdbc:mysql://localhost:3306/pgc                          #数据库地址spring.datasource.username=root                                                #账号spring.datasource.password=password                                            #密码</code></pre><h1 id="Keep-the-connection-alive-if-idle-for-a-long-time-needed-in-production"><a href="#Keep-the-connection-alive-if-idle-for-a-long-time-needed-in-production" class="headerlink" title="Keep the connection alive if idle for a long time (needed in production)"></a>Keep the connection alive if idle for a long time (needed in production)</h1><pre><code>spring.datasource.testWhileIdle=true                                        #指定连接是否被空闲来连接回收器检验spring.datasource.validationQuery=SELECT 1                                    #验证从连接池取出的连接</code></pre><h1 id="Show-or-not-log-for-each-sql-query"><a href="#Show-or-not-log-for-each-sql-query" class="headerlink" title="Show or not log for each sql query"></a>Show or not log for each sql query</h1><pre><code>spring.jpa.show-sql=true                                                    #运行时输出sql语句</code></pre><h1 id="Hibernate-ddl-auto-save-save-drop-update"><a href="#Hibernate-ddl-auto-save-save-drop-update" class="headerlink" title="Hibernate ddl auto (save, save-drop, update)"></a>Hibernate ddl auto (save, save-drop, update)</h1><pre><code>spring.jpa.hibernate.ddl-auto=update                                        #hibernate数据定义的规则，更新</code></pre><h1 id="Set-to-true-if-we-need-to-populate-the-database-using-‘data-sql’"><a href="#Set-to-true-if-we-need-to-populate-the-database-using-‘data-sql’" class="headerlink" title="Set to true if we need to populate the database using ‘data.sql’."></a>Set to true if we need to populate the database using ‘data.sql’.</h1><pre><code>spring.datasource.initialize=false                                            #指定初始化数据源，是否用data.sql来初始化，默认: true</code></pre><h1 id="Naming-strategy"><a href="#Naming-strategy" class="headerlink" title="Naming strategy"></a>Naming strategy</h1><pre><code>spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy    #指定命名策略</code></pre><h1 id="The-SQL-dialect-makes-Hibernate-generate-better-SQL-for-the-chosen-database"><a href="#The-SQL-dialect-makes-Hibernate-generate-better-SQL-for-the-chosen-database" class="headerlink" title="The SQL dialect makes Hibernate generate better SQL for the chosen database"></a>The SQL dialect makes Hibernate generate better SQL for the chosen database</h1><pre><code>spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect    #hibernate方言</code></pre><h1 id="Mongodb-Configuration"><a href="#Mongodb-Configuration" class="headerlink" title="Mongodb Configuration"></a>Mongodb Configuration</h1><pre><code>spring.data.mongodb.uri=mongodb://localhost:27000/pgc                        #mongodb的uri</code></pre><h1 id="OSS-Configuration"><a href="#OSS-Configuration" class="headerlink" title="OSS Configuration"></a>OSS Configuration</h1><pre><code>oss.endpoint=oss-cn-shanghai.aliyuncs.com                                    #oss阿里云的相关配置oss.access.key.id=LTAIxYKpaBqbAIK3oss.access.key.secret=WuTDXWS8PBqSdqMuMxrPfT5ryYmmd0oss.bucket.name=new-pgcspring.http.multipart.maxFileSize=100MBspring.http.multipart.maxRequestSize=100MB</code></pre><h1 id="SSO-Configuration"><a href="#SSO-Configuration" class="headerlink" title="SSO Configuration"></a>SSO Configuration</h1><pre><code>security.enabled=true</code></pre><p>#默认callback<br>    security.defaultCallback=/</p><p>#sso验证token地址<br>    security.ssoServerValidate=<a href="http://106.15.179.107:7127/api/c/sso/validate-token" target="_blank" rel="noopener">http://106.15.179.107:7127/api/c/sso/validate-token</a></p><p>#如果本地应用没有登陆就去验证<br>    security.ssoServerAuth=<a href="http://106.15.179.107:7127/api/c/sso/auth" target="_blank" rel="noopener">http://106.15.179.107:7127/api/c/sso/auth</a></p><p>#本地应用密码<br>    security.ssoKey=574163310</p><p>#本地应用地址, should be defined by the same field under each app</p><h1 id="security-appHost-http-localhost-8000"><a href="#security-appHost-http-localhost-8000" class="headerlink" title="security.appHost=http://localhost:8000"></a>security.appHost=<a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a></h1><p>#gizp<br>    spring.resources.chain.gzipped=true</p><p>注：<br>1.Java Web获取IP，及ip所在地址<br>    在请求头getHeader()中，”x-forwarded-for”、”Proxy-Client-IP”、”WL-Proxy-Client-IP”<br>    请求地址:getRemoteAddr();<br>2.请求参数与路径变量<br>    1.请求参数<br>        采用key = value形式，并用 “&amp;” 分隔<br>            eg:localhost:8080/user?name=spring&amp;pwd=123<br>        在传统的servlet中，可以通过HttpServletRequest的getParameter()方法取值<br>        在SpringMVC中则提供了一个注解”@RequestParam”来注释方法参数<br>    2.路径参数<br>        类似请求参数，但是没有key部分，只是一个值<br>            eg:localhost:8080/user/spring<br>        为了使用路径变量，首先需要在@RequestMapping注解的值属性中添加一个变量，该变量必须放在花括号之间<br>            eg:@RequestMapping(value=”/user/{pwd}”)<br>        使用时，在方法签名中加上@PathVariable注解<br>            eg:public String test(@PathVariable(name=”pwd”) string password)<br>3.lambda表达式<br>    1.用lambda实现Runnable<br>        new Thread( () -&gt; sout(“Lambda expression rocks！！”) ).start();<br>        等价于：<br>        new Thread(<br>            new Runnable(){<br>                @Override<br>                public void run(){<br>                    sout(“Lambda expression rocks！！”) ;<br>                }<br>            }<br>        ).start();<br>    2.对列表进行迭代<br>        list.forEach( n -&gt; sout(n) );<br>        如果输出和参数相同，则可以省略参数<br>        list.forEach( System.out::println() );<br>    3.函数式接口Predicate<br>        可以向API添加逻辑，用更少的代码支持更多的动态行为。<br>        eg:    public void filter(String name,Predicate condition){<br>                if(condition.test(name)){<br>                    sout(name+” “);<br>                }<br>            }<br>        那么在调用时，我们就可以通过predicate来进行判断<br>        eg:<br>            List languages = Arrays.asList(“Java”, “Scala”, “C++”, “Haskell”, “Lisp”);<br>            filter(langugages,str -&gt; str.startWith(“J”));<br>    4.Map和Reduce(是Stream的方法)<br>        1.map允许你将对象进行转换，将列表中的每个元素转换为修改之后的值。<br>        eg:    List costBeforeTax = Arrays.asList(100, 200, 300, 400, 500);<br>            costBeforeTax.stream().map( (cost)-&gt;cost+.12<em>cost )<br>                                        .forEach(System.out::println);<br>        2.reduce可以对所有值进行合并，比较类似SQL中的sum()、avg()、count()等<br>        eg:对修改后的数据进行计算，接收多个值，返回一个值<br>            costBeforeTax.stream().map( (cost)-&gt;cost+.12</em>cost )<br>                                        .reduce( (sum,cost)-&gt; sum+cost).get();<br>    5.filter过滤<br>        使用lambda表达式和流API过滤大规模数据集合，流提供了一个filter()方法，接受一个Predicate对象，即可以传入一个lambda表达式作为过滤逻辑<br>        eg:    List<string> filtered = strList.stream().filter( x-&gt; x.length()&gt;10).collect(Collectors.toList);<br>            得到的结果为：过滤后的strList，长度都是大于10的<br>    6.distinct()去重<br>        numbers.stream().distinct().collect(Collectors.toList);<br>    7.集合的最大值、最小值、总和及平均值<br>        IntStream、LongStream和DoubleStream等流的类中，有个方法叫做summaryStatistics()，可以返回IntSummaryStatistics、LongSummaryStatistics或者DoubleSummaryStatistic<br>        eg:    IntSumnumberList stats = numberList.stream().mapToInt((x)-&gt;x).summaryStatistics()<br>            stats存在    getMax、getMin、getSum、getAverage、getCount方法<br>    8.Lambda表达式与匿名类<br>        this关键字：<br>            匿名类的this关键字指向匿名类<br>            lambda表达式的this关键字指向包围lambda表达式的类<br>        编译方式：<br>            java编译器将lambda表达式编译成类的私有方法，使用java7的invokedynamic字节码指令来动态绑定这个方法。<br>    9.限制：<br>        1.lambda表达式只能引用final或final局部变量，即在lambda内部不能修改定义在域外的变量。<br>    10.避免Null<br>        当出现多层嵌套时，调用其中的方法可能会抛出NullPointException异常,所以我们可以通过Optional类型来预防null检查<br>        eg:new Outer().getNested().getInner().getFoo()中可能会出现Null异常<br>            修改过后：<br>            Optional.of(new Outer())<br>                    .map(Outer::getNested)<br>                    .map(Nested::getInner)<br>                    .map(Inner::getFoo)<br>                    .ifPresent(System.out::println);<br>    11.Optional类<br>        是一个可以为null的容器对象，如果值存在则isPresent()方法返回true，调用get()方法会返回该对象。<br>        Optional是个容器，它可以保存类型T的值，或者仅仅保存null。<br>        Optional类的引入很好的解决空指针异常。<br>4.Git使用规范流程<br>    1.新建分支<br>        每次开发新功能，都应该新建一个单独的分支</string></p><pre><code>    #获取主分支最新代码        git checkout master            git pull    #新建一个开发分支        git checkout -b myfeature2.提交分支commit    分支修改后，就可以提交commit了        git add -all            #all表示保存所有变化，也是默认的        git status                #查看发生变动的文件        git commit --verbose    #verbose参数，会列出diff的结果3.撰写提交信息    提交commit时，必须给出完整的提交信息     eg：第一行是不超过50字的提要         空一行         *罗列出改动原因、主要变动、需要注意的问题（可多行）         空一行         提供对应的网址4.与主干同步    git fetch master5.合并commit    分支开发完成后，可能有一堆commit，但是合并到主干时，最好只有一个commit，清晰易管理        git rebase -i origin/master        #i参数表示互动，此时会打开一个互动界面    可用的命令：        1.pick        #正常选中        2.reword    #选中，并且修改提交信息        3.edit        #钻中，rebase时会暂停，允许你修改这个commit        4.squash    #选张，会将当前commit与上一个commit合并        5.fixup        #与squash相同，但不会保存当前commit的提交信息        6.exec        #执行其他shell命令    其中，squash和fixup可以用来合并commit    另外，PonyFoo提出另一种合并commit的简洁方法，就是先撤销过去5个commit，再建一个新的        git reset HEAD~5        git add        git commit -am &quot;Here&#39;s the bug fix that closes #28&quot;        git push --force6.推送到远程仓库    合并commit之后，就可以推送当前分支到远程仓库了        git push --force origin myfeature    &quot;--force&quot;表示强行推送，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，可能需要强行推送7.发出Pull Request    提交到远程仓库以后，就可以发出Pull Request到master分支，然后请求别人进行代码review，确认可以合并到master</code></pre><p>4.2    Git分支管理策略<br>    Vincent Driessen提出了一个分支管理的策略，使得版本库的演进保持简洁，主干清晰。<br>    1.主分支Master<br>        代码库有且仅有的一个主分支，提供给用户使用的正式版本，都在此分支上发布<br>    2.开发分支Develop<br>        这个分支可以用来生成代码的最新隔夜版本(nightly)，如果想正式对外发布，就在Master分支上，对Develop分支进行合并(merge)<br>        git merge –no-ff develop<br>    3.临时性分支<br>        1.feature     功能分支<br>        2.release    预发布分支<br>        3.fixbug    修补bug分支<br>        这三种分支都属于临时性需要，使用完以后，应该删除，代码库的常设分支只有Master和Develop</p><ol start="5"><li>组合(Composition)与聚合(Aggregation)的区别<br>1.Composition 表示的是’Part-od’的关系<br>  比如：引擎Engine是汽车Car的一部分，脱离了汽车的引擎毫无作用，没有实在的意义<br>2.而Aggregation表示的是’Has-a’的关系<br>  比如：Person有一个Address，但是Address的存在不依赖于Person，即地址本身就有其独立存在的意义，不受人的约束。<br>3.就强弱关系而言：<br>  Composition应该更强一些<br>6.交并补<br>1.List集合的交并补<br>  list1.addAll(list2);    //并集<br>  list1.retainAll(list2);    //交集,返回Boolean<br>  list1.removeAll(list2);    //差集<br>  list2.removeAll(list1);<br>  list1.addAll(list2);    //无重复并集<br>7.SpringMVC迁移至SpringBoot</li></ol><p>8.lucene和solr<br>    1.lucene<br>        lucene是一个开放源代码的 全文检索 引擎工具包,并不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本引擎。目的在于为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者以此为基础建立起完整的全文检索引擎。</p><pre><code>2.solr    是一个高性能，给予lucene的全文搜索服务器。同时对其进行了拓展，提供了比Lucene更为丰富的查询语言，同时实现了可配置、可拓展并对查询性能进行了优化，并且提供了一个完整的功能管理界面，是一款非常优秀的全文搜索引擎。它对外提供类似于WebService的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的XML文件，生成索引；也可以通过Http Solr Get操作提出查找请求，并得到XML格式的返回结果、3.Solr和Lucene的区别    1.搜索服务器：        lucene本质上是搜索库，不是独立的应用程序    2.企业级        lucene专注于搜索底层的建设，而Solr专注于企业应用。    3.管理        lucene不负责支撑搜索服务所必须的管理    一句话总结：Solr是Lucene面向企业搜索应用的扩展</code></pre><p>9.Gradle<br>    1.简介：<br>        是一个基于JVM的构建工具</p><p>10.Nginx<br>    1.反向代理-解决前端跨域问题<br>        跨域-浏览器为了安全问题而限制了跨域访问，如果a，b页面的协议、域名、端口、子域名不同，所进行的访问行动都是跨域的。<br>        由配置来完成：<br>            1.让nginx监听localhost的80端口，网站A与网站B的访问都是经过localhost的80端口进行访问。<br>            2.配置一个特殊的’/api’目录的访问，并且对url执行了重写<br>                rewrite ^/api/(.*)$/$1 break;<br>            代表重写拦截进来的请求，并且只能对域名后边以’/api’开头的起作用，break表示匹配一个之后停止匹配</p><p>11.详解SpringData<br>    1.概念<br>        Spring Data的目的是为了简化构建基于Spring框架应用的数据访问技术，包括非关系型数据库、Map-Reduce框架、云数据服务等等；另外也包含对关系数据库的访问支持。<br>    2.Spring Data的子项目：<br>        1.Commons    提供共享的基础框架，适合各个子项目使用，支持跨数据库持久化<br>        2.Hadoop    基于Spring的Hadoop作业配置和一个POJO编程模型的MapReduce作业<br>            MapReduce是一种编程模型，用于大规模数据集(大于1TB)的并行运算<br>        3.Key-value 集成了Redis和Riak，提供多个常用场景下的简单封装<br>        4.Document  集成文档数据库，CouchDB和MongoDB并提供基本的配置映射和资料库的支持<br>        5.Graph        集成Neo4j提供强大的基于POJO的编程模型<br>        6.Graph Roo AddOn - Rooney support for Neo4j<br>        7.JDBC Extensions    支持Oracle RAD、高级队列和高级数据类型<br>        8.JPA         简化创建JPA数据访问层和跨存储的持久层功能<br>        9.Mapping     基于Grails的提供对象映射框架，支持不同的数据库<br>        10.Examples    示例程序、文档和图数据库<br>        11.Guidance 高级文档<br>    3.Repository<br>        1.如果dao接口继承了Repository，则该接口会被IOC容器识别为一个Repository Bean注入到IOC容器中，进而可以再该接口中定义满足一定规则的接口<br>            或者通过一个朱姐@RepositoryDefination注解来替代Repository接口<br>        2.在Repository接口中声明方法<br>            1.查询方法以 find|read|get开头<br>            2.设计条件查询，条件的属性需要定义关键字连接<br>            3.条件的属性以字母大写<br>            4.支持属性的级联查询，若当前类由符合条件的属性，则优先使用，则不使用级联属性<br>        3.通过自定义的JPQL完成update和delete操作<br>            注意：JPQL不支持Insert操作<br>            在@Query注解中编写JPQL语句，单必须使用@Modify进行修饰，以通知SpringData，这是一个Update或者delete<br>            因为update和delete需要使用事务，而默认情况下springdata的每个方法上都有一个只读事务，不能完成修改操作<br>            因此需要使用@Modify修饰</p><p>23种设计模式:<br>    1.装饰者模式<br>        允许向一个现有的对象添加新的功能，同时又不改变其结构。装饰者可以在所委托被装饰者的行为之前或者之后加上自己的行为，以达到特定的目的。<br>        参考：<a href="https://blog.csdn.net/wwh578867817/article/details/51480441" target="_blank" rel="noopener">https://blog.csdn.net/wwh578867817/article/details/51480441</a><br>        eg：<br>            假设我们去咖啡店点了一杯咖啡，可以加奶加糖，咖啡、奶、糖各有不同的价格。<br>                此时咖啡就是我们的组件，奶和糖就是我们的装饰者<br>        实现细节：<br>            Component 抽象构件角色：真实对象和装饰对象有相同的接口。这样，客户端对象就能够以与真实对象相同的方式同装饰对象交互<br>            ConcreteComponent具体构件角色（真实对象）：io流中的FileInputStream、　　　　FileOutputStream<br>            Decorator 装饰对象：持有一个抽象构件的引用。装饰对象接受所有客户端的请求，并把这些请求转发给真实的对象。这样，就能在真实对象调用前后增加新的功能。<br>            ConcreteDecorator具体装饰角色：负责给构件对象增加新的责任。</p><p>OAuth 2.0 关于授权的开放网络标准<br>    1.几个专用名词<br>        Third-party application:    第三方应用程序，又称“客户端”(client)<br>        HTTP service:                HTTP服务提供商<br>        Resource Owner：            资源所有者，即“用户”(user)<br>        User Agent:                    用户代理，即浏览器<br>        Authorization server：        认证服务器，即服务提供商专门用来处理认证的服务器<br>        Resource server:            资源服务器，即服务提供商存放用户生成的资源的服务器。与认证服务器可以是同一台，也可以不是<br>    2.OAuth的思路<br>        OAuth在客户端与服务提供商之间，设置了一个授权层，客户端不能直接登录“服务提供商”，只能登录授权层，以此将用户与客户端区分开来。“客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。<br>        “客户端”登录授权层以后，“服务提供商”根据令牌的权限范围和有效期，向“客户端”开放用户存储的资料</p><pre><code>                ----    (A)Authorization Request---&gt;       |Resource|                &lt;---    (B)Authorization Grant    ----    | Owner  |      +------+    ----    (c)Authorization Grant    ---&gt;    |Authorization|      |Client|  &lt;---    (D)Access Token            ----    |    Server    |      +------+                                ----    (E)Access Token            ---&gt;    |Resource  |                &lt;---    (F)Protected Resrouce    ----    |    Server |    解析：        （A）用户打开客户端以后，客户端要求用户给予授权        （B）用户同意给予客户端授权        （C）客户端使用上一步获得的授权，向认证服务器申请令牌        （D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌        （E）客户端使用令牌，向资源服务器申请获取资源        （F）资源服务器确认令牌无误，同意向客户端开发资源3.其中B步骤的客户端授权模式    1.授权码模式（authorization code）    2.简化模式（implicit）    3.密码模式（resource owner password credentials）    4.客户端模式（client credentials）    具体参数查看：http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html4.更新令牌    如果用户访问的时候，客户端的“访问令牌”已经过期，则需要使用“更新令牌”申请一个新的访问令牌。    客户端发出更新令牌的HTTP请求，包含以下参数：        granttype：表示使用的授权模式，此处的值固定为&quot;refreshtoken&quot;，必选项。        refresh_token：表示早前收到的更新令牌，必选项。        scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。    eg：         POST /token HTTP/1.1         Host: server.example.com         Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW         Content-Type: application/x-www-form-urlencoded         grant_type=refresh_token&amp;refresh_token=tGzv3JOkF0XG5Qx2TlKWIA</code></pre><p>Swagger<br>    1.概念：<br>        Swagger是一个规范和完整的框架，用于生成、描述、调用和可视化RESTful风格的Web服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步<br>    2.SpringBoot集成Swagger<br>        1.添加maven依赖，在pom文件中添加：<br>            springfox-swagger2<br>        2.添加swagger配置文件，如下：<br>            @Configuration<br>            @EnableSwagger2<br>            public class SwaggerConfiguration {<br>                @Bean<br>                public Docket api() {<br>                    return new Docket(DocumentationType.SWAGGER_2)<br>                            .ignoredParameterTypes(HttpSession.class)<br>                            .apiInfo(apiInfo())<br>                            .select()            //选择那些路径和api会生成document<br>                            .apis(RequestHandlerSelectors.any())    //对所有api进行监控<br>                            .paths(PathSelectors.any())        //对所有路径进行监控<br>                            .build();<br>                }</p><pre><code>            private ApiInfo apiInfo() {                return new ApiInfoBuilder()                        .title(&quot;pgc接口调用说明&quot;)                        .description(&quot;该文档仅供内部人员使用.&quot;)                        .termsOfServiceUrl(&quot;http://xxxx&quot;)                        .version(&quot;1.0&quot;)                        .build();            }        }    3.此时访问项目下的api-docs，能返回json形式的界面3.添加SwaggerUI    springfox-swagger-ui    生成一个可读性良好的API页面。    此时可以访问项目下的swagger-ui.html4.Swagger对RESTful风格的api支持的比较好。</code></pre><p>SpringBoot拦截器之WebMvcConfigurerAdapter</p><pre><code>1.几个比较常见的：    /* 这里配置视图解析器 */    void configureViewResolvers(ViewResolverRegistry registry);    /* 配置内容裁决的一些选项*/    void configureContentNegotiation(ContentNegotiationConfigurer configurer);    /* 视图跳转控制器 */    void addViewControllers(ViewControllerRegistry registry);    /* 静态资源处理 */    void addResourceHandlers(ResourceHandlerRegistry registry);    /* 默认静态资源处理器 */    void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer);具体方法查看：https://blog.csdn.net/wujiaqi0921/article/details/78324722</code></pre><p>SpringBoot 序列化器注解使用方法<br>    1.@JsonIgnoreProperties<br>        类注解，作用是json序列化时将java bean中的一些属性忽略掉，序列化和反序列化都受影响<br>    2.@JsonIgnore<br>        属性或方法注解（最好在属性上），作用同JsonIgnoreProperties<br>    3.@JsonFormat<br>        属性或方法注解（最好在属性上），可以方便的把Date类型直接转化为我们想要的模式，例如@JsonFormat(pattern=”yyyy-MM-dd HH-mm-ss”)<br>    4.@JsonSerialize<br>        用于属性或getter方法上，用于在序列化时嵌入我们自定义的代码<br>    5.@JsonDeserialize<br>        用于属性或getter方法上，用于在反序列化时可以嵌入我们自定义的代码</p><p>SpringBoot 使用 JavaMailSender发送邮件<br>—–.SpringBoot<br>        添加依赖<br>        <dependency><br>            <groupid>org.springframework.boot</groupid><br>            <artifactid>spring-boot-starter-mail</artifactid><br>        </dependency><br>    2.配置属性<br>        spring.mail.host=smtp.qq.com<br>        spring.mail.username=用户名<br>        spring.mail.password=密码<br>        spring.mail.properties.mail.smtp.auth=true<br>        spring.mail.properties.mail.smtp.starttls.enable=true<br>        spring.mail.properties.mail.smtp.starttls.required=true<br>    3.测试<br>        @Autowired<br>        private JavaMailSender mailSender;</p><pre><code>    SimpleMailMessage message = new SimpleMailMessage();    message.setFrom(&quot;1153693791@qq.com&quot;);    message.setTo(&quot;1153693791@qq.com&quot;);    message.setSubject(&quot;主题：&quot;+title);    message.setText(content);    mailSender.send(message);</code></pre><p>Spring JPA 开启审计功能：<br>    JPA Audit:<br>        在Spring jpa中，支持在字段或者方法上进行注解@CreateDate,@CreatedBy,@LastModifiedDate,@LastModifiedBy<br>    使用：<br>        1.申明实体类，需要在类上添加注解@EntityListeners(AuditingEntityListener.class)，<br>            @Entity<br>            @Table(name = “store_source_bind”)<br>            @EntityListeners(AuditingEntityListener.class)<br>            public class StoreSourceBind {</p><pre><code>    2.在需要的字段上加上@CreateDate,@CreatedBy,@LastModifiedDate,@LastModifiedBy    @Column(name = &quot;create_time&quot;)    @CreatedDate    private Date createTime;    3.继承AuditorAware&lt;T&gt;来指定返回的创建信息:        @Component(&quot;auditorAware&quot;)        public class SpringSecurityAuditorAware implements AuditorAware&lt;String&gt; {            private HttpSession session;            @Override            public String getCurrentAuditor() {                return Utils.getUserIdFromSession(session);            }        }    4.在application启动类中加上注解EnableJpaAuditing或者EnableMongoAuditing（MongoDB的审计），    @EnableJpaAuditing    @EnableMongoAuditing(auditorAwareRef = &quot;auditorAware&quot;)//开启审计功能    public class WalletApplication {        public static void main(String[] args) {            new SpringApplicationBuilder(WalletApplication.class).web(true).run(args);        }    }</code></pre><p>SpringBoot 定时任务：</p><pre><code>1.开启定时任务的配置  在启动文件上，添加注解 @EnableScheduling2.创建定时任务  在需要定时执行的文件上方添加注解：      @Scheduled(fixedRate = 5000)3. @Scheduled 详解：    1.fixedRate = 5000 ：上次开始执行时间点之后5秒执行    2.initialDelay = 1000 , fixedRate = 5000         第一次延迟 1 秒后执行，之后按照 5 秒的规则执行    3.cron = &quot;*/5 ***&quot;) :        通过 cron 表达式定义规则</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于阿里云OSS的文件上传服务</title>
      <link href="/2018/09/30/SpringBoot/OSS-%E9%98%BF%E9%87%8C%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2018/09/30/SpringBoot/OSS-%E9%98%BF%E9%87%8C%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="基于阿里云OSS的文件上传服务"><a href="#基于阿里云OSS的文件上传服务" class="headerlink" title="基于阿里云OSS的文件上传服务"></a>基于阿里云OSS的文件上传服务</h1><h2 id="1-阿里云-OSS-服务介绍"><a href="#1-阿里云-OSS-服务介绍" class="headerlink" title="1.阿里云 OSS 服务介绍"></a>1.阿里云 OSS 服务介绍</h2><pre><code>OSS(Object Storage Service) 即对象存储服务，在 OSS 中每个文件都有一个 Key，通过这个 Key 来指向不同的文件对象。      如果你提交的key为&quot;/attachment/2016/123.txt&quot;，那么在web管理平台上你可以看到上述以&quot;/&quot;分开的文件夹形式，即 OSS 中的 Key 就是&quot;/attachement/2016/123.txt&quot;</code></pre><h2 id="2-Java-SDK"><a href="#2-Java-SDK" class="headerlink" title="2.Java SDK"></a>2.Java SDK</h2><blockquote><p>aliyun-sdk-oss</p></blockquote><h2 id="3-如何使用-OSS"><a href="#3-如何使用-OSS" class="headerlink" title="3.如何使用 OSS"></a>3.如何使用 OSS</h2><pre><code>阿里云OSS方服务，通过自身提供的Client来实现上传和下载。所以在使用OSS服务上传文件时，需要创建三个类： Client类 、 Config类 和 上传类。</code></pre><h2 id="4-构建-OSS-Client-类"><a href="#4-构建-OSS-Client-类" class="headerlink" title="4.构建 OSS Client 类"></a>4.构建 OSS Client 类</h2><blockquote><p>获得 OSS 连接的工具类</p></blockquote><pre><code>@Componentpublic class DefaultOssClient{    @Value(&quot;${oss.endpoint})    String ENDPOINT;    @Value(&quot;${oss.access.key.id}&quot;)    String ACCESS_KEY_ID;    @Value(&quot;${oss.access.key.secret}&quot;)    String ACCESS_KEY_SECRET;    @Value(&quot;${oss.bucket.name}&quot;)    String BUCKET_NAME;    private static OSSClient client = new OSSClient(ENDPOINT,ACCESS_KEY_ID,ACCESS_KEY_SECRETT,DefaultConfig.getDefaultConfig());    static OSSClient getConnection(){        if(client == null){            client = new OSSClient(ENDPOINT,ACCESS_KEY_ID,ACCESS_KEY_SECRET,DefaultConfig.getDefaultConfig());        }        return client;    }    static void shutdownOSSClient(){        client.shutdown();        client = null;    }}</code></pre><blockquote><p>创建一个保存 OSS 地址的文件类，这个文件用户返回给界面</p></blockquote><pre><code>public class OSSFile{    String fileId;    String ossUrl;    String fielname;    double sizeKb;    /* getter and setter*/}</code></pre><blockquote><p>构建 OSS Config 类，用于指定文件上传的配置</p></blockquote><pre><code>static final ClientConfiguration conf = new ClientCOnfiguration();public class DefaultConfig{    private DefaultConfig(){        conf.setMaxConnections(100);        conf.setConnectionTimeout(5000);        conf.setMaxErrorRetry(3);        conf.setSocketTimeout(2000);    }    static ClientConfiguration getDefaultConfig(){        return conf;    }}</code></pre><blockquote><p>构建 OSS 文件上传类</p></blockquote><pre><code>public class OSSUpload{    static String put1(File file){        String return_key = null;        try{            OSSClient client = DefaultOssClient.getConnection();            if(file !=null){                String fileName = file.getName();                String timeStamp = Date2Str.getCurrentTimeStamp();                String timeDate = Date2Str.getCurrentDate5();                String key = Constant.bashFilePath + timeDate + timeStamp +&quot;/&quot; +fileName;                client.putObject(new PutObjectRequest(Constant.bucketName,key,file));                return_key = key;            }            DefaultOssClient.shutdownOSSClient();        }catch(ClientException e){            return null;        }        return return_key;    }    static String put2(InputStream in,String filename){        String return_key = null;        try{            OSSClient client = DefaultOssClient.getConnection();            if(in != null){                String fileName = filename;                try{                    fileName = new String(filename.getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);                }catch(UnsupportedEncodingException e){                    e.printStackTrace();                }                String timeStamp = System.getCurrentTimeStamp();                String timeDate = Date2Str.getCurrentDate5();                String key = Constant.bashFilePath + timeDate + timeStamp + &quot;/&quot; + fileName;                client.put(new PutObjectRequest(Constant.bucketName,key,in));                return_key = key;            }            DefaultOssClient.shutdownOSSClient();        }catch(ClientException e){            return null;        }        return return_key;    }}</code></pre><blockquote><p>上传测试</p></blockquote><pre><code>public class FileUpload{    public static void main(String[] args){        try{            uploadOSS();        }catch(IOException e){            e.printStackTrace();        }    }    public static void uploadOSS() throws ClientProtocolExcetion{        HttpPost httpPost = new HttpPost(&quot;http://127.0.0.1:7001/test/autonavi/shanghai/api/attachment/oss/);        httpPost.addHeader(&quot;key&quot;,&quot;123&quot;);        httpPost.addHeader(&quot;user&quot;,&quot;123&quot;);        httpPost.addHeader(&quot;method&quot;,&quot;123&quot;);        httpPost.addHeader(&quot;filename&quot;,new String(&quot;黄山［哈哈］.jpg&quot;.getBytes(&quot;UTF-8&quot;),&quot;ISO-8859-1&quot;));        httpPost.addHeader(&quot;type&quot;,&quot;01&quot;);        FileEntity reqEntity = new FileEntity(new File(&quot;/Users/123/Pictures/Huangshan.jpg&quot;));        httpPost.setEntity(reqEntity);        HttpClient client = new DefaultHttpClient();        HttpResponse response = client.execute(httpPost);        System.out.println(response);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读取 Properties 文件的几种方式</title>
      <link href="/2018/09/30/java/Java%E4%B8%AD%E4%BD%BF%E7%94%A8Properties/"/>
      <url>/2018/09/30/java/Java%E4%B8%AD%E4%BD%BF%E7%94%A8Properties/</url>
      
        <content type="html"><![CDATA[<h1 id="读取Properties文件的几种方式"><a href="#读取Properties文件的几种方式" class="headerlink" title="读取Properties文件的几种方式"></a>读取Properties文件的几种方式</h1><p><img src="https://upload-images.jianshu.io/upload_images/13603359-9bc057f7c3fab711.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="读取Properties文件的几种方式"></p><a id="more"></a><h2 id="读取-Properties-文件"><a href="#读取-Properties-文件" class="headerlink" title="读取 Properties 文件"></a>读取 Properties 文件</h2><h3 id="1-在xml-配置文件中使用”-”"><a href="#1-在xml-配置文件中使用”-”" class="headerlink" title="1.在xml 配置文件中使用”${}”"></a>1.在xml 配置文件中使用”${}”</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"xxx"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.javadoop.Xxx"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"${javadoop.jdbc.url}"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h3 id="2-通过-Value注解注入"><a href="#2-通过-Value注解注入" class="headerlink" title="2. 通过@Value注解注入"></a>2. 通过@Value注解注入</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${javadoop.jdbc.url}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String url<span class="token punctuation">;</span></code></pre><h3 id="3-通过Environment获取"><a href="#3-通过Environment获取" class="headerlink" title="3.通过Environment获取"></a>3.通过Environment获取</h3><p>注意：只有使用注解 @PropertySource 的时候才可以使用，否则会 null ; 如果是 SpringBoot 的application.properties 注册 的，也可以</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> Environment env<span class="token punctuation">;</span><span class="token keyword">public</span> String <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"javadoop.jdbc.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Properties的使用"><a href="#Properties的使用" class="headerlink" title="Properties的使用"></a>Properties的使用</h2><h3 id="1-通过XML配置"><a href="#1-通过XML配置" class="headerlink" title="1.通过XML配置"></a>1.通过XML配置</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>property<span class="token operator">-</span>placeholder location<span class="token operator">=</span><span class="token string">"classpath:sys.properties"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="2-通过-PropertySource配置"><a href="#2-通过-PropertySource配置" class="headerlink" title="2.通过@PropertySource配置"></a>2.通过@PropertySource配置</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:sys.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaDoopConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="3-PropertyPlaceholderConfigurer-Spring3-1之前"><a href="#3-PropertyPlaceholderConfigurer-Spring3-1之前" class="headerlink" title="3.PropertyPlaceholderConfigurer(Spring3.1之前)"></a>3.PropertyPlaceholderConfigurer(Spring3.1之前)</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> PropertySourcesPlaceholderConfigurer <span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   PropertySourcesPlaceholderConfigurer pspc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"sys.properties"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   pspc<span class="token punctuation">.</span><span class="token function">setLocations</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">;</span>   pspc<span class="token punctuation">.</span><span class="token function">setIgnoreUnresolvablePlaceholders</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> pspc<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>我们先去生成一个 SpringBoot 项目，不会的可以使用 <code>SpringBoot</code> 的 <a href="start.spring.io">在线生成服务</a>,直接下载到本地即可。</p><p>在生成的项目中，默认包含一个 application.properties 的配置文件，只需配置，SpringBoot 会帮我们注册。</p><p>如果需要换配置文件，则在启动时指定即可：</p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>Dspring<span class="token punctuation">.</span>config<span class="token punctuation">.</span>location<span class="token operator">=</span>classpath<span class="token operator">:</span>sys<span class="token punctuation">.</span>properties <span class="token operator">-</span>jar app<span class="token punctuation">.</span>jar</code></pre><h3 id="application-env-properties"><a href="#application-env-properties" class="headerlink" title="application-{env}.properties"></a>application-{env}.properties</h3><p>在 application.properties 的基础上，我们还需要新建 application-dev.properties 和application-prd.properties，用于配置环境相关的信息，然后启动的时候指定环境：</p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>Dspring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>prd <span class="token operator">-</span>jar app<span class="token punctuation">.</span>jar</code></pre><p>如果 application.properties 和 application-prd.properties 有key冲突，application-prd.properties 的优先级较高。</p><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>这个注解是 SpringBoot 才有的,我们在 <code>application.properties</code> 中加入</p><pre class=" language-java"><code class="language-java">javadoop<span class="token punctuation">.</span>database<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span>javadoop<span class="token punctuation">.</span>database<span class="token punctuation">.</span>username<span class="token operator">=</span>adminjavadoop<span class="token punctuation">.</span>database<span class="token punctuation">.</span>password<span class="token operator">=</span>admin123456</code></pre><p>java文件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"javadoop.database"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataBase</span> <span class="token punctuation">{</span>   String url<span class="token punctuation">;</span>   String username<span class="token punctuation">;</span>   String password<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// getters and setters</span><span class="token punctuation">}</span></code></pre><p>这样，就在 Spring 的容器中自动注册了一个类型为 DataBase 的 bean 了，而且属性都已经 set 好了</p><p>属性配置的覆盖顺序：<br>启动参数 &gt; application-{env}.properties &gt; application.properties</p><p>使用启动参数动态设置属性：</p><pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>Djavadoop<span class="token punctuation">.</span>database<span class="token punctuation">.</span>password<span class="token operator">=</span>admin4321 <span class="token operator">-</span>jar app<span class="token punctuation">.</span>jar</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 POI 将数据库中的数据上传至 OSS 对象存储</title>
      <link href="/2018/09/29/java/POI%E6%93%8D%E4%BD%9CEXCEl/"/>
      <url>/2018/09/29/java/POI%E6%93%8D%E4%BD%9CEXCEl/</url>
      
        <content type="html"><![CDATA[<h1 id="通过-POI-将数据库中的数据上传至-OSS-对象存储"><a href="#通过-POI-将数据库中的数据上传至-OSS-对象存储" class="headerlink" title="通过 POI 将数据库中的数据上传至 OSS 对象存储"></a>通过 POI 将数据库中的数据上传至 OSS 对象存储</h1><center><br><code>我爱你，第一句是假的，第二句也是假的。</code><br></center><p><img src="https://upload-images.jianshu.io/upload_images/13603359-996a2c470135ea09.png" alt="我爱你，第一句是假的，第二句也是假的。"></p><a id="more"></a><p>表格的具体样式可以参考 <a href="#三、设置Excel单元格样式"><code>第三章</code></a></p><p>我们以 aliyun 的 OSS 为例上传 <a href="#四、上传至OSS等对象存储"><code>上传方法</code></a></p><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>第一步：引入 Apache POI 的依赖</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Maven 方式 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>poi<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Gradle 方式 <span class="token operator">--</span><span class="token operator">></span>compile group<span class="token operator">:</span> <span class="token string">'org.apache.poi'</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'poi'</span><span class="token punctuation">,</span> version<span class="token operator">:</span> <span class="token string">'4.0.0'</span></code></pre><p>第二步：引入 JUnit 测试，这里就不做赘述了。</p><h2 id="二、讲解测试用例"><a href="#二、讲解测试用例" class="headerlink" title="二、讲解测试用例"></a>二、讲解测试用例</h2><h3 id="Test方法"><a href="#Test方法" class="headerlink" title="Test方法"></a><code>Test</code>方法</h3><p>我们先从测试方法着手，再逐步讲解测试中所用到的方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ①</span>    <span class="token keyword">final</span> ByteArrayOutputStream stream <span class="token operator">=</span> <span class="token function">exportProjectList</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ②</span>    String uri <span class="token operator">=</span> <span class="token function">uploadWorkbook</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">"学生数据表.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ③</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ④</span><span class="token punctuation">}</span></code></pre><ol><li>从数据库中取出需要导入 Excel 的数据</li><li>方法：<a href="#`exportProjectList`方法"><code>exportProjectList</code></a> 将数据存入 <code>POI</code> 生成的 Excel 中，并将 Excel 转换为字节流，用来向<code>对象存储</code>中上传</li><li>方法：<a href="#`uploadWorkbook`方法"><code>uploadWorkbook</code></a> 上传流式文件，和文件名称</li><li>输出 <code>aliyun</code> 返回的地址，用于业务的实现，比如 <code>保存至数据库</code> 等。</li></ol><h3 id="exportProjectList方法"><a href="#exportProjectList方法" class="headerlink" title="exportProjectList方法"></a><code>exportProjectList</code>方法</h3><p>作用：接收从数据库查询出来的对象集合，将其插入到 Workbook 中，并生成二进制的输出流 <code>ByteArrayOutputStream</code></p><p>表格的具体样式可以参考 <a href="#三、设置Excel单元格样式"><code>第三章</code></a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ByteArrayOutputStream <span class="token function">exportProjectList</span><span class="token punctuation">(</span>User<span class="token punctuation">[</span><span class="token punctuation">]</span> users<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Workbook 工作区</span>        <span class="token keyword">final</span> XSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 单字体居中样式</span>        <span class="token keyword">final</span> XSSFCellStyle centerStyle <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        centerStyle<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>HorizontalAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字体居中加粗样式</span>        <span class="token keyword">final</span> XSSFCellStyle headerStyle <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headerStyle<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>HorizontalAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> XSSFFont font <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headerStyle<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Sheet 分页</span>        <span class="token keyword">final</span> XSSFSheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"Sheet Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"序号"</span><span class="token punctuation">,</span> <span class="token string">"学号"</span><span class="token punctuation">,</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> <span class="token string">"年龄"</span><span class="token punctuation">,</span> <span class="token string">"院系"</span><span class="token punctuation">,</span> <span class="token string">"班级"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 首行内容填充，以及设置样式</span>        <span class="token function">setFirstRow</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> strings<span class="token punctuation">,</span> headerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rowSign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>user user <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Row 行</span>            <span class="token keyword">final</span> XSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token operator">++</span>rowSign<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Cell 单元格</span>            <span class="token keyword">final</span> XSSFCell firstCell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            firstCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>rowSign<span class="token punctuation">)</span><span class="token punctuation">;</span>            firstCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>centerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> XSSFCell secondCell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            secondCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getStuNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            secondCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>centerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> XSSFCell thirdCell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thirdCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thirdCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>centerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> XSSFCell fourthCell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fourthCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fourthCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>centerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> XSSFCell fifthCell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fifthCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fifthCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>centerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> XSSFCell sixthCell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sixthCell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sixthCell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>centerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 宽度自适应</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;</span> strings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sheet<span class="token punctuation">.</span><span class="token function">autoSizeColumn</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            sheet<span class="token punctuation">.</span><span class="token function">setColumnWidth</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span><span class="token function">getColumnWidth</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">17</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> ByteArrayOutputStream stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stream<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>需要注意的是，<code>每一个单元格 (Cell) 都是不能为空的</code>。</p><p>我们将设置头标题的方法抽离出来，可供其他设置的方法使用。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 设置第一行的头标题 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setFirstRow</span><span class="token punctuation">(</span>Sheet sheet<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> cellTitles<span class="token punctuation">,</span> XSSFCellStyle headerStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Row row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cellSign <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String cellName <span class="token operator">:</span> cellTitles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>cellSign<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellName<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>headerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在做完前面的工作之后，我们就可以开始写测试方法了</p><h3 id="uploadWorkbook方法"><a href="#uploadWorkbook方法" class="headerlink" title="uploadWorkbook方法"></a><code>uploadWorkbook</code>方法</h3><p>该方法用于：<code>接收 Workbook 生成的流，并将其保存至 OSS 上</code>，本方法适用于 <code>aliyun</code> 的 <code>OSS 对象存储</code>，其他的具体实现都可以从官方API中查到。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String <span class="token function">uploadWorkbook</span><span class="token punctuation">(</span>ByteArrayOutputStream stream<span class="token punctuation">,</span> String fileId<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">final</span> ByteArrayInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ①</span>    ObjectMetadata objectMetadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objectMetadata<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span>stream<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objectMetadata<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objectMetadata<span class="token punctuation">.</span><span class="token function">setCacheControl</span><span class="token punctuation">(</span><span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objectMetadata<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objectMetadata<span class="token punctuation">.</span><span class="token function">setContentDisposition</span><span class="token punctuation">(</span><span class="token string">"inline;filename="</span> <span class="token operator">+</span> <span class="token string">"学生表数据.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ②</span>    <span class="token keyword">return</span> ossCore<span class="token punctuation">.</span><span class="token function">uploadByStream</span><span class="token punctuation">(</span>fileId<span class="token punctuation">,</span> objectMetadata<span class="token punctuation">,</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ③</span><span class="token punctuation">}</span></code></pre><ol><li>将输出流转换为输入流</li><li>保存对象的媒体信息</li><li>上传至 <code>aliyun</code> 的 <code>OSS</code> 对象存储，具体实现可以看 <a href="#四、上传至OSS等对象存储"><code>第四部分</code></a></li></ol><h2 id="三、设置Excel单元格样式"><a href="#三、设置Excel单元格样式" class="headerlink" title="三、设置Excel单元格样式"></a>三、设置Excel单元格样式</h2><p>创建sheet</p><pre class=" language-java"><code class="language-java">HSSFCellStyle cellStyle <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p> 一、设置背景色:</p><pre class=" language-java"><code class="language-java">cellStyle<span class="token punctuation">.</span><span class="token function">setFillForegroundColor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置背景色  </span>cellStyle<span class="token punctuation">.</span><span class="token function">setFillPattern</span><span class="token punctuation">(</span>HSSFCellStyle<span class="token punctuation">.</span>SOLID_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre><p>二、设置边框:</p><pre class=" language-java"><code class="language-java">cellStyle<span class="token punctuation">.</span><span class="token function">setBorderBottom</span><span class="token punctuation">(</span>HSSFCellStyle<span class="token punctuation">.</span>BORDER_THIN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下边框  </span>cellStyle<span class="token punctuation">.</span><span class="token function">setBorderLeft</span><span class="token punctuation">(</span>HSSFCellStyle<span class="token punctuation">.</span>BORDER_THIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左边框  </span>cellStyle<span class="token punctuation">.</span><span class="token function">setBorderTop</span><span class="token punctuation">(</span>HSSFCellStyle<span class="token punctuation">.</span>BORDER_THIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上边框  </span>cellStyle<span class="token punctuation">.</span><span class="token function">setBorderRight</span><span class="token punctuation">(</span>HSSFCellStyle<span class="token punctuation">.</span>BORDER_THIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右边框  </span></code></pre><p>三、设置居中:</p><pre class=" language-java"><code class="language-java">cellStyle<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>HSSFCellStyle<span class="token punctuation">.</span>ALIGN_CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 居中  </span></code></pre><p>四、设置字体:</p><pre class=" language-java"><code class="language-java">HSSFFont font <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  font<span class="token punctuation">.</span><span class="token function">setFontName</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  font<span class="token punctuation">.</span><span class="token function">setFontHeightInPoints</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置字体大小  </span>HSSFFont font2 <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  font2<span class="token punctuation">.</span><span class="token function">setFontName</span><span class="token punctuation">(</span><span class="token string">"仿宋_GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  font2<span class="token punctuation">.</span><span class="token function">setBoldweight</span><span class="token punctuation">(</span>HSSFFont<span class="token punctuation">.</span>BOLDWEIGHT_BOLD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//粗体显示  </span>font2<span class="token punctuation">.</span><span class="token function">setFontHeightInPoints</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cellStyle<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//选择需要用到的字体格式  </span></code></pre><p>五、设置列宽:</p><pre class=" language-java"><code class="language-java">sheet<span class="token punctuation">.</span><span class="token function">setColumnWidth</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3766</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第一个参数代表列id(从0开始),第2个参数代表宽度值  参考 ："2012-08-10"的宽度为2500  </span></code></pre><p>六、设置自动换行:</p><pre class=" language-java"><code class="language-java">cellStyle<span class="token punctuation">.</span><span class="token function">setWrapText</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置自动换行  </span></code></pre><p>七、合并单元格:</p><pre class=" language-java"><code class="language-java">Region region1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Region</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数1：行号 参数2：起始列号 参数3：行号 参数4：终止列号</span><span class="token comment" spellcheck="true">//此方法在POI3.8中已经被废弃，建议使用下面一个  </span>或者用CellRangeAddress region1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CellRangeAddress</span><span class="token punctuation">(</span>rowNumber<span class="token punctuation">,</span> rowNumber<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数1：起始行 参数2：终止行 参数3：起始列 参数4：终止列</span>但应注意两个构造方法的参数不是一样的，具体使用哪个取决于POI的不同版本。sheet<span class="token punctuation">.</span><span class="token function">addMergedRegion</span><span class="token punctuation">(</span>region1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、上传至OSS等对象存储"><a href="#四、上传至OSS等对象存储" class="headerlink" title="四、上传至OSS等对象存储"></a>四、上传至OSS等对象存储</h2><p>作用：<code>上传 stream流 至 OSS</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">uploadByStream</span><span class="token punctuation">(</span>String fileId<span class="token punctuation">,</span> ObjectMetadata metadata<span class="token punctuation">,</span> InputStream in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String ossUrl <span class="token operator">=</span> null<span class="token punctuation">;</span>        OSSClient ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClient</span><span class="token punctuation">(</span>ENDPOINT<span class="token punctuation">,</span> ACCESS_KEY_ID<span class="token punctuation">,</span> ACCESS_KEY_SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>        ossClientMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>fileId<span class="token punctuation">,</span> ossClient<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">putUploadProgress</span><span class="token punctuation">(</span>fileId<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PutObjectRequest req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PutObjectRequest</span><span class="token punctuation">(</span>OssConnectionUtil<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fileId<span class="token punctuation">,</span> in<span class="token punctuation">,</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">setProgressListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UploadProgressListener</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PutObjectResult putResult <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>putResult<span class="token punctuation">.</span><span class="token function">getETag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ossUrl <span class="token operator">=</span>  <span class="token function">getOssURL</span><span class="token punctuation">(</span>ossClient<span class="token punctuation">,</span> fileId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ossUrl<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>ClientException ce<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ossClientMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> poi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2018/09/29/java/regex/"/>
      <url>/2018/09/29/java/regex/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.</p></blockquote><p>一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式.<br>“Regular expression”这个词比较拗口, 我们常使用缩写的术语”regex”或”regexp”.<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等.</p><p>想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑.<br>我们使用以下正则表达式来验证一个用户名:</p><p>以上的正则表达式可以接受 <code>john_doe</code>, <code>jo-hn_doe</code>, <code>john12_as</code>.<br>但不匹配<code>Jo</code>, 因为它包含了大写的字母而且太短了.</p><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#1-基本匹配">1. 基本匹配</a></li><li><a href="#2-元字符">2. 元字符</a><ul><li><a href="#21-点运算符-">2.1 点运算符 .</a></li><li><a href="#22-字符集">2.2 字符集</a><ul><li><a href="#221-否定字符集">2.2.1 否定字符集</a><ul><li><a href="#23-重复次数">2.3 重复次数</a></li></ul></li><li><a href="#231--号">2.3.1 * 号</a></li><li><a href="#232--号">2.3.2   号</a></li><li><a href="#233--号">2.3.3 ? 号</a><ul><li><a href="#24--号">2.4 {} 号</a></li><li><a href="#25--特征标群">2.5 (…) 特征标群</a></li><li><a href="#26--或运算符">2.6 | 或运算符</a></li><li><a href="#27-转码特殊字符">2.7 转码特殊字符</a></li><li><a href="#28-锚点">2.8 锚点</a></li></ul></li><li><a href="#281--号">2.8.1 ^ 号</a></li><li><a href="#282--号">2.8.2 $ 号</a><ul><li><a href="#3-简写字符集">3. 简写字符集</a></li><li><a href="#4-前后关联约束前后预查">4. 前后关联约束(前后预查)</a></li><li><a href="#41--前置约束存在">4.1 ?=… 前置约束(存在)</a></li><li><a href="#42--前置约束-排除">4.2 ?!… 前置约束-排除</a></li><li><a href="#43---后置约束-存在">4.3 ?&lt;= … 后置约束-存在</a></li><li><a href="#44--后置约束-排除">4.4 ?&lt;!… 后置约束-排除</a></li><li><a href="#5-标志">5. 标志</a></li><li><a href="#51-忽略大小写-case-insensitive">5.1 忽略大小写 (Case Insensitive)</a></li><li><a href="#52-全局搜索-global-search">5.2 全局搜索 (Global search)</a></li><li><a href="#53-多行修饰符-multiline">5.3 多行修饰符 (Multiline)</a></li><li><a href="#额外补充">额外补充</a></li><li><a href="#贡献">贡献</a></li><li><a href="#许可证">许可证</a></li></ul></li></ul></li></ul></li></ul><h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式, 它由一些字母和数字组合而成.<br>例如: 一个正则表达式 <code>the</code>, 它表示一个规则: 由字母<code>t</code>开始,接着是<code>h</code>,再接着是<code>e</code>.</p><pre>"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><p><a href="https://regex101.com/r/dmRygT/1" target="_blank" rel="noopener">在线练习</a></p><p>正则表达式<code>123</code>匹配字符串<code>123</code>. 它逐个字符的与输入的正则表达式做比较.</p><p>正则表达式是大小写敏感的, 所以<code>The</code>不会匹配<code>the</code>.</p><pre>"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><p><a href="https://regex101.com/r/1paXsy/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符.<br>元字符不代表他们本身的字面意思, 他们都有特殊的含义. 一些元字符写在方括号中的时候有一些特殊的意思. 以下是一些元字符的介绍:</p><table><thead><tr><th style="text-align:center">元字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td>句号匹配任意单个字符除了换行符.</td></tr><tr><td style="text-align:center">[ ]</td><td>字符种类. 匹配方括号内的任意字符.</td></tr><tr><td style="text-align:center">[^ ]</td><td>否定的字符种类. 匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center">*</td><td>匹配&gt;=0个重复的在*号之前的字符.</td></tr><tr><td style="text-align:center">+</td><td>匹配&gt;=1个重复的+号前的字符.</td></tr><tr><td style="text-align:center">?</td><td>标记?之前的字符为可选.</td></tr><tr><td style="text-align:center">{n,m}</td><td>匹配num个大括号之前的字符 (n &lt;= num &lt;= m).</td></tr><tr><td style="text-align:center">(xyz)</td><td>字符集, 匹配与 xyz 完全相等的字符串.</td></tr><tr><td style="text-align:center">&#124;</td><td>或运算符,匹配符号前或后的字符.</td></tr><tr><td style="text-align:center">&#92;</td><td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \ &#124;</code></td></tr><tr><td style="text-align:center">^</td><td>从开始行开始匹配.</td></tr><tr><td style="text-align:center">$</td><td>从末端开始匹配.</td></tr></tbody></table><h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子.<br><code>.</code>匹配任意单个字符, 但不匹配换行符.<br>例如, 表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串.</p><pre>".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><p><a href="https://regex101.com/r/xc9GkU/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类.<br>方括号用来指定一个字符集.<br>在方括号中使用连字符来指定字符集的范围.<br>在方括号中的字符集不关心顺序.<br>例如, 表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>.</p><pre>"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p><a href="https://regex101.com/r/2ITLQ4/1" target="_blank" rel="noopener">在线练习</a></p><p>方括号的句号就表示句号.<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p><pre>"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a></pre><p><a href="https://regex101.com/r/wL3xtE/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头, 但它用在一个方括号的开头的时候, 它表示这个字符集是否定的.<br>例如, 表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符.</p><pre>"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><p><a href="https://regex101.com/r/nNNlq3/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>, <code>*</code> or <code>?</code> 的, 用来指定匹配子模式的次数.<br>这些元字符在不同的情况下有着不同的意思.</p><h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次.<br>例如, 表达式 <code>a*</code> 匹配以0或更多个a开头的字符, 因为有0个这个条件, 其实也就匹配了所有的字符. 表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串.</p><pre>"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.</pre><p><a href="https://regex101.com/r/7m8me5/1" target="_blank" rel="noopener">在线练习</a></p><p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>.<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用, 如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串.</p><pre>"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the <a href="#learn-regex">con<strong>cat</strong>enation</a>.</pre><p><a href="https://regex101.com/r/gGrwuz/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次.<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾,中间跟着任意个字符的字符串.</p><pre>"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.</pre><p><a href="https://regex101.com/r/Dzf9Aa/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选, 即出现 0 或 1 次.<br>例如, 表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>.</p><pre>"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><p><a href="https://regex101.com/r/cIg9zm/1" target="_blank" rel="noopener">在线练习</a></p><pre>"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.</pre><p><a href="https://regex101.com/r/kPpO2x/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>{}</code> 号</h2><p>在正则表达式中 <code>{}</code> 是一个量词, 常用来一个或一组字符可以重复出现的次数.<br>例如,  表达式 <code>[0-9]{2,3}</code> 匹配最少 2 位最多 3 位 0~9 的数字.</p><pre>"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><p><a href="https://regex101.com/r/juM86s/1" target="_blank" rel="noopener">在线练习</a></p><p>我们可以省略第二个参数.<br>例如, <code>[0-9]{2,}</code> 匹配至少两位 0~9 的数字.</p><p>如果逗号也省略掉则表示重复固定的次数.<br>例如, <code>[0-9]{3}</code> 匹配3位数字</p><pre>"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.</pre><p><a href="https://regex101.com/r/Gdy4w5/1" target="_blank" rel="noopener">在线练习</a></p><pre>"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.</pre><p><a href="https://regex101.com/r/Sivu30/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式. 例如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数. 但如果在 <code>{}</code> 前加入特征标群则表示整个标群内的字符重复 N 次. 例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>.</p><p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或. 例如, <code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p><pre>"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.</pre><p><a href="https://regex101.com/r/tUxrBG/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或, 用作判断条件.</p><p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>.</p><pre>"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p><a href="https://regex101.com/r/fBXyX0/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符. 用于指定 <code>{ } [ ] / \ + * . $ ^ | ?</code> 这些特殊字符. 如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>.</p><p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的. 如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p><pre>"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a></pre><p><a href="https://regex101.com/r/DOc5Nu/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中, 想要匹配指定开头或结尾的字符串就要使用到锚点. <code>^</code> 指定开头, <code>$</code> 指定结尾.</p><h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头.</p><p>例如, 在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>. 但如果使用 <code>^b</code> 将匹配不到任何结果. 因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头.</p><p>例如, <code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串.</p><pre>"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.</pre><p><a href="https://regex101.com/r/5ljjgB/1" target="_blank" rel="noopener">在线练习</a></p><pre>"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.</pre><p><a href="https://regex101.com/r/jXrKne/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 $ 号"></a>2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号, <code>$</code> 号用来匹配字符是否是最后一个.</p><p>例如, <code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串.</p><pre>"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a></pre><p><a href="https://regex101.com/r/y4Au4D/1" target="_blank" rel="noopener">在线练习</a></p><pre>"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a></pre><p><a href="https://regex101.com/r/t0AkOd/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写. 如下:</p><table><thead><tr><th style="text-align:center">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center">\w</td><td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:center">\W</td><td>匹配所有非字母数字, 即符号, 等同于: <code>[^\w]</code></td></tr><tr><td style="text-align:center">\d</td><td>匹配数字: <code>[0-9]</code></td></tr><tr><td style="text-align:center">\D</td><td>匹配非数字: <code>[^\d]</code></td></tr><tr><td style="text-align:center">\s</td><td>匹配所有空格字符, 等同于: <code>[\t\n\f\r\p{Z}]</code></td></tr><tr><td style="text-align:center">\S</td><td>匹配所有非空格字符: <code>[^\s]</code></td></tr><tr><td style="text-align:center">\f</td><td>匹配一个换页符</td></tr><tr><td style="text-align:center">\n</td><td>匹配一个换行符</td></tr><tr><td style="text-align:center">\r</td><td>匹配一个回车符</td></tr><tr><td style="text-align:center">\t</td><td>匹配一个制表符</td></tr><tr><td style="text-align:center">\v</td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center">\p</td><td>匹配 CR/LF (等同于 <code>\r\n</code>)，用来匹配 DOS 行终止符</td></tr></tbody></table><h2 id="4-前后关联约束-前后预查"><a href="#4-前后关联约束-前后预查" class="headerlink" title="4. 前后关联约束(前后预查)"></a>4. 前后关联约束(前后预查)</h2><p>前置约束和后置约束都属于<strong>非捕获簇</strong>(用于匹配不在匹配列表中的格式).<br>前置约束用于判断所匹配的格式是否在另一个确定的格式之后.</p><p>例如, 我们想要获得所有跟在 <code>$</code> 符号后的数字, 我们可以使用正向向后约束 <code>(?&lt;=\$)[0-9\.]*</code>.<br>这个表达式匹配 <code>$</code> 开头, 之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次.</p><p>前后关联约束如下:</p><table><thead><tr><th style="text-align:center">符号</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">?=</td><td>前置约束-存在</td></tr><tr><td style="text-align:center">?!</td><td>前置约束-排除</td></tr><tr><td style="text-align:center">?&lt;=</td><td>后置约束-存在</td></tr><tr><td style="text-align:center">?&lt;!</td><td>后置约束-排除</td></tr></tbody></table><h3 id="4-1-前置约束-存在"><a href="#4-1-前置约束-存在" class="headerlink" title="4.1 ?=... 前置约束(存在)"></a>4.1 <code>?=...</code> 前置约束(存在)</h3><p><code>?=...</code> 前置约束(存在), 表示第一部分表达式必须跟在 <code>?=...</code>定义的表达式之后.</p><p>返回结果只满足第一部分表达式.<br>定义一个前置约束(存在)要使用 <code>()</code>. 在括号内部使用一个问号和等号: <code>(?=...)</code>. </p><p>前置约束的内容写在括号中的等号后面.<br>例如, 表达式 <code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 在括号中我们又定义了前置约束(存在) <code>(?=\sfat)</code> ,即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>.</p><pre>"(T|t)he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><p><a href="https://regex101.com/r/IDDARt/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="4-2-前置约束-排除"><a href="#4-2-前置约束-排除" class="headerlink" title="4.2 ?!... 前置约束-排除"></a>4.2 <code>?!...</code> 前置约束-排除</h3><p>前置约束-排除 <code>?!</code> 用于筛选所有匹配结果, 筛选条件为 其后不跟随着定义的格式<br><code>前置约束-排除</code>  定义和 <code>前置约束(存在)</code> 一样, 区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>.</p><p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 且其后不跟着 <code>(空格)fat</code>.</p><pre>"(T|t)he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><p><a href="https://regex101.com/r/V32Npg/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="4-3-lt-后置约束-存在"><a href="#4-3-lt-后置约束-存在" class="headerlink" title="4.3 ?&lt;= ... 后置约束-存在"></a>4.3 <code>?&lt;= ...</code> 后置约束-存在</h3><p>后置约束-存在 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果, 筛选条件为 其前跟随着定义的格式.<br>例如, 表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>, 且其前跟着 <code>The</code> 或 <code>the</code>.</p><pre>"(?<=(t|t)he\s)(fat|mat)" ==""> The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.</=(t|t)he\s)(fat|mat)"></pre><p><a href="https://regex101.com/r/avH165/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="4-4-lt-后置约束-排除"><a href="#4-4-lt-后置约束-排除" class="headerlink" title="4.4 ?&lt;!... 后置约束-排除"></a>4.4 <code>?&lt;!...</code> 后置约束-排除</h3><p>后置约束-排除 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果, 筛选条件为 其前不跟着定义的格式.<br>例如, 表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>, 且其前不跟着 <code>The</code> 或 <code>the</code>.</p><pre>"(?&lt;!(T|t)he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.</pre><p><a href="https://regex101.com/r/8Efx5G/1" target="_blank" rel="noopener">在线练习</a></p><h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫修饰语, 因为它可以用来修改表达式的搜索结果.<br>这些标志可以任意的组合使用, 它也是整个正则表达式的一部分.</p><table><thead><tr><th style="text-align:center">标志</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">i</td><td>忽略大小写.</td></tr><tr><td style="text-align:center">g</td><td>全局搜索.</td></tr><tr><td style="text-align:center">m</td><td>多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始.</td></tr></tbody></table><h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写.<br>例如, 表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>, 在后面的 <code>i</code> 将其条件修改为忽略大小写, 则变成搜索 <code>the</code> 和 <code>The</code>, <code>g</code> 表示全局搜索.</p><pre>"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.</pre><p><a href="https://regex101.com/r/dpQyf9/1" target="_blank" rel="noopener">在线练习</a></p><pre>"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.</pre><p><a href="https://regex101.com/r/ahfiuh/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用语执行一个全局搜索匹配, 即(不仅仅返回第一个匹配的, 而是返回全部).<br>例如, 表达式 <code>/.(at)/g</code> 表示搜索 任意字符(除了换行) + <code>at</code>, 并返回全部结果.</p><pre>"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.</pre><p><a href="https://regex101.com/r/jnk6gM/1" target="_blank" rel="noopener">在线练习</a></p><pre>"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.</pre><p><a href="https://regex101.com/r/dO1nef/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用语执行一个多行匹配.</p><p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾. 但我们如果想要它在每行的开头和结尾生效, 我们需要用到多行修饰符 <code>m</code>.</p><p>例如, 表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code> 后跟小写字符 <code>t</code> , 末尾可选除换行符外任意字符. 根据 <code>m</code> 修饰符, 现在表达式匹配每行的结尾.</p><pre>"/.at(.)?$/" => The fat                cat sat                on the <a href="#learn-regex"><strong>mat.</strong></a></pre><p><a href="https://regex101.com/r/hoGMkP/1" target="_blank" rel="noopener">在线练习</a></p><pre>"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>                  cat <a href="#learn-regex"><strong>sat</strong></a>                  on the <a href="#learn-regex"><strong>mat.</strong></a></pre><p><a href="https://regex101.com/r/E88WE2/1" target="_blank" rel="noopener">在线练习</a></p><h3 id="6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching"><a href="#6-贪婪匹配与惰性匹配-Greedy-vs-lazy-matching" class="headerlink" title="6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)"></a>6. 贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3><p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用 <code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p><pre>"/(.*at)/" => <a href="#learn-regex"><strong>The fat cat sat on the mat</strong></a>. </pre><p><a href="https://regex101.com/r/AyAdgJ/1" target="_blank" rel="noopener">在线练习</a></p><pre>"/(.*?at)/" => <a href="#learn-regex"><strong>The fat</strong></a> cat sat on the mat. </pre><p><a href="https://regex101.com/r/AyAdgJ/2" target="_blank" rel="noopener">在线练习</a></p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul><li>报告问题</li><li>开放合并请求</li><li>传播此文档</li><li>直接和我联系 <a href="mailto:ziishaned@gmail.com" target="_blank" rel="noopener">ziishaned@gmail.com</a> 或 <a href="https://twitter.com/ziishaned" target="_blank" rel="noopener"><img src="https://img.shields.io/twitter/url/https/twitter.com/ziishaned.svg?style=social&amp;label=Follow%20%40ziishaned" alt="Twitter URL"></a></li></ul><h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT © <a href="mailto:ziishaned@gmail.com" target="_blank" rel="noopener">Zeeshan Ahmed</a></p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟Ping</title>
      <link href="/2018/09/29/java/%E6%A8%A1%E6%8B%9FPing%E8%8E%B7%E5%8F%96IP%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/"/>
      <url>/2018/09/29/java/%E6%A8%A1%E6%8B%9FPing%E8%8E%B7%E5%8F%96IP%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpContimeUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">float</span> <span class="token function">ping</span><span class="token punctuation">(</span>String ipAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isWindows <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String command <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"ping -%s 1 %s"</span><span class="token punctuation">,</span> isWindows <span class="token operator">?</span> <span class="token string">"n"</span> <span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> ipAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Process process <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream inputStream <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            String line<span class="token punctuation">;</span>            Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">".*?([\\d.]+)\\s?ms.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"响应超时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"响应异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Float<span class="token operator">></span> <span class="token function">print</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> newList<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">return</span> newList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>IpContimeUtil<span class="token operator">:</span><span class="token operator">:</span>ping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"响应时间："</span> <span class="token operator">+</span> IpContimeUtil<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"101.132.162.159"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钩子函数</title>
      <link href="/2018/09/29/java/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
      <url>/2018/09/29/java/%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><blockquote><p>钩子(hook)，是一种具有 <code>既定生命周期</code> 的框架工具，在生命周期的各个阶段预留给用户执行一些特定操作的口子，其实是一种 <code>面向切面</code> 编程。</p><p>例如当 JVM 程序即将退出时，会执行我们注入的 钩子线程。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The hook thread 1 is running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                 TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The hook thread 1 is exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The hook thread 2 is running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">{</span>                 TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The hook thread 2 is exit."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>当该方法运行结束时，会调用这两个 hook 线程。</p><h2 id="应用场景：防止应用程序重复启动"><a href="#应用场景：防止应用程序重复启动" class="headerlink" title="应用场景：防止应用程序重复启动"></a>应用场景：防止应用程序重复启动</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"./.lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"The program already running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The program received kill signal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The program is running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo + Github Pages 搭建个人博客</title>
      <link href="/2018/09/28/Git/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/09/28/Git/%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Hexo-Github-Pages-搭建个人博客"><a href="#使用-Hexo-Github-Pages-搭建个人博客" class="headerlink" title="使用 Hexo + Github Pages 搭建个人博客"></a>使用 Hexo + Github Pages 搭建个人博客</h1><p><img src="https://upload-images.jianshu.io/upload_images/13603359-76f0143b86b8bcf4.png" alt="image.png"><br>本篇文章主要是用来记录我搭建个人博客的心路历程，以及在搭建过程中踩的坑。欢迎大家一起学习。<a href="https://luokaiii.github.io/">我的个人博客</a></p><a id="more"></a><h2 id="第一步：安装-Hexo"><a href="#第一步：安装-Hexo" class="headerlink" title="第一步：安装 Hexo"></a>第一步：安装 Hexo</h2><h3 id="a-安装-Node"><a href="#a-安装-Node" class="headerlink" title="a. 安装 Node"></a>a. 安装 Node</h3><h3 id="b-安装-Hexo"><a href="#b-安装-Hexo" class="headerlink" title="b. 安装 Hexo"></a>b. 安装 Hexo</h3><h3 id="c-使用喜欢的主题"><a href="#c-使用喜欢的主题" class="headerlink" title="c. 使用喜欢的主题"></a>c. 使用喜欢的主题</h3><h2 id="第二步：创建-GitHub-Pages"><a href="#第二步：创建-GitHub-Pages" class="headerlink" title="第二步：创建 GitHub Pages"></a>第二步：创建 GitHub Pages</h2><h2 id="第三步：安装-GitDeploy"><a href="#第三步：安装-GitDeploy" class="headerlink" title="第三步：安装 GitDeploy"></a>第三步：安装 GitDeploy</h2><h2 id="第四步：配置-标签、分类、远程git"><a href="#第四步：配置-标签、分类、远程git" class="headerlink" title="第四步：配置 标签、分类、远程git"></a>第四步：配置 标签、分类、远程git</h2><h2 id="第五步：双分支策略"><a href="#第五步：双分支策略" class="headerlink" title="第五步：双分支策略"></a>第五步：双分支策略</h2>]]></content>
      
      
      <categories>
          
          <category> Git命令学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Git Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git分支管理策略</title>
      <link href="/2018/09/28/Git/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/"/>
      <url>/2018/09/28/Git/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、使用分支管理的原因"><a href="#一、使用分支管理的原因" class="headerlink" title="一、使用分支管理的原因"></a>一、使用分支管理的原因</h1><h2 id="为了使版本库的演进保持简洁，各分支井井有条"><a href="#为了使版本库的演进保持简洁，各分支井井有条" class="headerlink" title="为了使版本库的演进保持简洁，各分支井井有条"></a>为了使版本库的演进保持简洁，各分支井井有条</h2><h1 id="二、主分支-Master"><a href="#二、主分支-Master" class="headerlink" title="二、主分支 Master"></a>二、主分支 Master</h1><p>提供给用户使用的正式版本，都在该分支上发布，也是 Git 的默认分支</p><h1 id="三、开发分支-Develop"><a href="#三、开发分支-Develop" class="headerlink" title="三、开发分支 Develop"></a>三、开发分支 Develop</h1><p>日常开发使用，在开发完成之后，用于合并到 Master 分支上的。</p><h1 id="四、临时性分支"><a href="#四、临时性分支" class="headerlink" title="四、临时性分支"></a>四、临时性分支</h1><h2 id="1-feature-分支"><a href="#1-feature-分支" class="headerlink" title="1. feature 分支"></a>1. feature 分支</h2><pre><code>功能分支，开发一个新的功能，需要放在feature分支之上，完成功能开发之后，要将该分支合并到 Develop 分支上</code></pre><h2 id="2-release-分支"><a href="#2-release-分支" class="headerlink" title="2. release 分支"></a>2. release 分支</h2><pre><code>预发布分支，是从 Develop 分支上分离出来的，指发布正式版本之前，可能需要预发布分支进行测试</code></pre><h2 id="3-fixbug-分支"><a href="#3-fixbug-分支" class="headerlink" title="3. fixbug 分支"></a>3. fixbug 分支</h2><pre><code>修补BUG分支，是由 Master 分支分离出来的，当Bug修复完毕之后，再合并进 Develop 和 Master 分支</code></pre><h2 id="4-hotfix-分支"><a href="#4-hotfix-分支" class="headerlink" title="4. hotfix 分支"></a>4. hotfix 分支</h2><pre><code>热修分支，用户产品发布后修复 BUG</code></pre><h2 id="5-custom-分支"><a href="#5-custom-分支" class="headerlink" title="5. custom 分支"></a>5. custom 分支</h2><pre><code>自定义分支，根据自定义的需要创建的分支类型</code></pre><h1 id="五、提交命名规范"><a href="#五、提交命名规范" class="headerlink" title="五、提交命名规范"></a>五、提交命名规范</h1><h2 id="常见的操作类型有："><a href="#常见的操作类型有：" class="headerlink" title="常见的操作类型有："></a>常见的操作类型有：</h2><pre><code>1. [IMP]提升改善正在开发或者已经实现的功能2. [FIX]修正BUG3. [REF]重构一个功能，对功能进行重写4. [ADD]添加实现新功能5. [REM]删除不需要的文件</code></pre><p><a href="mailto:413026b2687.cdb@sina.cn" target="_blank" rel="noopener">413026b2687.cdb@sina.cn</a>  2st21udn</p>]]></content>
      
      
      <categories>
          
          <category> Git命令学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常见命令</title>
      <link href="/2018/09/28/Git/Git%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/09/28/Git/Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-初始化仓库"><a href="#1-初始化仓库" class="headerlink" title="1. 初始化仓库"></a>1. 初始化仓库</h2><pre><code>git init</code></pre><h2 id="2-添加文件至仓库"><a href="#2-添加文件至仓库" class="headerlink" title="2. 添加文件至仓库"></a>2. 添加文件至仓库</h2><pre><code>git add .   // 点表示所有，也可以将点换成指定的文件名</code></pre><h2 id="3-本地仓库关联远程仓库"><a href="#3-本地仓库关联远程仓库" class="headerlink" title="3. 本地仓库关联远程仓库"></a>3. 本地仓库关联远程仓库</h2><pre><code>git remote add origin gitee.com/luo-qiang/koral.git</code></pre><h2 id="4-推送到远程"><a href="#4-推送到远程" class="headerlink" title="4. 推送到远程"></a>4. 推送到远程</h2><pre><code>git push -u origin master</code></pre><h2 id="5-切换分支"><a href="#5-切换分支" class="headerlink" title="5. 切换分支"></a>5. 切换分支</h2><pre><code>git checkout origin/develop</code></pre><h1 id="Git-常用命令速查表"><a href="#Git-常用命令速查表" class="headerlink" title="Git 常用命令速查表"></a>Git 常用命令速查表</h1><blockquote><p>分支</p></blockquote><pre><code>  master                    # 默认开发分支  origin                    # 默认远程版本库  Head                      # 默认开发分支  Head^                     # Head 的父提交</code></pre><blockquote><p>创建版本库</p></blockquote><pre><code>  git clone &lt;URL&gt;           # 克隆远程版本库  git init                  # 初始化本地版本库</code></pre><blockquote><p>修改和提交</p></blockquote><pre><code>  git status                # 查看状态  git diff                  # 查看变更内容  git add .                 # 跟踪所有改动过的文件  git add &lt;file&gt;            # 跟踪指定的文件  git mv &lt;old&gt; &lt;new&gt;        # 文件改名  git rm &lt;file&gt;             # 删除文件  git rm --cached &lt;file&gt;    # 停止跟踪文件但不删除  git commit -m &quot;commit message&quot;    #提交所有更新过的文件到本地仓库  git commit --amend        # 修改最后一次提交</code></pre><blockquote><p>查看提交历史</p></blockquote><pre><code>  git log                   # 查看提交历史  git log -p &lt;file&gt;         # 查看指定文件的提交历史  git blame &lt;file&gt;          # 以列表方式查看指定文件的提交历史</code></pre><blockquote><p>撤销</p></blockquote><pre><code>  git reset --hard HEAD     # 撤销工作目录中所有未提交文件的修改内容  git checkout HEAD &lt;file&gt;  # 撤销指定的未提交文件的修改内容  git revert &lt;commit&gt;       # 撤销指定的提交</code></pre><blockquote><p>分支与标签</p></blockquote><pre><code>  git branch                # 显示所有本地分支  git checkout &lt;branch/tag&gt; # 切换到指定分支或标签  git branch &lt;new-branch&gt;   # 创建新分支  git branch -d &lt;branch&gt;    # 删除本地分支  git tag                   # 列出所有本地标签  git tag &lt;tagname&gt;         # 基于最新提交创建标签  git tag -d &lt;tagname&gt;      # 删除标签</code></pre><blockquote><p>合并与衍合(即变基合并)</p></blockquote><pre><code>  git merge &lt;branch&gt;        # 合并指定分支到当前分支  git rebase &lt;branch&gt;       # 衍合指定分支到当前分支</code></pre><blockquote><p>远程操作</p></blockquote><pre><code>  git remote -v             # 查看远程版本库信息  git remote show &lt;remote&gt;  # 查看指定远程版本库信息  git remote add &lt;remote&gt; &lt;url&gt; # 添加远程版本库  git fetch &lt;remote&gt;        # 从远程库获取代码  git pull &lt;remote&gt; &lt;branch&gt; # 下载代码及快速合并  git push &lt;remote&gt; &lt;branch&gt; # 下载代码及快速合并  git push &lt;remote&gt; :&lt;branch/tag-name&gt; # 删除远程分支或便签  git push --tags           # 上传所有标签</code></pre><blockquote><p>暂存切换分支</p></blockquote><table><thead><tr><th>–</th><th>–</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>git stash save -a “message”  会将ignore 的文件也进行暂存，当进行pop该 stash 时，会出现</p><pre class=" language-shell"><code class="language-shell">Could not restore untracked files from stash</code></pre><p>git stash save -u “message” 不会将ignore 的文件进行暂存</p>]]></content>
      
      
      <categories>
          
          <category> Git命令学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git多账户配置</title>
      <link href="/2018/09/28/Git/git/"/>
      <url>/2018/09/28/Git/git/</url>
      
        <content type="html"><![CDATA[<h1 id="同时使用多个Git源（Github-Gitee-Gitlab等）"><a href="#同时使用多个Git源（Github-Gitee-Gitlab等）" class="headerlink" title="同时使用多个Git源（Github,Gitee,Gitlab等）"></a>同时使用多个Git源（Github,Gitee,Gitlab等）</h1><p>在很多情况下，我们在同一台PC上可能需要关联多个 <code>Git 源</code>。比如公司的项目放在 <code>gitee</code> 上，但是个人有很多学习的小项目都放在 <code>github</code> 上，此时就需要有能连接多个 <code>ssh</code> 的需求。</p><h2 id="第一步：为每个-git-在线服务生成一对公私钥"><a href="#第一步：为每个-git-在线服务生成一对公私钥" class="headerlink" title="第一步：为每个 git 在线服务生成一对公私钥"></a>第一步：为每个 git 在线服务生成一对公私钥</h2><pre class=" language-node"><code class="language-node">$ ssh-keygen -t rsa -C "yourEmail@email.com"Enter file in which to save the key (/c/Users/user/.ssh/id_rsa): /c/User/user/.ssh/id_rsa_github</code></pre><p>我们以 id_rsa_github 为生成的公私钥文件命名，并指定文件的存储路径为 “/c/User/user/.ssh/“ 下</p><p><img src="https://upload-images.jianshu.io/upload_images/13603359-accb6aef01836f8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成的公私钥"></p><p>如果你需要多个服务，则依次 <code>重复第一步</code> 即可。<br><code>注意每一对公私钥的命名不能重复。</code></p><h2 id="第二步：在-c-User-user-ssh-下创建-config-文件，并填入刚刚的公私钥名"><a href="#第二步：在-c-User-user-ssh-下创建-config-文件，并填入刚刚的公私钥名" class="headerlink" title="第二步：在 /c/User/user/.ssh/ 下创建 config 文件，并填入刚刚的公私钥名"></a>第二步：在 /c/User/user/.ssh/ 下创建 config 文件，并填入刚刚的公私钥名</h2><pre class=" language-groovy"><code class="language-groovy">Host gitee<span class="token operator">.</span>com  Hostname gitee<span class="token operator">.</span>com  PreferredAuthentications publickey  IdentityFile <span class="token operator">~</span><span class="token string">/.ssh/</span>id_rsa_gitee  User koralHost github<span class="token operator">.</span>com  Hostname github<span class="token operator">.</span>com  PreferredAuthentications publickey  IdentityFile <span class="token operator">~</span><span class="token string">/.ssh/</span>id_rsa_github  User koral</code></pre><p>这一步表示，在git发起 ssh 链接时，对应着哪一个 ssh 私钥。这里我只以 码云( <code>gitee@OSC</code> )和 <code>github</code> 为例。</p><p>不要问我 <code>~/.ssh/</code> 前面的 <code>~</code> 表示什么意思。我也不会告诉你，它表示当前PC用户的根目录的。至于你想设置为全局的，我也不知道。</p><h2 id="第三步：将生成的公钥添加至各自的-SSH-中"><a href="#第三步：将生成的公钥添加至各自的-SSH-中" class="headerlink" title="第三步：将生成的公钥添加至各自的 SSH 中"></a>第三步：将生成的公钥添加至各自的 SSH 中</h2><p>这里以 Github 为例，其他几个网站类似：</p><h3 id="在-SSH-keys-中”New-SSH-key”"><a href="#在-SSH-keys-中”New-SSH-key”" class="headerlink" title="在 SSH keys 中”New SSH key”"></a>在 SSH keys 中”New SSH key”</h3><p><img src="https://upload-images.jianshu.io/upload_images/13603359-c8f3bdda9deef6da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="找到github的ssh"></p><h3 id="写入生成的SSH"><a href="#写入生成的SSH" class="headerlink" title="写入生成的SSH"></a>写入生成的SSH</h3><p>找到第一步中生成的SSH公钥(以”.pub”结尾的)，并填入，Title随便写<br><img src="https://upload-images.jianshu.io/upload_images/13603359-1381194685beccaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="第四步：测试"><a href="#第四步：测试" class="headerlink" title="第四步：测试"></a>第四步：测试</h2><pre class=" language-shell"><code class="language-shell">ssh -T git@github.comssh -T git@gitee.com</code></pre><p>如果提示了什么不得了的东西，请先删除 “/c/User/user/.ssh/“ 目录下的 “known_hosts”，并重新执行测试。它会重新生成一个。<br>当出现 <code>Hi koral! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 时，恭喜你，连接成功。</p>]]></content>
      
      
      <categories>
          
          <category> Git命令学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Git Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习之路(一)</title>
      <link href="/2018/09/08/Linux/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2018/09/08/Linux/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="在Linux环境下初始化Java开发环境-Ubuntu16-0"><a href="#在Linux环境下初始化Java开发环境-Ubuntu16-0" class="headerlink" title="在Linux环境下初始化Java开发环境(Ubuntu16.0)"></a>在Linux环境下初始化Java开发环境(Ubuntu16.0)</h1><h2 id="一、安装-JDK"><a href="#一、安装-JDK" class="headerlink" title="一、安装 JDK"></a>一、安装 JDK</h2><pre class=" language-java"><code class="language-java">安装 OpenJdk ：sudo apt<span class="token operator">-</span>get update     <span class="token comment" spellcheck="true">//更新软件包列表</span>sudo apt<span class="token operator">-</span>get install openjdk<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>jdk      <span class="token comment" spellcheck="true">//安装openjdk-8-jdk</span>java <span class="token operator">-</span>version       <span class="token comment" spellcheck="true">//查看 java 版本</span></code></pre><p>安装完后的 jdk 和 jre 放在”/usr/lib/jvm/java-8…”</p><h2 id="二、安装-Tomcat"><a href="#二、安装-Tomcat" class="headerlink" title="二、安装 Tomcat"></a>二、安装 Tomcat</h2><ol><li>到官网下载最新的 tomcat：使用 wget 命令下载<pre class=" language-js"><code class="language-js"> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirror<span class="token punctuation">.</span>bit<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>cn<span class="token operator">/</span>apache<span class="token operator">/</span>tomcat<span class="token operator">/</span>tomcat<span class="token number">-8</span><span class="token operator">/</span>v8<span class="token number">.5</span><span class="token punctuation">.</span><span class="token number">31</span><span class="token operator">/</span>bin<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token number">-8.5</span><span class="token punctuation">.</span><span class="token number">31</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz</code></pre></li><li>解压 tomcat：<ol><li>tar -zxvf apache-tomcat-8…</li><li>注意：下载的压缩文件格式，对应着不同的解压缩命令</li></ol></li><li><p>配置 tomcat：</p><ol><li>将解压后的文件夹修改文件夹 apache-tomcat… 为 tomcat:<pre class=" language-js"><code class="language-js"> mv apache<span class="token operator">-</span>tomcat<span class="token operator">...</span> tomcat  <span class="token comment" spellcheck="true">//mv命令可以进行移动也可以进行文件名的修改</span></code></pre></li><li>将 tomcat 目录 复制到指定目录：<pre class=" language-js"><code class="language-js"> sudo cp <span class="token operator">-</span>r tomcat <span class="token operator">/</span>opt</code></pre></li><li>进入 tomcat 目录：<pre class=" language-js"><code class="language-js"> cd <span class="token operator">/</span>opt<span class="token operator">/</span>tomcat</code></pre></li><li>打开启动的脚本文件<pre class=" language-js"><code class="language-js"> sudo vi <span class="token punctuation">.</span><span class="token operator">/</span>bin<span class="token operator">/</span>startup<span class="token punctuation">.</span>sh</code></pre></li><li><p>添加 jdk 和 jre 变量</p><pre class=" language-js"><code class="language-js"> JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-8</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>amd64 JRE_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-8</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>amd64<span class="token operator">/</span>jre CLASS_PATH<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jar<span class="token punctuation">:</span>$JRE_HOME<span class="token operator">/</span>lib PATH<span class="token operator">=</span>$JAVA_HOME<span class="token operator">/</span>bin<span class="token punctuation">:</span>$JRE_HOME<span class="token operator">/</span>bin<span class="token punctuation">:</span>$PATH TOMCAT_HOME<span class="token operator">=</span><span class="token operator">/</span>opt<span class="token operator">/</span>apache<span class="token operator">-</span>tomcat<span class="token number">-8.5</span><span class="token punctuation">.</span><span class="token number">32</span></code></pre><p> 注意：这里的目录以真实存在的为主</p></li></ol></li><li>启动，测试:<ol><li>开启tomcat : <code>sudo ./bin/startup.sh</code></li><li>进入浏览器，查看tomcat是否配置和安装成功</li><li>关闭tomcat : <code>sudo ./bin/shutdown.sh</code></li></ol></li></ol><h2 id="三、安装-Git"><a href="#三、安装-Git" class="headerlink" title="三、安装 Git"></a>三、安装 Git</h2><pre><code>sudo apt-get install git-core除安装之外，其他命令同 Windows 下。</code></pre><h2 id="四、安装-MySQL-服务"><a href="#四、安装-MySQL-服务" class="headerlink" title="四、安装 MySQL 服务"></a>四、安装 MySQL 服务</h2><ol><li>安装 mysql<pre class=" language-shell"><code class="language-shell"> sudo apt-get install mysql-server sudo apt install mysql-client sudo apt install libmysqlclient-dev</code></pre></li><li><p>测试是否安装成功</p><pre class=" language-shell"><code class="language-shell"> sudo netstat -tap | grep mysql</code></pre><p> 安装成功之后，显示下图：</p><p> <img src="http://static.zybuluo.com/xiangwanpeng/p81fqgz0k1782qpwbrtnhmce/image_1b6gfob7m1u4f2i0av11afd92m9.png" alt="安装成功后显示的图片"></p></li><li><p>测试 进入 mysql 服务</p><pre class=" language-shell"><code class="language-shell"> mysql -uroot -p</code></pre></li><li><p>设置 mysql 允许远程访问</p><pre class=" language-shell"><code class="language-shell"> sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p> <img src="http://static.zybuluo.com/xiangwanpeng/sl82tvc6dyqod7j2cnw4qi5b/image_1b6ggmf7h1d6b17o11iha1j1nhtem.png" alt="shell图"></p><pre><code> 将其中的 bind-address = 127.0.0.1 注释掉 :wq 保存退出</code></pre></li><li>进入 mysql 服务，执行授权命令：<pre class=" language-shell"><code class="language-shell"> grant all on *.* to root@'%' identified by '密码' with grant option; flush privileges;</code></pre></li><li>退出并重启 mysql 服务<pre class=" language-shell"><code class="language-shell"> service mysql restart</code></pre></li><li>远程连接测试</li></ol><h2 id="四-2、卸载-MySQL-服务"><a href="#四-2、卸载-MySQL-服务" class="headerlink" title="四-2、卸载 MySQL 服务"></a>四-2、卸载 MySQL 服务</h2><ol><li>查看mysql安装了哪些依赖<pre class=" language-js"><code class="language-js"> dpkg <span class="token operator">--</span>list <span class="token operator">|</span> grep mysql</code></pre></li><li>卸载 mysql-common 包<pre class=" language-js"><code class="language-js"> sudo apt<span class="token operator">-</span><span class="token keyword">get</span> remove mysql<span class="token operator">-</span>common</code></pre></li><li>具体看版本<pre class=" language-js"><code class="language-js"> sudo apt<span class="token operator">-</span><span class="token keyword">get</span> autoremove <span class="token operator">--</span>purge mysql<span class="token operator">-</span>server<span class="token number">-5.0</span></code></pre></li><li>再次查看 ，同 1</li><li>清除残留数据：<pre class=" language-js"><code class="language-js"> dpkg <span class="token operator">-</span>l <span class="token operator">|</span>grep <span class="token operator">^</span>rc<span class="token operator">|</span>awk <span class="token string">'{print $2}'</span> <span class="token operator">|</span>sudo xargs dpkg <span class="token operator">-</span>P</code></pre></li></ol><h2 id="五、安装-MongoDB"><a href="#五、安装-MongoDB" class="headerlink" title="五、安装 MongoDB"></a>五、安装 MongoDB</h2><h3 id="1-安装-MongoDB"><a href="#1-安装-MongoDB" class="headerlink" title="1. 安装 MongoDB"></a>1. 安装 MongoDB</h3><ol><li>导入软件源的公钥<pre class=" language-js"><code class="language-js"> sudo apt<span class="token operator">-</span>key adv <span class="token operator">--</span>keyserver hkp<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>keyserver<span class="token punctuation">.</span>ubuntu<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">80</span> <span class="token operator">--</span>recv EA312927</code></pre></li><li>为 mongodb 创建软件源 list 文件<pre class=" language-js"><code class="language-js"> echo <span class="token string">"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse"</span> <span class="token operator">|</span> sudo tee <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list<span class="token punctuation">.</span>d<span class="token operator">/</span>mongodb<span class="token operator">-</span>org<span class="token number">-3.2</span><span class="token punctuation">.</span>list</code></pre></li><li>更新本地包数据库<pre class=" language-js"><code class="language-js"> sudo apt<span class="token operator">-</span><span class="token keyword">get</span> update</code></pre></li><li>安装 MongoDB 包<pre class=" language-js"><code class="language-js"> sudo apt<span class="token operator">-</span><span class="token keyword">get</span> install <span class="token operator">-</span>y mongodb<span class="token operator">-</span>org</code></pre></li><li><p>配置启动文件</p><ol><li>打开或者创建 <code>/lib/systemd/system/mongod.service</code></li><li><p>加入以下配置：</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>High<span class="token operator">-</span>performance<span class="token punctuation">,</span> schema<span class="token operator">-</span>free document<span class="token operator">-</span>oriented databaseAfter<span class="token operator">=</span>network<span class="token punctuation">.</span>targetDocumentation<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>org<span class="token operator">/</span>manual<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>User<span class="token operator">=</span>mongodbGroup<span class="token operator">=</span>mongodbExecStart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mongod <span class="token operator">--</span>quiet <span class="token operator">--</span>config <span class="token operator">/</span>etc<span class="token operator">/</span>mongod<span class="token punctuation">.</span>conf<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi<span class="token operator">-</span>user<span class="token punctuation">.</span>target</code></pre></li></ol></li><li>启动停止<pre class=" language-js"><code class="language-js"> sudo service mongod start sudo service mongod stop sudo service mongod restart</code></pre></li><li>卸载mongodb<pre class=" language-js"><code class="language-js"> sudo service mongod stop        <span class="token comment" spellcheck="true">// 停止mongodb</span> sudo apt<span class="token operator">-</span><span class="token keyword">get</span> purge mongodb<span class="token operator">-</span>org<span class="token operator">*</span> <span class="token comment" spellcheck="true">// 卸载软件</span> sudo rm <span class="token operator">-</span>r <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>mongodb     <span class="token comment" spellcheck="true">// 删除日志文件和数据库</span> sudo rm <span class="token operator">-</span>r <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mongodb</code></pre></li></ol><h3 id="3-配置-MongoDB"><a href="#3-配置-MongoDB" class="headerlink" title="3. 配置 MongoDB"></a>3. 配置 MongoDB</h3><ol><li>进入 MongoDB<pre class=" language-js"><code class="language-js"> mongo</code></pre></li><li>切换到admin数据库<pre class=" language-js"><code class="language-js"> use admin</code></pre></li><li>创建一个管理员用户<pre class=" language-js"><code class="language-js"> db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>user<span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">,</span>pwd<span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">,</span>roles<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>role<span class="token punctuation">:</span><span class="token string">'userAdminAnyDatabase'</span><span class="token punctuation">,</span>db<span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li><li>打开登录认证<pre class=" language-js"><code class="language-js"> security<span class="token punctuation">:</span>     authorization<span class="token punctuation">:</span>enabled</code></pre> 启用登录后，需要使用 db.auth(‘admin’,’123456’)认证后，才能操作</li><li><p>启用远程连接</p><p> 打开 <code>/etc/mongd.conf</code> 找到 <code>bindIp</code>，注释掉；<br> 或者将<code>bindIp</code> 换成 <code>0.0.0.0</code></p><p> ———————2018年9月10日更新——-<br> 1.导入软件源的公钥</p><pre><code> sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927</code></pre><p> 2.为mongodb创建软件源list文件</p><pre><code> echo &quot;deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list</code></pre><p> 3.更新软件源，安装mongodb</p><pre><code> sudo apt-get update sudo apt-get install -y mongodb-org</code></pre><p> 4.配置启动文件</p><pre><code> 打开或者创建 /lib/systemd/system/mongod.service 加入以下配置： [Unit] Description=High-performance, schema-free document-oriented database After=network.target Documentation=https://docs.mongodb.org/manual [Service] User=mongodb Group=mongodb ExecStart=/usr/bin/mongod --quiet --config /etc/mongod.conf [Install] WantedBy=multi-user.target</code></pre><p> 5.启动停止</p><pre><code> sudo service mongod start sudo service mongod stop sudo service mongod restart</code></pre><p> 6.卸载mongodb</p><pre><code> sudo service mongod stop        // 停止mongodb sudo apt-get purge mongodb-org* // 卸载软件 sudo rm -r /var/log/mongodb     // 删除日志文件和数据库 sudo rm -r /var/lib/mongodb</code></pre></li></ol><blockquote><p><a href="https://www.chengxulvtu.com/2017/07/16/install-mongodb-on-ubuntu-16-04.html" target="_blank" rel="noopener">https://www.chengxulvtu.com/2017/07/16/install-mongodb-on-ubuntu-16-04.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux后台部署Jar</title>
      <link href="/2018/09/08/Linux/Linux%E4%B8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8CJar/"/>
      <url>/2018/09/08/Linux/Linux%E4%B8%8B%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8CJar/</url>
      
        <content type="html"><![CDATA[<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ol><li><p>安装git</p></li><li><p>拉取代码</p><ol><li><p>如果不是通过 ssh 的方式拉取的话，每次都需要输入密码</p></li><li><p>解决方法：进入项目目录，输入：</p></li><li><pre class=" language-shell"><code class="language-shell">git config --global credential.helper store</code></pre></li><li><p>再重新pull一次，输入密码之后，以后就不用输入密码了</p></li></ol></li><li><p>创建可执行文件，用于拉取代码、构建项目</p><ol><li>需要给可执行文件授权：chmod 777 build.sh</li><li>注意权限的大小</li></ol></li><li><p>创建可执行文件，用于执行jar包</p><ol><li><p>执行文件可以直接通过java -jar 来执行</p></li><li><p>但是我们需要后台执行 ，用到 nohup</p></li><li><pre class=" language-shell"><code class="language-shell">nohup /usr/local/node/bin/node /www/im/chat.js >> /usr/local/node/output.log 2>&1 &</code></pre></li><li><p>第二种，是将 jar包注册为服务，通过service stop等方法启动停止</p></li></ol></li><li><p>部署前端项目</p><ol><li><p>安装nodejs</p></li><li><p>安装yarn，注意，17.0以上的ubuntu需要先卸载cmdtest</p><ol><li><pre class=" language-java"><code class="language-java">sudo apt remove cmdtest</code></pre></li><li><pre class=" language-java"><code class="language-java">curl <span class="token operator">-</span>sS https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>dl<span class="token punctuation">.</span>yarnpkg<span class="token punctuation">.</span>com<span class="token operator">/</span>debian<span class="token operator">/</span>pubkey<span class="token punctuation">.</span>gpg <span class="token operator">|</span> sudo apt<span class="token operator">-</span>key add <span class="token operator">-</span>echo <span class="token string">"deb https://dl.yarnpkg.com/debian/ stable main"</span> <span class="token operator">|</span> sudo tee <span class="token operator">/</span>etc<span class="token operator">/</span>apt<span class="token operator">/</span>sources<span class="token punctuation">.</span>list<span class="token punctuation">.</span>d<span class="token operator">/</span>yarn<span class="token punctuation">.</span>listsudo apt<span class="token operator">-</span>get update <span class="token operator">&amp;&amp;</span> sudo apt<span class="token operator">-</span>get install yarn</code></pre></li></ol></li></ol></li></ol><p>重启：</p><pre class=" language-java"><code class="language-java">#<span class="token operator">!</span><span class="token operator">/</span>bin<span class="token operator">/</span>bashps <span class="token operator">-</span>ef <span class="token operator">|</span> grep <span class="token string">"/opt/hifox/PGC/teacherApp/teacherapp-0.0.1-SNAPSHOT.jar"</span> <span class="token operator">|</span> grep <span class="token operator">-</span>v grep <span class="token operator">|</span> awk <span class="token string">'{print $2}'</span> <span class="token operator">|</span> xargs kill <span class="token operator">-</span><span class="token number">15</span>pid<span class="token operator">=</span>`ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep <span class="token string">"/opt/hifox/PGC/teacherApp/teacherapp-0.0.1-SNAPSHOT.jar"</span> <span class="token operator">|</span> grep <span class="token operator">-</span>v grep <span class="token operator">|</span> awk <span class="token string">'{print $2}'</span>` <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span> test <span class="token operator">-</span>z $pid<span class="token punctuation">)</span><span class="token keyword">do</span> sleep <span class="token number">1</span> pid<span class="token operator">=</span>`ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep <span class="token string">"/opt/hifox/PGC/teacherApp/teacherapp-0.0.1-SNAPSHOT.jar"</span> <span class="token operator">|</span> grep <span class="token operator">-</span>v grep <span class="token operator">|</span> awk <span class="token string">'{print $2}'</span>`echo <span class="token operator">-</span>n <span class="token string">"*"</span> donenohup java <span class="token operator">-</span>jar teacherapp<span class="token operator">-</span><span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-</span>SNAPSHOT<span class="token punctuation">.</span>jar <span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span>null <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">&amp;</span></code></pre><p>以外部配置文件启动jar<br>   加载properties优先级：</p><pre><code>        1. jar包同级目录下，config目录下的application.properties              jar包同级目录下的application.properties                   3. 最后才是jar内的application.properties                   依旧是 java -jar app.jar，默认按照上面的加载优先级加载。                   也可以手动指定 java -jar app.jar -Dspring.config.location=application.properties</code></pre><p>注意：cas和common需要是同一个数据库</p><p>通过maven的默认仓库位置在 /root/.m2 ，这个文件夹可能被隐藏了</p><p>查找方式为：find / .m2 ，表示查找”/“目录下的 .m2 文件或文件夹</p><p>注意：当在shell终端中使用 ctrl+s 表示暂停当前命令行窗口，取消暂停为：ctrl+q</p>]]></content>
      
      
      <categories>
          
          <category> Linux学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习之路(一)</title>
      <link href="/2018/09/08/Linux/Ubuntu%E6%90%AD%E5%BB%BASS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2018/09/08/Linux/Ubuntu%E6%90%AD%E5%BB%BASS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><pre><code>1.更新软件源：    sudo apt-get update2. 安装 PIP 环境    sudo apt-get install python-pip3. 使用 pip 命令安装 shadowsocks    sudo pip install shadowsocks4. 如果出现异常，可以尝试升级pip    pip install -U pip</code></pre><h2 id="二、运行"><a href="#二、运行" class="headerlink" title="二、运行"></a>二、运行</h2><pre><code>(1). 命令启动    sudo ssserver -p 8388 -k mypassword -m -rc4md5 -d start(2). 配置文件    vim /etc/shadowsocks.json    添加如下内容：        {        &quot;server&quot;:&quot;my_server_ip&quot;,        &quot;server_port&quot;:8388,        &quot;local_address&quot;:&quot;127.0.0.1&quot;,        &quot;local_port&quot;:1080,        &quot;password&quot;:&quot;mypassword&quot;,        &quot;timeout&quot;:300,        &quot;method&quot;:&quot;rc4-md5&quot;        }        //多个用户的配置        {        &quot;server&quot;:&quot;my_server_ip&quot;,        &quot;port_password&quot;:{        &quot;9001&quot;:&quot;pwd001&quot;,        &quot;9002&quot;:&quot;pwd002&quot;,        &quot;9003&quot;:&quot;pwd003&quot;        },        &quot;local_address&quot;:&quot;127.0.0.1&quot;,        &quot;local_port&quot;:1080,        &quot;timeout&quot;:300,        &quot;method&quot;:&quot;rc4-md5&quot;        }    3. 赋予 shadowsocks.json 文件权限：        sudo apt-get install python - m2crypto    4. 使用配置文件在后台运行        sudo ssserver -c /etc/shadowsocks.json -d start    5. 配置开机启动        编辑 /etc/rc.local 文件            sudo vim /etc/rc.local        在 exit 0 上加入：            /usr/local/bin/ssserver - c /etc/shadowsocks.json            或            /usr/local/bin/ssserver -p 8388 -k password -m rc4md5 -d start</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux学习之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataMongoDB(三)</title>
      <link href="/2018/09/01/SpringData/Spring-Data-MongoDB%EF%BC%883%EF%BC%89/"/>
      <url>/2018/09/01/SpringData/Spring-Data-MongoDB%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-MongoDB-（三）-自定义converter"><a href="#Spring-Data-MongoDB-（三）-自定义converter" class="headerlink" title="Spring Data MongoDB （三） 自定义converter"></a>Spring Data MongoDB （三） 自定义converter</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>diagnose<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>MongoClient<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>EnableAutoConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>mongo<span class="token punctuation">.</span>embedded<span class="token punctuation">.</span>EmbeddedMongoAutoConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Profile<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>Converter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>ReadingConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AbstractMongoConfiguration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>CustomConversions<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//@EnableAutoConfiguration(exclude = {EmbeddedMongoAutoConfiguration.class})</span><span class="token comment" spellcheck="true">//@Profile("!testing")</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoConfig</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMongoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.data.mongodb.uri}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String host<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> MongoClient <span class="token function">mongoClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String <span class="token function">getDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ch_node"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> CustomConversions <span class="token function">customConversions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Converter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">>></span> converters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringToPointConverter2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomConversions</span><span class="token punctuation">(</span>converters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>diagnose<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BadRequestException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>diagnose<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Point<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>ConverterNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>TypeDescriptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>ConditionalGenericConverter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToPointConverter</span> <span class="token keyword">implements</span> <span class="token class-name">ConditionalGenericConverter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>TypeDescriptor sourceType<span class="token punctuation">,</span> TypeDescriptor targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sourceType<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> targetType<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>ConvertiblePair<span class="token operator">></span> <span class="token function">getConvertibleTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConvertiblePair</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Point<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">convert</span><span class="token punctuation">(</span>Object source<span class="token punctuation">,</span> TypeDescriptor sourceType<span class="token punctuation">,</span> TypeDescriptor targetType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String from <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> source<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> from<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">"String 转 Point 失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> Point<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>Track<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Point<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>Track<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">.</span>Industry<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConverterNotFoundException</span><span class="token punctuation">(</span>sourceType<span class="token punctuation">,</span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>diagnose<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>BadRequestException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>diagnose<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Point<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>convert<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>Converter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToPointConverter2</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Point<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Point <span class="token function">convert</span><span class="token punctuation">(</span>String from<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> from<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> strings<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestException</span><span class="token punctuation">(</span><span class="token string">"String 转 Point 失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> Point<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>Track<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Point<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>Track<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Point<span class="token punctuation">.</span>Industry<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>diagnose<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>common<span class="token punctuation">.</span>config<span class="token punctuation">.</span>WebConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiagnoseAppWebConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot消息机制(三)-搭建Websocket+Stomp服务</title>
      <link href="/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%B8%89)-%E6%90%AD%E5%BB%BAWebsocket+Stomp%E6%9C%8D%E5%8A%A1/"/>
      <url>/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%B8%89)-%E6%90%AD%E5%BB%BAWebsocket+Stomp%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>#SpringBoot消息机制(三)-搭建Websocket+Stomp服务</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot消息机制(五)-SpringBoot整合ActiveMQ</title>
      <link href="/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%BA%94)-SpringBoot%E6%95%B4%E5%90%88ActiveMQ/"/>
      <url>/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%BA%94)-SpringBoot%E6%95%B4%E5%90%88ActiveMQ/</url>
      
        <content type="html"><![CDATA[<p>#SpringBoot消息机制(五)-SpringBoot整合ActiveMQ</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot消息机制(四)-ActiveMQ介绍</title>
      <link href="/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E5%9B%9B)-ActiveMQ%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E5%9B%9B)-ActiveMQ%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>#SpringBoot消息机制(四)-ActiveMQ介绍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用POI结合Excel的行列生成原生散点图(XY图)</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E7%99%BE%E5%88%86%E6%AF%94%E5%A0%86%E5%8F%A0%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E7%99%BE%E5%88%86%E6%AF%94%E5%A0%86%E5%8F%A0%E6%9F%B1%E7%8A%B6%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用POI结合Excel的行列生成原生散点图-XY图"><a href="#使用POI结合Excel的行列生成原生散点图-XY图" class="headerlink" title="使用POI结合Excel的行列生成原生散点图(XY图)"></a>使用POI结合Excel的行列生成原生散点图(XY图)</h1><h2 id="一、先放最后输出的结果图："><a href="#一、先放最后输出的结果图：" class="headerlink" title="一、先放最后输出的结果图："></a>一、先放最后输出的结果图：</h2><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/ScatterChart.png" alt="雷达图"></p><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createScatterChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    XSSFWorkbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XSSFSheet sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"散点图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Row row<span class="token punctuation">;</span>    Cell cell<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">105</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"S"</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span><span class="token string">"预选赛项目得分分布图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setAutoTitleDeleted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewPlotVisOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewDispBlanksAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STDispBlanksAs<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewShowDLblsOverMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个散点图</span>    CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">getPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScatterChart scatterChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewScatterChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewScatterStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STScatterStyle<span class="token punctuation">.</span>LINE_MARKER<span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不允许自定义颜色</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTCatAx ctCatAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewCatAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScaling ctScaling <span class="token operator">=</span> ctCatAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScaling<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置Y坐标</span>    CTValAx ctValAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewValAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScaling ctScaling1 <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScaling1<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Y轴的对比线</span>    CTShapeProperties ctShapeProperties <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorGridlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTLineProperties ctLineProperties <span class="token operator">=</span> ctShapeProperties<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setCap</span><span class="token punctuation">(</span>STLineCap<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setCmpd</span><span class="token punctuation">(</span>STCompoundLine<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setAlgn</span><span class="token punctuation">(</span>STPenAlignment<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不显示Y轴上的坐标刻度线</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewMinorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置散点图内的信息</span>    CTScatterSer ctScatterSer <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去掉连接线</span>    ctPlotArea<span class="token punctuation">.</span><span class="token function">getScatterChartArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSerArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置散点图各图例的显示</span>    CTDLbls ctdLbls <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowLegendKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowSerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowBubbleSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置标记的样式</span>    CTMarker ctMarker <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctMarker<span class="token punctuation">.</span><span class="token function">addNewSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STMarkerStyle<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctMarker<span class="token punctuation">.</span><span class="token function">addNewSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTShapeProperties ctShapeProperties1 <span class="token operator">=</span> ctMarker<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTLineProperties ctLineProperties1 <span class="token operator">=</span> ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties1<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTAxDataSource ctAxDataSource <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewXVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTStrRef ctStrRef <span class="token operator">=</span> ctAxDataSource<span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctStrRef<span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span><span class="token string">"散点图!$A$1:$A$100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTNumDataSource ctNumDataSource <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewYVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTNumRef ctNumRef <span class="token operator">=</span> ctNumDataSource<span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctNumRef<span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span><span class="token string">"散点图!$B$1:$B$100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctChart<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\user\\Desktop\\out.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    fileOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、XML结构"><a href="#三、XML结构" class="headerlink" title="三、XML结构"></a>三、XML结构</h2><p>以上生成的图表，归根结底是属于XML的一种，通过 <code>Chart</code> 的继承关系可以看到，它其实是 <code>XmlObject</code>的一种实现。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml-fragment</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>char</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/chart<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>main</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>rich</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>bodyPr</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>r</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>t</span><span class="token punctuation">></span></span>预选赛项目得分分布图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>t</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>r</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>rich</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>tx</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>autoTitleDeleted</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>layout</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scatterChart</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scatterStyle</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineMarker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>varyColors</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>idx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>order</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>noFill</span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>marker</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>symbol</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diamond<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>size</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>schemeClr</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9525<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>schemeClr</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>marker</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>xVal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>散点图!$A$1:$A$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>xVal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>yVal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>散点图!$B$1:$B$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>yVal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showLegendKey</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showVal</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showCatName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showSerName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showPercent</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showBubbleSize</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scatterChart</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9525<span class="token punctuation">"</span></span> <span class="token attr-name">cap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span> <span class="token attr-name">cmpd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sng<span class="token punctuation">"</span></span> <span class="token attr-name">algn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctr<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>minorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotVisOnly</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotVisOnly</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>dispBlanksAs</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showDLblsOverMax</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml-fragment</span><span class="token punctuation">></span></span></code></pre><h2 id="四、工具类，我放在-POI生成原生图表-工具类-中"><a href="#四、工具类，我放在-POI生成原生图表-工具类-中" class="headerlink" title="四、工具类，我放在 POI生成原生图表-工具类 中"></a>四、工具类，我放在 <a href="www.baidu.com">POI生成原生图表-工具类</a> 中</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI生成原生Excel-工具类</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="POI生成原生Excel-工具类"><a href="#POI生成原生Excel-工具类" class="headerlink" title="POI生成原生Excel-工具类"></a>POI生成原生Excel-工具类</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>pgc<span class="token punctuation">.</span>diagnose<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSSFChart<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSSFClientAnchor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSSFDrawing<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>xssf<span class="token punctuation">.</span>usermodel<span class="token punctuation">.</span>XSSFSheet<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openxmlformats<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>drawingml<span class="token punctuation">.</span>x2006<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>openxmlformats<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>drawingml<span class="token punctuation">.</span>x2006<span class="token punctuation">.</span>main<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>openxmlformats<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>drawingml<span class="token punctuation">.</span>x2006<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>STOrientation<span class="token punctuation">.</span>MIN_MAX<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>openxmlformats<span class="token punctuation">.</span>schemas<span class="token punctuation">.</span>drawingml<span class="token punctuation">.</span>x2006<span class="token punctuation">.</span>chart<span class="token punctuation">.</span>STTickLblPos<span class="token punctuation">.</span>NEXT_TO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawRadarChart</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> Position start<span class="token punctuation">,</span> Position end<span class="token punctuation">,</span>                                      List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>        CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">addNewPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTRadarChart ctRadarChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不允许自定义颜色、以及标记的形状</span><span class="token comment" spellcheck="true">//        ctRadarChart.addNewRadarStyle().setVal(STRadarStyle.MARKER);</span>        ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setAxIds</span><span class="token punctuation">(</span>ctRadarChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setCatAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setRadarValAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDataLabel</span><span class="token punctuation">(</span>ctRadarChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">paddingData</span><span class="token punctuation">(</span>ctRadarChart<span class="token punctuation">,</span> dataRef<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 散点图     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawScatterChart</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> Position start<span class="token punctuation">,</span> Position end<span class="token punctuation">,</span>                                        List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>        chart<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span><span class="token function">getSheetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">getPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTScatterChart scatterChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewScatterChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scatterChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setAxIds</span><span class="token punctuation">(</span>scatterChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setCatAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setScatterValAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDataLabel</span><span class="token punctuation">(</span>scatterChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">paddingData</span><span class="token punctuation">(</span>scatterChart<span class="token punctuation">,</span> dataRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 去掉连接线</span>        ctPlotArea<span class="token punctuation">.</span><span class="token function">getScatterChartArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSerArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 折线图     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawCTLineChart</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> Position start<span class="token punctuation">,</span> Position end<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> xString<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> serTxName<span class="token punctuation">,</span>                                       List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// todo 折线图换成堆叠图</span>        XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>        CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">getPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTLineChart ctLineChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewLineChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// telling the Chart that it has axis and giving them Ids</span>        <span class="token function">setAxIds</span><span class="token punctuation">(</span>ctLineChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set cat axis</span>        <span class="token function">setCatAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set val axis</span>        <span class="token function">setValAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// legend</span>        <span class="token function">setLegend</span><span class="token punctuation">(</span>ctChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set data lable</span>        <span class="token function">setDataLabel</span><span class="token punctuation">(</span>ctLineChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set chart title</span>        <span class="token function">setChartTitle</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span><span class="token function">getSheetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">paddingData</span><span class="token punctuation">(</span>ctLineChart<span class="token punctuation">,</span> xString<span class="token punctuation">,</span> serTxName<span class="token punctuation">,</span> dataRef<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*     * @param position 图表坐标 起始行，起始列，终点行     *     * @param xString 横坐标     *     * @param serTxName 图形示例     *     * @param dataRef 柱状图数据范围 sheetName!$A$1:$A$12     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">drawBarChart</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> Position start<span class="token punctuation">,</span> Position end<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> xString<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> serTxName<span class="token punctuation">,</span>                                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>        CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">getPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTBarChart ctBarChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewBarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctBarChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctBarChart<span class="token punctuation">.</span><span class="token function">addNewBarDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STBarDir<span class="token punctuation">.</span>COL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// telling the Chart that it has axis and giving them Ids</span>        <span class="token function">setAxIds</span><span class="token punctuation">(</span>ctBarChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set cat axis</span>        <span class="token function">setCatAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set val axis</span>        <span class="token function">setValAx</span><span class="token punctuation">(</span>ctPlotArea<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// add legend and set legend position</span>        <span class="token function">setLegend</span><span class="token punctuation">(</span>ctChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set data lable</span>        <span class="token function">setDataLabel</span><span class="token punctuation">(</span>ctBarChart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set chart title</span>        <span class="token function">setChartTitle</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span><span class="token function">getSheetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// padding data to chart</span>        <span class="token function">paddingData</span><span class="token punctuation">(</span>ctBarChart<span class="token punctuation">,</span> xString<span class="token punctuation">,</span> serTxName<span class="token punctuation">,</span> dataRef<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paddingData</span><span class="token punctuation">(</span>CTBarChart ctBarChart<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> xString<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> serTxName<span class="token punctuation">,</span>                                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> serTxName<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> dataRef<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CTBarSer ctBarSer <span class="token operator">=</span> ctBarChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctBarSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// set legend value</span>            <span class="token function">setLegend</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ctBarSer<span class="token punctuation">.</span><span class="token function">addNewTx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// cat ax value</span>            <span class="token function">setChartCatAxLabel</span><span class="token punctuation">(</span>ctBarSer<span class="token punctuation">.</span><span class="token function">addNewCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// value range</span>            ctBarSer<span class="token punctuation">.</span><span class="token function">addNewVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>dataRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// add border to chart</span>            ctBarSer<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSrgbClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setLegend</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> CTSerTx ctSerTx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// set legend by str ref</span>            ctSerTx<span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">// set legend by str</span>            ctSerTx<span class="token punctuation">.</span><span class="token function">setV</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paddingData</span><span class="token punctuation">(</span>CTLineChart ctLineChart<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> xString<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> serTxName<span class="token punctuation">,</span>                                    List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iterator <span class="token operator">=</span> serTxName<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> dataRef<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            CTLineSer ctLineSer <span class="token operator">=</span> ctLineChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setLegend</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ctLineSer<span class="token punctuation">.</span><span class="token function">addNewTx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setChartCatAxLabel</span><span class="token punctuation">(</span>ctLineSer<span class="token punctuation">.</span><span class="token function">addNewCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xString<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineSer<span class="token punctuation">.</span><span class="token function">addNewVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>dataRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineSer<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSrgbClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paddingData</span><span class="token punctuation">(</span>CTScatterChart scatterChart<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置散点图内的信息</span>        CTScatterSer ctScatterSer <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置标记的样式</span>        CTMarker ctMarker <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctMarker<span class="token punctuation">.</span><span class="token function">addNewSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STMarkerStyle<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctMarker<span class="token punctuation">.</span><span class="token function">addNewSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTShapeProperties ctShapeProperties1 <span class="token operator">=</span> ctMarker<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTLineProperties ctLineProperties1 <span class="token operator">=</span> ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties1<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTNumDataSource ctNumDataSource <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewYVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTNumRef ctNumRef <span class="token operator">=</span> ctNumDataSource<span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctNumRef<span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>dataRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">paddingData</span><span class="token punctuation">(</span>CTRadarChart ctRadarChart<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> dataRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTRadarSer ctRadarSer <span class="token operator">=</span> ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTLineProperties ctLineProperties <span class="token operator">=</span> ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties<span class="token punctuation">.</span><span class="token function">addNewRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>ACCENT_1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 渲染数据</span>        ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>dataRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>dataRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setChartCatAxLabel</span><span class="token punctuation">(</span>CTAxDataSource cttAxDataSource<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> xString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>xString<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cttAxDataSource<span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>xString<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            CTStrData ctStrData <span class="token operator">=</span> cttAxDataSource<span class="token punctuation">.</span><span class="token function">addNewStrLit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> xlen <span class="token operator">=</span> xString<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> xlen<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                CTStrVal ctStrVal <span class="token operator">=</span> ctStrData<span class="token punctuation">.</span><span class="token function">addNewPt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ctStrVal<span class="token punctuation">.</span><span class="token function">setIdx</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>                ctStrVal<span class="token punctuation">.</span><span class="token function">setV</span><span class="token punctuation">(</span>xString<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataLabel</span><span class="token punctuation">(</span>CTBarChart ctBarChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setDLShowOpts</span><span class="token punctuation">(</span>ctBarChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataLabel</span><span class="token punctuation">(</span>CTLineChart ctLineChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTDLbls dlbls <span class="token operator">=</span> ctLineChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDLShowOpts</span><span class="token punctuation">(</span>dlbls<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDLPosition</span><span class="token punctuation">(</span>dlbls<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置散点图各图例的显示     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataLabel</span><span class="token punctuation">(</span>CTScatterChart scatterChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTDLbls ctdLbls <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowLegendKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowSerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowBubbleSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataLabel</span><span class="token punctuation">(</span>CTRadarChart ctRadarChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分类标签等是否显示</span>        CTDLbls ctdLbls <span class="token operator">=</span> ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowLegendKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowSerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowBubbleSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDLPosition</span><span class="token punctuation">(</span>CTDLbls dlbls<span class="token punctuation">,</span> STDLblPos<span class="token punctuation">.</span>Enum e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span>            dlbls<span class="token punctuation">.</span><span class="token function">addNewDLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STDLblPos<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            dlbls<span class="token punctuation">.</span><span class="token function">addNewDLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDLShowOpts</span><span class="token punctuation">(</span>CTDLbls dlbls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加图形示例的字符串</span>        dlbls<span class="token punctuation">.</span><span class="token function">addNewShowSerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加x轴的坐标字符</span>        dlbls<span class="token punctuation">.</span><span class="token function">addNewShowCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加图形示例的图</span>        dlbls<span class="token punctuation">.</span><span class="token function">addNewShowLegendKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加x对应y的---</span>        <span class="token comment" spellcheck="true">// dlbls.addNewShowVal().setVal(false);</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAxIds</span><span class="token punctuation">(</span>CTRadarChart ctRadarChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAxIds</span><span class="token punctuation">(</span>CTBarChart ctBarChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctBarChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctBarChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAxIds</span><span class="token punctuation">(</span>CTLineChart ctLineChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctLineChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAxIds</span><span class="token punctuation">(</span>CTScatterChart scatterChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setLegend</span><span class="token punctuation">(</span>CTChart ctChart<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTLegend ctLegend <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">addNewLegend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLegend<span class="token punctuation">.</span><span class="token function">addNewLegendPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STLegendPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLegend<span class="token punctuation">.</span><span class="token function">addNewOverlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setCatAx</span><span class="token punctuation">(</span>CTPlotArea ctPlotArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTCatAx ctCatAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewCatAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id of the cat axis</span>        CTScaling ctScaling <span class="token operator">=</span> ctCatAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctScaling<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STOrientation<span class="token punctuation">.</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctCatAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctCatAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id of the val axis</span>        ctCatAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickLblPos<span class="token punctuation">.</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setScatterValAx</span><span class="token punctuation">(</span>CTPlotArea ctPlotArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置Y坐标</span>        CTValAx ctValAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewValAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTScaling ctScaling1 <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctScaling1<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Y轴的对比线</span>        CTShapeProperties ctShapeProperties <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorGridlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTLineProperties ctLineProperties <span class="token operator">=</span> ctShapeProperties<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties<span class="token punctuation">.</span><span class="token function">setCap</span><span class="token punctuation">(</span>STLineCap<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties<span class="token punctuation">.</span><span class="token function">setCmpd</span><span class="token punctuation">(</span>STCompoundLine<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties<span class="token punctuation">.</span><span class="token function">setAlgn</span><span class="token punctuation">(</span>STPenAlignment<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不显示Y轴上的坐标刻度线</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewMinorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setRadarValAx</span><span class="token punctuation">(</span>CTPlotArea ctPlotArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTValAx ctValAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewValAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewMinorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置网格线</span>        CTShapeProperties ctShapeProperties <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorGridlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTLineProperties ctLineProperties1 <span class="token operator">=</span> ctShapeProperties<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties1<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties1<span class="token punctuation">.</span><span class="token function">setCap</span><span class="token punctuation">(</span>STLineCap<span class="token punctuation">.</span>FLAT<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties1<span class="token punctuation">.</span><span class="token function">setCmpd</span><span class="token punctuation">(</span>STCompoundLine<span class="token punctuation">.</span>SNG<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctLineProperties1<span class="token punctuation">.</span><span class="token function">setAlgn</span><span class="token punctuation">(</span>STPenAlignment<span class="token punctuation">.</span>CTR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 值的纵坐标线，不显示</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 值的纵坐标值，不显示</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewTxPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewPPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewDefRPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 不要y轴的标签，或者y轴尽可能的窄</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setValAx</span><span class="token punctuation">(</span>CTPlotArea ctPlotArea<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTValAx ctValAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewValAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id of the val axis</span>        CTScaling ctScaling <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctScaling<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STOrientation<span class="token punctuation">.</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不现实y轴</span><span class="token comment" spellcheck="true">//        ctValAx.addNewDelete().setVal(true);</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// id of the cat axis</span>        ctValAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickLblPos<span class="token punctuation">.</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 图标标题</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setChartTitle</span><span class="token punctuation">(</span>XSSFChart xchart<span class="token punctuation">,</span> String titleStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CTChart ctChart <span class="token operator">=</span> xchart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTTitle title <span class="token operator">=</span> CTTitle<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTTx cttx <span class="token operator">=</span> title<span class="token punctuation">.</span><span class="token function">addNewTx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTStrData sd <span class="token operator">=</span> CTStrData<span class="token punctuation">.</span>Factory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CTStrVal str <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">addNewPt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">setIdx</span><span class="token punctuation">(</span><span class="token number">123459</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">setV</span><span class="token punctuation">(</span>titleStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        cttx<span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStrCache</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctChart<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用POI结合Excel的行列生成原生散点图(XY图)</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E7%B0%87%E7%8A%B6%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E7%B0%87%E7%8A%B6%E6%9F%B1%E7%8A%B6%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用POI结合Excel的行列生成原生散点图-XY图"><a href="#使用POI结合Excel的行列生成原生散点图-XY图" class="headerlink" title="使用POI结合Excel的行列生成原生散点图(XY图)"></a>使用POI结合Excel的行列生成原生散点图(XY图)</h1><h2 id="一、先放最后输出的结果图："><a href="#一、先放最后输出的结果图：" class="headerlink" title="一、先放最后输出的结果图："></a>一、先放最后输出的结果图：</h2><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/ScatterChart.png" alt="雷达图"></p><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createScatterChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    XSSFWorkbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XSSFSheet sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"散点图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Row row<span class="token punctuation">;</span>    Cell cell<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">105</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"S"</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span><span class="token string">"预选赛项目得分分布图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setAutoTitleDeleted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewPlotVisOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewDispBlanksAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STDispBlanksAs<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewShowDLblsOverMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个散点图</span>    CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">getPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScatterChart scatterChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewScatterChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewScatterStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STScatterStyle<span class="token punctuation">.</span>LINE_MARKER<span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不允许自定义颜色</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTCatAx ctCatAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewCatAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScaling ctScaling <span class="token operator">=</span> ctCatAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScaling<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置Y坐标</span>    CTValAx ctValAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewValAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScaling ctScaling1 <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScaling1<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Y轴的对比线</span>    CTShapeProperties ctShapeProperties <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorGridlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTLineProperties ctLineProperties <span class="token operator">=</span> ctShapeProperties<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setCap</span><span class="token punctuation">(</span>STLineCap<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setCmpd</span><span class="token punctuation">(</span>STCompoundLine<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setAlgn</span><span class="token punctuation">(</span>STPenAlignment<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不显示Y轴上的坐标刻度线</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewMinorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置散点图内的信息</span>    CTScatterSer ctScatterSer <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去掉连接线</span>    ctPlotArea<span class="token punctuation">.</span><span class="token function">getScatterChartArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSerArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置散点图各图例的显示</span>    CTDLbls ctdLbls <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowLegendKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowSerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowBubbleSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置标记的样式</span>    CTMarker ctMarker <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctMarker<span class="token punctuation">.</span><span class="token function">addNewSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STMarkerStyle<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctMarker<span class="token punctuation">.</span><span class="token function">addNewSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTShapeProperties ctShapeProperties1 <span class="token operator">=</span> ctMarker<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTLineProperties ctLineProperties1 <span class="token operator">=</span> ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties1<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTAxDataSource ctAxDataSource <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewXVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTStrRef ctStrRef <span class="token operator">=</span> ctAxDataSource<span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctStrRef<span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span><span class="token string">"散点图!$A$1:$A$100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTNumDataSource ctNumDataSource <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewYVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTNumRef ctNumRef <span class="token operator">=</span> ctNumDataSource<span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctNumRef<span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span><span class="token string">"散点图!$B$1:$B$100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctChart<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\user\\Desktop\\out.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    fileOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、XML结构"><a href="#三、XML结构" class="headerlink" title="三、XML结构"></a>三、XML结构</h2><p>以上生成的图表，归根结底是属于XML的一种，通过 <code>Chart</code> 的继承关系可以看到，它其实是 <code>XmlObject</code>的一种实现。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml-fragment</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>char</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/chart<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>main</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>rich</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>bodyPr</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>r</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>t</span><span class="token punctuation">></span></span>预选赛项目得分分布图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>t</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>r</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>rich</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>tx</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>autoTitleDeleted</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>layout</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scatterChart</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scatterStyle</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineMarker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>varyColors</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>idx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>order</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>noFill</span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>marker</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>symbol</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diamond<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>size</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>schemeClr</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9525<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>schemeClr</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>marker</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>xVal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>散点图!$A$1:$A$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>xVal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>yVal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>散点图!$B$1:$B$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>yVal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showLegendKey</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showVal</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showCatName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showSerName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showPercent</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showBubbleSize</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scatterChart</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9525<span class="token punctuation">"</span></span> <span class="token attr-name">cap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span> <span class="token attr-name">cmpd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sng<span class="token punctuation">"</span></span> <span class="token attr-name">algn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctr<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>minorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotVisOnly</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotVisOnly</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>dispBlanksAs</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showDLblsOverMax</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml-fragment</span><span class="token punctuation">></span></span></code></pre><h2 id="四、工具类，我放在-POI生成原生图表-工具类-中"><a href="#四、工具类，我放在-POI生成原生图表-工具类-中" class="headerlink" title="四、工具类，我放在 POI生成原生图表-工具类 中"></a>四、工具类，我放在 <a href="www.baidu.com">POI生成原生图表-工具类</a> 中</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI生成Excel工具类</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90Excel-%E8%A1%A8%E6%A0%BC%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90Excel-%E8%A1%A8%E6%A0%BC%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="POI生成Excel工具类"><a href="#POI生成Excel工具类" class="headerlink" title="POI生成Excel工具类"></a>POI生成Excel工具类</h1><p>该工具类中，包含：创建表格（带默认样式）、自定义样式（通过重写 setDefaultStyle和setFirstCellStyle）、合并单元格、宽度自适应等。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Excel操作工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelTools</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 默认的样式， 垂直水平居中、默认换行     */</span>    <span class="token keyword">private</span> XSSFCellStyle defaultStyle<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 默认的行首样式     */</span>    <span class="token keyword">private</span> XSSFCellStyle firstCellStyle<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy.MM.dd hh:mm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> XSSFWorkbook <span class="token function">createWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        XSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFFont defaultFont <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultFont<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>IndexedColors<span class="token punctuation">.</span>BLACK<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultFont<span class="token punctuation">.</span><span class="token function">setFontHeight</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultFont<span class="token punctuation">.</span><span class="token function">setFontName</span><span class="token punctuation">(</span><span class="token string">"微软雅黑 Light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFCellStyle defaultStyle <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultStyle<span class="token punctuation">.</span><span class="token function">setWrapText</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultStyle<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>HorizontalAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultStyle<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>VerticalAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        defaultStyle<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>defaultFont<span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFFont font <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>IndexedColors<span class="token punctuation">.</span>WHITE<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setFontHeight</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setFontName</span><span class="token punctuation">(</span><span class="token string">"微软雅黑 Light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFCellStyle firstCellStyle <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>HorizontalAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setVerticalAlignment</span><span class="token punctuation">(</span>VerticalAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setFillForegroundColor</span><span class="token punctuation">(</span>IndexedColors<span class="token punctuation">.</span>LIGHT_BLUE<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setFillPattern</span><span class="token punctuation">(</span>FillPatternType<span class="token punctuation">.</span>SOLID_FOREGROUND<span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setBorderBottom</span><span class="token punctuation">(</span>BorderStyle<span class="token punctuation">.</span>THIN<span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setBottomBorderColor</span><span class="token punctuation">(</span>IndexedColors<span class="token punctuation">.</span>LIGHT_BLUE<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setLeftBorderColor</span><span class="token punctuation">(</span>IndexedColors<span class="token punctuation">.</span>LIGHT_BLUE<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstCellStyle<span class="token punctuation">.</span><span class="token function">setRightBorderColor</span><span class="token punctuation">(</span>IndexedColors<span class="token punctuation">.</span>LIGHT_BLUE<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDefaultStyle</span><span class="token punctuation">(</span>defaultStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFirstCellStyle</span><span class="token punctuation">(</span>firstCellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> workbook<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建页</span>    <span class="token keyword">public</span> XSSFSheet <span class="token function">createSheet</span><span class="token punctuation">(</span>XSSFWorkbook workbook<span class="token punctuation">,</span> String sheetName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建表格     *     * @param sheet           页 @NotNull     * @param titles          首行标题 @NotNull     * @param content         填充的内容 @NotNull     * @param rowNumber       开始的行号 @NotNull     * @param colNumber       开始的列号 @NotNull     * @param customRowHeight 自定义行高     * @param cellRangeList   需要合并的单元格     * @param customRowStyle  自定义样式,key 对应行，value 对应样式     * @param customColWidth  自定义宽度自适应     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> titles<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content<span class="token punctuation">,</span>                            Integer rowNumber<span class="token punctuation">,</span> Integer colNumber<span class="token punctuation">,</span>                            <span class="token keyword">boolean</span> customRowHeight<span class="token punctuation">,</span>                            List<span class="token operator">&lt;</span>CellRange<span class="token operator">></span> cellRangeList<span class="token punctuation">,</span>                            Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> XSSFCellStyle<span class="token operator">></span> customRowStyle<span class="token punctuation">,</span>                            Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> customColWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首行填充</span>        <span class="token function">setFirstRow</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> titles<span class="token punctuation">,</span> <span class="token function">getFirstCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rowNumber<span class="token punctuation">,</span> colNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>        rowNumber<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置单元格宽度</span>        <span class="token function">autoWidth</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> titles<span class="token punctuation">,</span> colNumber<span class="token punctuation">,</span> customColWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 填充数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> content<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> rowContent <span class="token operator">=</span> content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            XSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNumber <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>rowNumber <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNumber <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            row<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>customRowHeight <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">800</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XSSFCellStyle cellStyle <span class="token operator">=</span> customRowStyle <span class="token operator">==</span> null <span class="token operator">||</span> customRowStyle<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rowNumber <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                    <span class="token function">getDefaultStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> customRowStyle<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rowNumber <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rowContent<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object colContent <span class="token operator">=</span> rowContent<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                XSSFCell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>colNumber <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果是基本数据类型，则转换为字符串填充; 日期转换输出; List转String输出</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colContent <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">Double</span>                        <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">Float</span>                        <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">Character</span> <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">Byte</span>                        <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">Short</span> <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">Boolean</span>                        <span class="token operator">||</span> colContent <span class="token keyword">instanceof</span> <span class="token class-name">Long</span><span class="token punctuation">)</span>                    cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>colContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colContent <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span>                    cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>colContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>colContent <span class="token keyword">instanceof</span> <span class="token class-name">Iterable</span><span class="token punctuation">)</span>                    cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XSSFRichTextString</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">" \n "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>Iterable<span class="token punctuation">)</span> colContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">" - "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 单元格样式</span>                cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 合并单元格</span>        <span class="token function">mergeRegion</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> cellRangeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 合并单元格     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeRegion</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>CellRange<span class="token operator">></span> cellRangeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cellRangeList <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>CellRange cellRange <span class="token operator">:</span> cellRangeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sheet<span class="token punctuation">.</span><span class="token function">addMergedRegion</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CellRangeAddress</span><span class="token punctuation">(</span>cellRange<span class="token punctuation">.</span><span class="token function">getFirstRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cellRange<span class="token punctuation">.</span><span class="token function">getLastRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cellRange<span class="token punctuation">.</span><span class="token function">getFirstCol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cellRange<span class="token punctuation">.</span><span class="token function">getLastCol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 无需定制样式和宽度的表格     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createTable</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> titles<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content<span class="token punctuation">,</span>                            Integer rowNumber<span class="token punctuation">,</span> Integer colNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">createTable</span><span class="token punctuation">(</span>sheet<span class="token punctuation">,</span> titles<span class="token punctuation">,</span> content<span class="token punctuation">,</span> rowNumber<span class="token punctuation">,</span> colNumber<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 填充首行数据     * 默认按照标题的长度设置单元格宽度     *     * @param sheet       页     * @param cellTitles  标题     * @param headerStyle 首行样式     * @param rowNum      起始行     * @param colNum      起始列     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFirstRow</span><span class="token punctuation">(</span>XSSFSheet sheet<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> cellTitles<span class="token punctuation">,</span> XSSFCellStyle headerStyle<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">,</span> <span class="token keyword">int</span> colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> XSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span> <span class="token operator">:</span> sheet<span class="token punctuation">.</span><span class="token function">getRow</span><span class="token punctuation">(</span>rowNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        row<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String cellName <span class="token operator">:</span> cellTitles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> Cell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>colNum<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>cellName<span class="token punctuation">)</span><span class="token punctuation">;</span>            cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>headerStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 宽度自适应     *     * @param sheet       页     * @param strings     行首     * @param colNumber   起始列     * @param customWidth 自定义宽度     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">autoWidth</span><span class="token punctuation">(</span>Sheet sheet<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings<span class="token punctuation">,</span> Integer colNumber<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> customWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> s <span class="token operator">&lt;</span> strings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> col <span class="token operator">=</span> colNumber <span class="token operator">+</span> s<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>customWidth <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> customWidth<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sheet<span class="token punctuation">.</span><span class="token function">setColumnWidth</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> customWidth<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sheet<span class="token punctuation">.</span><span class="token function">autoSizeColumn</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sheet<span class="token punctuation">.</span><span class="token function">setColumnWidth</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span><span class="token function">getColumnWidth</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">17</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> XSSFCellStyle <span class="token function">getDefaultStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> defaultStyle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDefaultStyle</span><span class="token punctuation">(</span>XSSFCellStyle defaultStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>defaultStyle <span class="token operator">=</span> defaultStyle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> XSSFCellStyle <span class="token function">getFirstCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> firstCellStyle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFirstCellStyle</span><span class="token punctuation">(</span>XSSFCellStyle firstCellStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstCellStyle <span class="token operator">=</span> firstCellStyle<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>合并单元格的对象：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 需要合并的单元格 */</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CellRange</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer firstRow<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer lastRow<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer firstCol<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer lastCol<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">CellRange</span><span class="token punctuation">(</span>Integer firstRow<span class="token punctuation">,</span> Integer lastRow<span class="token punctuation">,</span> Integer firstCol<span class="token punctuation">,</span> Integer lastCol<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstRow <span class="token operator">=</span> firstRow<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastRow <span class="token operator">=</span> lastRow<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstCol <span class="token operator">=</span> firstCol<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastCol <span class="token operator">=</span> lastCol<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CellRange <span class="token function">build</span><span class="token punctuation">(</span>Integer firstRow<span class="token punctuation">,</span> Integer lastRow<span class="token punctuation">,</span> Integer firstCol<span class="token punctuation">,</span> Integer lastCol<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CellRange</span><span class="token punctuation">(</span>firstRow<span class="token punctuation">,</span> lastRow<span class="token punctuation">,</span> firstCol<span class="token punctuation">,</span> lastCol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用POI结合Excel的行列生成原生散点图(XY图)</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E6%95%A3%E7%82%B9%E5%9B%BE/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E6%95%A3%E7%82%B9%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用POI结合Excel的行列生成原生散点图-XY图"><a href="#使用POI结合Excel的行列生成原生散点图-XY图" class="headerlink" title="使用POI结合Excel的行列生成原生散点图(XY图)"></a>使用POI结合Excel的行列生成原生散点图(XY图)</h1><h2 id="一、先放最后输出的结果图："><a href="#一、先放最后输出的结果图：" class="headerlink" title="一、先放最后输出的结果图："></a>一、先放最后输出的结果图：</h2><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/ScatterChart.png" alt="雷达图"></p><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createScatterChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    XSSFWorkbook wb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XSSFSheet sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"散点图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Row row<span class="token punctuation">;</span>    Cell cell<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">105</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span><span class="token string">"S"</span> <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setTitleText</span><span class="token punctuation">(</span><span class="token string">"预选赛项目得分分布图"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">setAutoTitleDeleted</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewPlotVisOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewDispBlanksAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STDispBlanksAs<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctChart<span class="token punctuation">.</span><span class="token function">addNewShowDLblsOverMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个散点图</span>    CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">getPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScatterChart scatterChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewScatterChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewScatterStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STScatterStyle<span class="token punctuation">.</span>LINE_MARKER<span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不允许自定义颜色</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scatterChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTCatAx ctCatAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewCatAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScaling ctScaling <span class="token operator">=</span> ctCatAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScaling<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctCatAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置Y坐标</span>    CTValAx ctValAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewValAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTScaling ctScaling1 <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScaling1<span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Y轴的对比线</span>    CTShapeProperties ctShapeProperties <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorGridlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTLineProperties ctLineProperties <span class="token operator">=</span> ctShapeProperties<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setCap</span><span class="token punctuation">(</span>STLineCap<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setCmpd</span><span class="token punctuation">(</span>STCompoundLine<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties<span class="token punctuation">.</span><span class="token function">setAlgn</span><span class="token punctuation">(</span>STPenAlignment<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不显示Y轴上的坐标刻度线</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewMinorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctValAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置散点图内的信息</span>    CTScatterSer ctScatterSer <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 去掉连接线</span>    ctPlotArea<span class="token punctuation">.</span><span class="token function">getScatterChartArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSerArray</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置散点图各图例的显示</span>    CTDLbls ctdLbls <span class="token operator">=</span> scatterChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowLegendKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowSerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowBubbleSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置标记的样式</span>    CTMarker ctMarker <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewMarker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctMarker<span class="token punctuation">.</span><span class="token function">addNewSymbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STMarkerStyle<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctMarker<span class="token punctuation">.</span><span class="token function">addNewSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTShapeProperties ctShapeProperties1 <span class="token operator">=</span> ctMarker<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTLineProperties ctLineProperties1 <span class="token operator">=</span> ctShapeProperties1<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties1<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctLineProperties1<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>Enum<span class="token punctuation">.</span><span class="token function">forInt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTAxDataSource ctAxDataSource <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewXVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTStrRef ctStrRef <span class="token operator">=</span> ctAxDataSource<span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctStrRef<span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span><span class="token string">"散点图!$A$1:$A$100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTNumDataSource ctNumDataSource <span class="token operator">=</span> ctScatterSer<span class="token punctuation">.</span><span class="token function">addNewYVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CTNumRef ctNumRef <span class="token operator">=</span> ctNumDataSource<span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctNumRef<span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span><span class="token string">"散点图!$B$1:$B$100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctChart<span class="token punctuation">)</span><span class="token punctuation">;</span>    FileOutputStream fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\user\\Desktop\\out.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wb<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">;</span>    fileOut<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、XML结构"><a href="#三、XML结构" class="headerlink" title="三、XML结构"></a>三、XML结构</h2><p>以上生成的图表，归根结底是属于XML的一种，通过 <code>Chart</code> 的继承关系可以看到，它其实是 <code>XmlObject</code>的一种实现。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml-fragment</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>char</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/chart<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>main</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>rich</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>bodyPr</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>r</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>t</span><span class="token punctuation">></span></span>预选赛项目得分分布图<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>t</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>r</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>rich</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>tx</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>autoTitleDeleted</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>layout</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scatterChart</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scatterStyle</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineMarker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>varyColors</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>idx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>order</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>noFill</span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>marker</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>symbol</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>diamond<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>size</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>schemeClr</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9525<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>schemeClr</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>marker</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>xVal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>散点图!$A$1:$A$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>xVal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>yVal</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>散点图!$B$1:$B$100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>yVal</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showLegendKey</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showVal</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showCatName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showSerName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showPercent</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showBubbleSize</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scatterChart</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9525<span class="token punctuation">"</span></span> <span class="token attr-name">cap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span> <span class="token attr-name">cmpd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sng<span class="token punctuation">"</span></span> <span class="token attr-name">algn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctr<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>minorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotVisOnly</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotVisOnly</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>dispBlanksAs</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gap<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showDLblsOverMax</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml-fragment</span><span class="token punctuation">></span></span></code></pre><h2 id="四、工具类，我放在-POI生成原生图表-工具类-中"><a href="#四、工具类，我放在-POI生成原生图表-工具类-中" class="headerlink" title="四、工具类，我放在 POI生成原生图表-工具类 中"></a>四、工具类，我放在 <a href="www.baidu.com">POI生成原生图表-工具类</a> 中</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poi����word����textbox</title>
      <link href="/2018/09/01/POI/poi%E6%93%8D%E4%BD%9Cword%E7%94%9F%E6%88%90textbox/"/>
      <url>/2018/09/01/POI/poi%E6%93%8D%E4%BD%9Cword%E7%94%9F%E6%88%90textbox/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token operator">?</span></code></pre><pre><code>XWPFDocument document = new XWPFDocument();XWPFParagraph paragraph = document.createParagraph();XWPFRun run =  paragraph.createRun();run.setText(&quot;Callout shape over text: Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor Lorem ipsum semit dolor.&quot;);appendCalloutShape(run, &quot;200pt&quot;, &quot;0&quot;, &quot;1in&quot;, &quot;1in&quot;, &quot;black&quot;, &quot;#00FF00&quot;, &quot;The callout\ntext...&quot;, false);paragraph = document.createParagraph();paragraph = document.createParagraph();paragraph = document.createParagraph();paragraph = document.createParagraph();run =  paragraph.createRun();run.setText(&quot;Callout shape:&quot;);appendCalloutShape(run, &quot;1in&quot;, &quot;-150px&quot;, &quot;100px&quot;, &quot;150px&quot;, &quot;#0000FF&quot;, &quot;yellow&quot;, &quot;The callout\ntext...&quot;, true);</code></pre><p>?<code>`</code></p><p>?<code>`</code><br>    FileOutputStream out = new FileOutputStream(“C:\Users\user\Desktop\converter\����.docx”);<br>    document.write(out);<br>    out.close();<br>    document.close();<br>}</p><p>public static void appendCalloutShape(XWPFRun run, String left, String top, String width, String height,<br>                                      String strokecolor, String fillcolor, String calloutext, boolean hashandles) throws Exception {<br>    CTGroup ctGroup = CTGroup.Factory.newInstance();</p><pre><code>CTShape ctShape = ctGroup.addNewShape();ctShape.setCoordsize(&quot;21600,21600&quot;);if (hashandles) { //is not Libreoffice Writer compatible    ctShape.setAdj(&quot;&quot; + 21600*1/3 + &quot;,21600&quot;);    CTFormulas cTFormulas = ctShape.addNewFormulas();    cTFormulas.addNewF().setEqn(&quot;val #0&quot;);    cTFormulas.addNewF().setEqn(&quot;val #1&quot;);    ctShape.setPath2(&quot;m 1,1 l 1,&quot; + 21600*2/3 + &quot;, &quot; + 21600*1/3 + &quot;,&quot; + 21600*2/3 + &quot;, @0,@1, &quot; + 21600*2/3 + &quot;,&quot; + 21600*2/3 + &quot;, 21600,&quot; + 21600*2/3 + &quot;, 21600,1 x e&quot;);    ctShape.addNewHandles().addNewH().setPosition(&quot;#0,#1&quot;);} else { // is Libreoffice Writer compatible    ctShape.setPath2(&quot;m 1,1 l 1,&quot; + 21600*2/3 + &quot;, &quot; + 21600*1/3 + &quot;,&quot; + 21600*2/3 + &quot;, &quot; + 21600*1/3 + &quot;,21600, &quot; + 21600*2/3 + &quot;,&quot; + 21600*2/3 + &quot;, 21600,&quot; + 21600*2/3 + &quot;, 21600,1 x e&quot;);}ctShape.addNewPath().setTextboxrect(&quot;1,1,21600,&quot; + 21600*2/3);ctShape.setStyle(&quot;position:absolute;margin-left:&quot; + left + &quot;;margin-top:&quot; + top + &quot;;width:&quot; + width + &quot;;height:&quot; + height + &quot;;z-index:251659264;visibility:visible;rotation:0;&quot;);ctShape.setStrokecolor(strokecolor);ctShape.setFillcolor(fillcolor);CTTextbox cTTextbox = ctShape.addNewTextbox();CTTxbxContent ctTxbxContent = cTTextbox.addNewTxbxContent();XWPFParagraph textboxparagraph = new XWPFParagraph(ctTxbxContent.addNewP(), run.getDocument());XWPFRun textboxrun = null;String[] lines = calloutext.split(&quot;\n&quot;);for (int i = 0; i &lt; lines.length; i++) {    textboxrun = textboxparagraph.createRun();    textboxrun.setText(lines[i]);    textboxrun.addBreak();}Node ctGroupNode = ctGroup.getDomNode();CTPicture ctPicture = CTPicture.Factory.parse(ctGroupNode);CTR cTR = run.getCTR();cTR.addNewPict();cTR.setPictArray(0, ctPicture);</code></pre><p>}<br>?<code>`</code></p><p><a href="https://stackoverflow.com/questions/53834805/how-to-create-a-wedgerectcallout-shape-in-word-using-apache-poi" target="_blank" rel="noopener">https://stackoverflow.com/questions/53834805/how-to-create-a-wedgerectcallout-shape-in-word-using-apache-poi</a></p><pre><code>```java// �ı����еă��ݺ��韩        XmlObject object = paragraph.getCTP().getRArray(1);        XmlCursor cursor = object.newCursor();        // ���Դ�ӡXmlObject�������鿴��ǰxml�ļ�����        // Ҳ��ͨ��XmlCursor��getName��getTextValue�����鿴��ǰ����Node����ֵ        // �ҵĵ�һ��Ҫ�޸ĵ���������nodeΪ:ע��index        // &lt;xml-fragment&gt; -&gt; &lt;w:pict&gt; -&gt; &lt;v:shape&gt; -&gt; &lt;v:textbox&gt; -&gt;        // &lt;w:txbxContent&gt; -&gt; &lt;w:p&gt; -&gt; &lt;w:r&gt; -&gt; &lt;w:t&gt;        cursor.toChild(1);        cursor.toChild(0);        cursor.toChild(3);        cursor.toChild(0);        cursor.toChild(0);        cursor.toChild(3);        cursor.toChild(1);        cursor.setTextValue(&quot;First&quot;);        // �ҵĵڶ���Ҫ�޸ĵ���������nodeΪ��ע��index        // &lt;w:txbxContent&gt; -&gt; &lt;w:p&gt; -&gt; &lt;w:r&gt; -&gt; &lt;w:t&gt;        cursor.toParent();        cursor.toParent();        cursor.toParent();        cursor.toChild(1);        cursor.toChild(3);        cursor.toChild(1);        cursor.setTextValue(&quot;Second&quot;);</code></pre><p>ͨ�� freemarker + flying-saucer-pdf ����������Ⱦ�� html���ٽ�htmlת�� pdf���������ڣ�ֻ��֧�� ����ͺ��� ��������</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>待学习</title>
      <link href="/2018/09/01/SpringCloud/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7/"/>
      <url>/2018/09/01/SpringCloud/%E5%85%A8%E9%93%BE%E8%B7%AF%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="待学习博客"><a href="#待学习博客" class="headerlink" title="待学习博客"></a>待学习博客</h1><p><a href="https://juejin.im/post/5a7a9e0af265da4e914b46f1" target="_blank" rel="noopener">全链路监控</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>POI+XChart图形报告</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90Excel-%E5%9B%BE%E8%A1%A8%E7%94%9F%E6%88%90/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90Excel-%E5%9B%BE%E8%A1%A8%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="POI-XChart图形报告"><a href="#POI-XChart图形报告" class="headerlink" title="POI+XChart图形报告"></a>POI+XChart图形报告</h1><h2 id="一、基础示例，写入Excel"><a href="#一、基础示例，写入Excel" class="headerlink" title="一、基础示例，写入Excel"></a>一、基础示例，写入Excel</h2><p>生成一个图形，并将其写入 Excel 中。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.xlsx"</span><span class="token punctuation">;</span>    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> xData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> yData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create Chart</span>    XYChart chart <span class="token operator">=</span> QuickChart<span class="token punctuation">.</span><span class="token function">getChart</span><span class="token punctuation">(</span><span class="token string">"Sample Chart"</span><span class="token punctuation">,</span> <span class="token string">"X"</span><span class="token punctuation">,</span> <span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token string">"y(x)"</span><span class="token punctuation">,</span> xData<span class="token punctuation">,</span> yData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将图表转换为byte数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> BitmapEncoder<span class="token punctuation">.</span><span class="token function">getBitmapBytes</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>XSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ByteArrayInputStream inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>         FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建Excel</span>        XSSFSheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"图表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 写入Excel的指定位置</span>        XSSFDrawing shapes <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFClientAnchor anchor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFClientAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shapes<span class="token punctuation">.</span><span class="token function">createPicture</span><span class="token punctuation">(</span>anchor<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span><span class="token function">getWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPicture</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> HSSFWorkbook<span class="token punctuation">.</span>PICTURE_TYPE_PNG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将Excel写到文件中</span>        workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://images.gitee.com/uploads/images/2019/0121/180421_34b56169_1872936.png" alt="生成的基础图片"></p><blockquote><p> 上面我们演示了如何<code>将 XChart生成的图片导入 Excel</code>，下面的部分，都会将生成的图形导出为图片，如果需要导入Excel的话，只需要将chart套入第一章即可。</p></blockquote><h2 id="二、将生成的图形导出成为图片"><a href="#二、将生成的图形导出成为图片" class="headerlink" title="二、将生成的图形导出成为图片"></a>二、将生成的图形导出成为图片</h2><p>获取随机数的方法也是通用的，这里先给出，具体的数据应该根据业务而定：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 获取随机数     * @param numPoints 随机的数量     * @return 随机数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRandomWalk</span><span class="token punctuation">(</span><span class="token keyword">int</span> numPoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>numPoints<span class="token punctuation">]</span><span class="token punctuation">;</span>        y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> y<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.png"</span><span class="token punctuation">;</span>    XYChart chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XYChartBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xAxisTitle</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yAxisTitle</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setYAxisMin</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setYAxisMax</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    XYSeries series <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"新绿"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token function">getRandomWalk</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    series<span class="token punctuation">.</span><span class="token function">setMarker</span><span class="token punctuation">(</span>SeriesMarkers<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>    BitmapEncoder<span class="token punctuation">.</span><span class="token function">saveBitmap</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><img src="https://images.gitee.com/uploads/images/2019/0121/181356_e145341d_1872936.png" alt="输入图片说明" title="屏幕截图.png"></p><h2 id="面积图"><a href="#面积图" class="headerlink" title="面积图"></a>面积图</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.png"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create Chart</span>    XYChart chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XYChartBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xAxisTitle</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yAxisTitle</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Customize Chart</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLegendPosition</span><span class="token punctuation">(</span>Styler<span class="token punctuation">.</span>LegendPosition<span class="token punctuation">.</span>InsideNE<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAxisTitlesVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDefaultSeriesRenderStyle</span><span class="token punctuation">(</span>XYSeries<span class="token punctuation">.</span>XYSeriesRenderStyle<span class="token punctuation">.</span>Area<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Series</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BitmapEncoder<span class="token punctuation">.</span><span class="token function">saveBitmap</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://images.gitee.com/uploads/images/2019/0121/182136_bba89ebf_1872936.png" alt="面积图" title="屏幕截图.png"></p><h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.png"</span><span class="token punctuation">;</span>    PieChart chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PieChartBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Customize Chart</span>    Color<span class="token punctuation">[</span><span class="token punctuation">]</span> sliceColors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">159</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSeriesColors</span><span class="token punctuation">(</span>sliceColors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Series</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"Gold"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"Silver"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"Platinum"</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"Copper"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"Zinc"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BitmapEncoder<span class="token punctuation">.</span><span class="token function">saveBitmap</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/bignzhuang.png" alt="饼状图"></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.png"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create Chart</span>    XYChart chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XYChartBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Customize Chart</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDefaultSeriesRenderStyle</span><span class="token punctuation">(</span>XYSeries<span class="token punctuation">.</span>XYSeriesRenderStyle<span class="token punctuation">.</span>Scatter<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setChartTitleVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLegendPosition</span><span class="token punctuation">(</span>Styler<span class="token punctuation">.</span>LegendPosition<span class="token punctuation">.</span>InsideSW<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMarkerSize</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Series</span>    List<span class="token operator">&lt;</span>Double<span class="token operator">></span> xData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Double<span class="token operator">></span> yData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        xData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        yData<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1000000</span> <span class="token operator">+</span> random<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"Gaussian Blob"</span><span class="token punctuation">,</span> xData<span class="token punctuation">,</span> yData<span class="token punctuation">)</span><span class="token punctuation">;</span>    BitmapEncoder<span class="token punctuation">.</span><span class="token function">saveBitmap</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/sandian.png" alt="散点图"></p><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.png"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create Chart</span>    CategoryChart chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CategoryChartBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Score Histogram"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xAxisTitle</span><span class="token punctuation">(</span><span class="token string">"Score"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yAxisTitle</span><span class="token punctuation">(</span><span class="token string">"Number"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Customize Chart</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLegendPosition</span><span class="token punctuation">(</span>Styler<span class="token punctuation">.</span>LegendPosition<span class="token punctuation">.</span>InsideNW<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHasAnnotations</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Series</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"test 1"</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BitmapEncoder<span class="token punctuation">.</span><span class="token function">saveBitmap</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/zhuzhuang.png" alt="柱状图"></p><h2 id="堆叠图"><a href="#堆叠图" class="headerlink" title="堆叠图"></a>堆叠图</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.png"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Create Chart</span>    CategoryChart chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CategoryChartBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Score Histogram"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xAxisTitle</span><span class="token punctuation">(</span><span class="token string">"Mean"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yAxisTitle</span><span class="token punctuation">(</span><span class="token string">"Count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Customize Chart</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLegendPosition</span><span class="token punctuation">(</span>Styler<span class="token punctuation">.</span>LegendPosition<span class="token punctuation">.</span>InsideNW<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAvailableSpaceFill</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOverlapped</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Series</span>    Histogram histogram1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Histogram</span><span class="token punctuation">(</span><span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Histogram histogram2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Histogram</span><span class="token punctuation">(</span><span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"histogram 1"</span><span class="token punctuation">,</span> histogram1<span class="token punctuation">.</span><span class="token function">getxAxisData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> histogram1<span class="token punctuation">.</span><span class="token function">getyAxisData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"histogram 2"</span><span class="token punctuation">,</span> histogram2<span class="token punctuation">.</span><span class="token function">getxAxisData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> histogram2<span class="token punctuation">.</span><span class="token function">getyAxisData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BitmapEncoder<span class="token punctuation">.</span><span class="token function">saveBitmap</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Double<span class="token operator">></span> <span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Double<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/duidie.png" alt="堆叠图"></p><h2 id="百分比堆叠柱状图"><a href="#百分比堆叠柱状图" class="headerlink" title="百分比堆叠柱状图"></a>百分比堆叠柱状图</h2><p>这个其实是堆叠图的变种。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.png"</span><span class="token punctuation">;</span>    CategoryChart chart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CategoryChartBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setChartBackgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLegendBorderColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLegendPosition</span><span class="token punctuation">(</span>Styler<span class="token punctuation">.</span>LegendPosition<span class="token punctuation">.</span>InsideNW<span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAvailableSpaceFill</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">getStyler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStacked</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> xData <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"学院A"</span><span class="token punctuation">,</span> <span class="token string">"学院B"</span><span class="token punctuation">,</span> <span class="token string">"学院C"</span><span class="token punctuation">,</span><span class="token string">"学院D"</span><span class="token punctuation">,</span><span class="token string">"学院E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"得分A"</span><span class="token punctuation">,</span> xData<span class="token punctuation">,</span> <span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"得分B"</span><span class="token punctuation">,</span> xData<span class="token punctuation">,</span> <span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"得分C"</span><span class="token punctuation">,</span> xData<span class="token punctuation">,</span> <span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    chart<span class="token punctuation">.</span><span class="token function">addSeries</span><span class="token punctuation">(</span><span class="token string">"得分D"</span><span class="token punctuation">,</span> xData<span class="token punctuation">,</span> <span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BitmapEncoder<span class="token punctuation">.</span><span class="token function">saveBitmap</span><span class="token punctuation">(</span>chart<span class="token punctuation">,</span> filePath<span class="token punctuation">,</span> BitmapEncoder<span class="token punctuation">.</span>BitmapFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>Double<span class="token operator">></span> <span class="token function">getGaussianData</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Double<span class="token operator">></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>RandomUtils<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/baifenbi.png" alt="百分比堆叠柱状图"></p><p>参考：</p><p> (1) <a href="https://knowm.org/open-source/xchart/xchart-example-code/" target="_blank" rel="noopener">XChart Demo</a></p><p> (2) 自己</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-微服务重构</title>
      <link href="/2018/09/01/SpringCloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%87%8D%E6%9E%84/"/>
      <url>/2018/09/01/SpringCloud/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务重构"><a href="#微服务重构" class="headerlink" title="微服务重构"></a>微服务重构</h1><p>在重构应用中，可以通过以下几个方法梳理：</p><ol><li>每个 Rest 服务都是一个潜在的微服务</li><li>每个 SOAP web 服务或 EJB 都是一个潜在的微服务</li><li>使用领域驱动设计(domain-driven design)发现企业资产，这些资产可能是微服务。</li></ol><p>在<strong>重构数据</strong>方面，需要考虑以下几个方面：(1)<strong>寻找与其他数据关联不大的数据孤岛</strong>，检查系统的实体-关系图；如果有与其他数据断开的数据，就是一个潜在的数据重构点；(2)<strong>数据表非规范化</strong>，对高规范化数据库中非规范化一些数据表以将数据重组为更大的逻辑块，其目的是增加数据冗余度使其更容易被打破；(3)<strong>反向批数据更新</strong>，对数据重构时需要考虑数据重构失败时可批量地将新数据反向导回旧的数据模式；(4)<strong>使用主数据管理</strong>，对被广泛使用的数据实体组成一个单一的一致性视图，并开发相应的微服务与主数据一起工作；(5)在SQL数据库中<strong>寻找存储在BLOB(二进制大对象)字段</strong>类型中的代码，转而将这些对象存储在NoSQL数据库中，例如以键值(Key-value)存储方式存储；(6)寻找活跃的记录模式，与其他无关的Flat对象，使用文档模式数据库进行存储，例如Cloudant或Mongo等。</p><p>微服务重构后还需要<strong>重新打包应用</strong>，包括：(1)<strong>分割应用的EAR文件</strong>并打包成独立的WAR文件；(2)应用“<strong>一个容器一个服务</strong>”，分别部署每个WAR文件至其自有的WebSphereLiberty实例运行时或Docker容器中；(3)<strong>分别构建、部署和管理</strong>,为每个WAR文件使用独立的DevOps管线,每个WAR文件独立伸缩和管理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot消息机制(一)-WebSocket介绍</title>
      <link href="/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%B8%80)-WebSocket%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%B8%80)-WebSocket%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>#SpringBoot消息机制(一)-WebSocket介绍<br><a href="https://my.oschina.net/genghz/blog/1796965" target="_blank" rel="noopener">https://my.oschina.net/genghz/blog/1796965</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataMongoDB(二)</title>
      <link href="/2018/09/01/SpringData/Spring-Data-MongoDB%EF%BC%882%EF%BC%89/"/>
      <url>/2018/09/01/SpringData/Spring-Data-MongoDB%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Data-MongoDB-（二）-查询"><a href="#Spring-Data-MongoDB-（二）-查询" class="headerlink" title="Spring Data MongoDB （二） 查询"></a>Spring Data MongoDB （二） 查询</h1><h2 id="创建查询（去重、区间、忽略大小写等）"><a href="#创建查询（去重、区间、忽略大小写等）" class="headerlink" title="创建查询（去重、区间、忽略大小写等）"></a>创建查询（去重、区间、忽略大小写等）</h2><p>查询的构建机制，将截断前缀 find…By、 read…By、 query…By、 count…By、 get…By 等，从剩余部分开始解析，省略号中可以使用如：Distinct、Between、LessThan、GreaterThan、Like等表达式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>  List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByEmailAddressAndLastname</span><span class="token punctuation">(</span>EmailAddress emailAddress<span class="token punctuation">,</span> String lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 Distinct 去重</span>  List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findDistinctPeopleByLastnameOrFirstname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> String firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findPeopleDistinctByLastnameOrFirstname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> String firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 IgnoreCase 忽略大小写查询</span>  List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByLastnameIgnoreCase</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 AllIgnoreCase 全部忽略大小写</span>  List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByLastnameAndFirstnameAllIgnoreCase</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> String firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 OrderBy (Field) ASC/DESC 进行排序</span>  List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByLastnameOrderByFirstnameAsc</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>  List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByLastnameOrderByFirstnameDesc</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="属性表达式（子属性查询）"><a href="#属性表达式（子属性查询）" class="headerlink" title="属性表达式（子属性查询）"></a>属性表达式（子属性查询）</h2><p>即一个被管理实体的属性，在查询时，会去查找该属性类的嵌套属性类。如：Person 有一个 Health 属性类，二Health 也有一个 HeartIm 属性类，则通过方法名查询为：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByHealthHeartIm</span><span class="token punctuation">(</span>HeartIm heartIm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 相当于 {health.heart:?0}</span></code></pre><p>其查询顺序为，先匹配 healthheartIm 属性是否存在，若否，匹配 healthHeart.Im ，最后才是 health.Heart.Im。再没有则接着向下拆分。为了解决模糊不清的含义，我们可以在方法名中使用 “_” 手动创建分割点。</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token function">findByHealth_HeartIm</span><span class="token punctuation">(</span>HeartIm heartIm<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="特殊参数（分页、排序）"><a href="#特殊参数（分页、排序）" class="headerlink" title="特殊参数（分页、排序）"></a>特殊参数（分页、排序）</h2><p>除了在查询中定义处理方法参数之外，还有一些特殊的类型，如：Pageable 和 Sort，用于分页和排序:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Page 接口中返回了元素的总数、可分页数等，其实是通过底层触发 count 方法进行了总数查询</span>Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Slice 仅仅知道是否有下一个可用的 Slice，在遍历大结果集时非常有效</span>Slice<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="限制查询结果（Top、First等）"><a href="#限制查询结果（Top、First等）" class="headerlink" title="限制查询结果（Top、First等）"></a>限制查询结果（Top、First等）</h2><p>查询方法的结果可以通过关键字：first、top 来限制，紧跟随的数值会限定长度，默认为1</p><pre class=" language-java"><code class="language-java">User <span class="token function">findFirstByOrderByLastnameAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>User <span class="token function">findTopByOrderByAgeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Page<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryFirst10ByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>Slice<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findTop3ByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findFirst10ByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findTop10ByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="查询结果流（Stream）"><a href="#查询结果流（Stream）" class="headerlink" title="查询结果流（Stream）"></a>查询结果流（Stream）</h2><p>查询的结果可以使用 java8 的 Stream<t> 来处理，这样可以使用 stream 的良好性能。</t></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u"</span><span class="token punctuation">)</span>Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAllByCustomQueryAndStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">readAllByFirstnameNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">"select u from User u"</span><span class="token punctuation">)</span>Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">streamAllPaged</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为 Stream 使用了底层的资源，所以在使用之后必须关闭：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>Stream<span class="token operator">&lt;</span>User<span class="token operator">></span> stream <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAllByCustomQueryAndStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而且，并不是所有的 Spring Data 模块都支持 Stream</p><h2 id="异步查询结果"><a href="#异步查询结果" class="headerlink" title="异步查询结果"></a>异步查询结果</h2><p>Repository 的查询方法可以异步执行，这意味着该方法在调用时会立即返回，但是 <code>实际的查询要提交给 Spring 的任务TaskExecutor</code></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Future 的常用方法： isCancelled():boolean    isDone():boolean    get():V     get(long timeout,@NotNull TimeUnit unit):V*/</span><span class="token annotation punctuation">@Async</span>Future<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByFirstname</span><span class="token punctuation">(</span>String firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// java.util.concurrent.Future          </span><span class="token annotation punctuation">@Async</span>CompletableFuture<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findOneByFirstname</span><span class="token punctuation">(</span>String firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Java 8 的 java.util.concurrent.CompletableFuture</span><span class="token annotation punctuation">@Async</span>ListenableFuture<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findOneByLastname</span><span class="token punctuation">(</span>String lastname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// org.springframework.util.concurrent.ListenableFuture</span></code></pre><h2 id="生成-Repository-实例"><a href="#生成-Repository-实例" class="headerlink" title="生成 Repository 实例"></a>生成 Repository 实例</h2><p>使用 xml 配置的方式 指定repositories 扫描的包路径：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>repositories base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.acme.repositories"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><p>使用注解的方式：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span><span class="token string">"com.acme.repositories"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ApplicationConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    EntityManagerFactory <span class="token function">entityManagerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// … }</span><span class="token punctuation">}</span></code></pre><blockquote><p>以上是 Spring Data 的公共基础部分，再往下就是 MongoDBFactory 等的底层实现了。才疏学浅，看不下去啊。就到这里吧，第八章。</p></blockquote><p>文章总结于：<a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#dependencies.spring-framework" target="_blank" rel="noopener">https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#dependencies.spring-framework</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot消息机制(二)-Stomp协议</title>
      <link href="/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%BA%8C)-Stomp%E5%8D%8F%E8%AE%AE/"/>
      <url>/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E4%BA%8C)-Stomp%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot消息机制-二-Stomp协议"><a href="#SpringBoot消息机制-二-Stomp协议" class="headerlink" title="SpringBoot消息机制(二)-Stomp协议"></a>SpringBoot消息机制(二)-Stomp协议</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用POI导出Excel</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90Excel-%E5%9F%BA%E7%A1%80%E7%94%9F%E6%88%90/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90Excel-%E5%9F%BA%E7%A1%80%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="使用POI导出Excel"><a href="#使用POI导出Excel" class="headerlink" title="使用POI导出Excel"></a>使用POI导出Excel</h1><h2 id="一、引入POI4-0的包"><a href="#一、引入POI4-0的包" class="headerlink" title="一、引入POI4.0的包"></a>一、引入POI4.0的包</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.poi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>poi-ooxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="二、普通的Excel生成"><a href="#二、普通的Excel生成" class="headerlink" title="二、普通的Excel生成"></a>二、普通的Excel生成</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.xlsx"</span><span class="token punctuation">;</span>     <span class="token keyword">try</span><span class="token punctuation">(</span>XSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个 10*5 的表格</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XSSFCell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"第%s行，第%s列"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果如下：</p><p><img src="https://images.gitee.com/uploads/images/2019/0121/161334_ee08a1e8_1872936.png" alt="正常导出的Excel"></p><blockquote><p> 这里返回的结果可能挤在一起了，这是因为我们没有设置单元格的宽高。</p></blockquote><h2 id="三、加上行首、样式"><a href="#三、加上行首、样式" class="headerlink" title="三、加上行首、样式"></a>三、加上行首、样式</h2><p>我们先取首行，填充行首，并为其设置样式（如居中、加粗等）。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String filePath <span class="token operator">=</span> <span class="token string">"C:\\Users\\user\\Desktop\\first.xlsx"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>XSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        XSSFSheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span><span class="token string">"普通表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自定义样式：居中、蓝色、加粗</span>        <span class="token keyword">final</span> XSSFFont font <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createFont</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setBold</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        font<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>IndexedColors<span class="token punctuation">.</span>BLUE<span class="token punctuation">.</span><span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XSSFCellStyle cellStyle <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createCellStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cellStyle<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>        cellStyle<span class="token punctuation">.</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>HorizontalAlignment<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置首行</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> titles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"行首1"</span><span class="token punctuation">,</span><span class="token string">"行首2"</span><span class="token punctuation">,</span><span class="token string">"行首3"</span><span class="token punctuation">,</span><span class="token string">"行首4"</span><span class="token punctuation">,</span><span class="token string">"行首5"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        XSSFRow first <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> titles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XSSFCell cell <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cell<span class="token punctuation">.</span><span class="token function">setCellStyle</span><span class="token punctuation">(</span>cellStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 填充数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XSSFCell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"第%s行，第%s列"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 设置宽度自适应</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> o <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> o<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           sheet<span class="token punctuation">.</span><span class="token function">autoSizeColumn</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sheet<span class="token punctuation">.</span><span class="token function">setColumnWidth</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span><span class="token function">getColumnWidth</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">17</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果如下：</p><p><img src="https://images.gitee.com/uploads/images/2019/0121/174309_564e9d53_1872936.png" alt="带样式的Excel"></p><p>具体单元格的样式，我们可以在 <code>cellStyle</code> 中设置，如果需要多种样式组合的话，可以通过 <code>XSSFWorkbook</code> 创建多个，在指定位置进行设置。</p><blockquote><p> 通过以上代码可以看出，POI 操作 Excel 其实就是在操作 Row(行) 和 Col(列)，其数据可以抽象为一个 <code>二维数组</code>，只需要对二维数组进行遍历，即可渲染Excel数据。</p></blockquote><p>具体的方法工具类，<a href="www.baidu.com">贴在这里</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2018/09/01/MarkDown/MarkDown-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/09/01/MarkDown/MarkDown-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="sfMarkDown语法d"><a href="#sfMarkDown语法d" class="headerlink" title="sfMarkDown语法d"></a>sfMarkDown语法d</h1><p>“=”是最高阶标题，Setext形式，标记等号上一行的段落</p><p>“-”是二阶标题，同“=”的作用</p><hr><blockquote><p>区块引用则使用 email 形式的’&gt;’角括号</p><p>中间使用一行回车来换行，如果不带”&gt;”括号，则分块<br>这都是一个块</p></blockquote><h2 id="修饰和强调："><a href="#修饰和强调：" class="headerlink" title="修饰和强调："></a>修饰和强调：</h2><blockquote><p>Markdown使用星号和底线<br>来标记需要 <em>强调</em> 的 <strong>_区域_</strong></p><p>一个 <em> 或 _ 会将包含的字体</em>倾斜*，两个则会_加粗_,三个则会 <strong><em>加粗和倾斜</em></strong></p></blockquote><h2 id="列表："><a href="#列表：" class="headerlink" title="列表："></a>列表：</h2><h3 id="无序列表使用星号、加号和减号来作为列表的项目标记，这些符号都是可以使用的："><a href="#无序列表使用星号、加号和减号来作为列表的项目标记，这些符号都是可以使用的：" class="headerlink" title="无序列表使用星号、加号和减号来作为列表的项目标记，这些符号都是可以使用的："></a>无序列表使用星号、加号和减号来作为列表的项目标记，这些符号都是可以使用的：</h3><ul><li>Candy</li><li>Jack</li></ul><ul><li>cc</li><li>dd</li></ul><ul><li>dd</li><li>ee</li></ul><h3 id="输出的结果都会是HTML中的ul"><a href="#输出的结果都会是HTML中的ul" class="headerlink" title="输出的结果都会是HTML中的ul"></a>输出的结果都会是HTML中的ul</h3><h3 id="有序列表则是使用一般的数字接着一个英文句点作为项目标记："><a href="#有序列表则是使用一般的数字接着一个英文句点作为项目标记：" class="headerlink" title="有序列表则是使用一般的数字接着一个英文句点作为项目标记："></a>有序列表则是使用一般的数字接着一个英文句点作为项目标记：</h3><blockquote><ol><li>Red</li><li>Green</li><li>Blue</li></ol></blockquote><h3 id="输出的结果是HTML中的ol"><a href="#输出的结果是HTML中的ol" class="headerlink" title="输出的结果是HTML中的ol"></a>输出的结果是HTML中的ol</h3><h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h2><h3 id="MarkDown-支持两种形式的链接语法：行内和参考两种形式，两种都是使用角括号来把文字转成链接。"><a href="#MarkDown-支持两种形式的链接语法：行内和参考两种形式，两种都是使用角括号来把文字转成链接。" class="headerlink" title="MarkDown 支持两种形式的链接语法：行内和参考两种形式，两种都是使用角括号来把文字转成链接。"></a>MarkDown 支持两种形式的链接语法：行内和参考两种形式，两种都是使用角括号来把文字转成链接。</h3><blockquote><p>行内形式是直接在后面用括号直接接上链接：</p><p>This is an [example link]  (<a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> “With a Title”) .</p><p>相当于HTML中的\<a>标签</a></p></blockquote><h2 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h2><h3 id="图片的语法和链接很像"><a href="#图片的语法和链接很像" class="headerlink" title="图片的语法和链接很像"></a>图片的语法和链接很像</h3><blockquote><p>行内形式(title 是选择性的)</p><p><img src="/path/to/image.jpg" alt="alt text" title="Title"></p><p>如果想直接显示代码，在括号前加上转义字符即可</p></blockquote><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><h3 id="在一般的段落文字中，你可以使用反引号-来标记代码区段，区段内的-amp-lt-gt-都会被自动转换成HTML实体，这项特性让你可以很容易在代码区段插入HTML代码："><a href="#在一般的段落文字中，你可以使用反引号-来标记代码区段，区段内的-amp-lt-gt-都会被自动转换成HTML实体，这项特性让你可以很容易在代码区段插入HTML代码：" class="headerlink" title="在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &amp; &lt; &gt; 都会被自动转换成HTML实体，这项特性让你可以很容易在代码区段插入HTML代码："></a>在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &amp; &lt; &gt; 都会被自动转换成HTML实体，这项特性让你可以很容易在代码区段插入HTML代码：</h3><blockquote><p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags</p><p>I wish SmartyPants used named entities like <code>&amp;mdash;</code></p><p>instead of decimal-encoded entites like <code>&amp;#8212;</code></p></blockquote><pre><code>sdfjlkjdf&lt;p&gt;esdf&lt;/p&gt;&lt;a&gt;sfd&lt;/a&gt;</code></pre><p><code>sdfjlkjdf&lt;p&gt;esdf&lt;/p&gt;&lt;a&gt;sfd&lt;/a&gt;</code></p><pre><code>sdfjlkjdf&lt;p&gt;esdf&lt;/p&gt;&lt;a&gt;sfd&lt;/a&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> MarkDown语法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot消息机制(六)-Apollo介绍与整合</title>
      <link href="/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E5%85%AD)-Apollo%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%95%B4%E5%90%88/"/>
      <url>/2018/09/01/SpringBootWebsocket/SpringBoot%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6(%E5%85%AD)-Apollo%E4%BB%8B%E7%BB%8D%E4%B8%8E%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>#SpringBoot消息机制(六)-Apollo介绍与整合</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用POI结合Excel的行列生成雷达图</title>
      <link href="/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E9%9B%B7%E8%BE%BE%E5%9B%BE/"/>
      <url>/2018/09/01/POI/POI%E7%94%9F%E6%88%90%E5%8E%9F%E7%94%9FExcel-%E9%9B%B7%E8%BE%BE%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="使用POI结合Excel的行列生成雷达图"><a href="#使用POI结合Excel的行列生成雷达图" class="headerlink" title="使用POI结合Excel的行列生成雷达图"></a>使用POI结合Excel的行列生成雷达图</h1><h2 id="一、先放最后输出的结果图："><a href="#一、先放最后输出的结果图：" class="headerlink" title="一、先放最后输出的结果图："></a>一、先放最后输出的结果图：</h2><p><img src="https://koral-home.oss-cn-beijing.aliyuncs.com/blog/RadarChart.png" alt="雷达图"></p><h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createRadar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">final</span> String sheetName <span class="token operator">=</span> <span class="token string">"RadarChart"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>XSSFWorkbook workbook <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XSSFWorkbook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            XSSFSheet sheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span><span class="token function">createSheet</span><span class="token punctuation">(</span>sheetName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                XSSFRow row <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createRow</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                XSSFCell cell <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cell<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                XSSFCell cell1 <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">createCell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cell1<span class="token punctuation">.</span><span class="token function">setCellValue</span><span class="token punctuation">(</span>RandomUtils<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            XSSFDrawing drawing <span class="token operator">=</span> sheet<span class="token punctuation">.</span><span class="token function">createDrawingPatriarch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XSSFClientAnchor anchor <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createAnchor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XSSFChart chart <span class="token operator">=</span> drawing<span class="token punctuation">.</span><span class="token function">createChart</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>            CTChart ctChart <span class="token operator">=</span> chart<span class="token punctuation">.</span><span class="token function">getCTChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctChart<span class="token punctuation">.</span><span class="token function">addNewAutoTitleDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            ctChart.addNewPlotVisOnly().setVal(true);</span><span class="token comment" spellcheck="true">//            ctChart.addNewDispBlanksAs().setVal(STDispBlanksAs.GAP);</span><span class="token comment" spellcheck="true">//            ctChart.addNewShowDLblsOverMax().setVal(false);</span>            CTPlotArea ctPlotArea <span class="token operator">=</span> ctChart<span class="token punctuation">.</span><span class="token function">addNewPlotArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            CTShapeProperties ctShapeProperties = ctPlotArea.addNewSpPr();</span><span class="token comment" spellcheck="true">//            ctShapeProperties.addNewNoFill();</span><span class="token comment" spellcheck="true">//            ctShapeProperties.addNewLn().addNewNoFill();</span><span class="token comment" spellcheck="true">//            ctShapeProperties.addNewEffectLst();</span>            CTRadarChart ctRadarChart <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewRadarChart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 这两个值应该对应着catAx和valAx</span>            ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 分类标签等是否显示</span>            CTDLbls ctdLbls <span class="token operator">=</span> ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewDLbls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowLegendKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowCatName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowSerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctdLbls<span class="token punctuation">.</span><span class="token function">addNewShowBubbleSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 不允许自定义颜色、以及标记的形状</span>            ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewRadarStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STRadarStyle<span class="token punctuation">.</span>MARKER<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewVaryColors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CTRadarSer ctRadarSer <span class="token operator">=</span> ctRadarChart<span class="token punctuation">.</span><span class="token function">addNewSer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewIdx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CTLineProperties ctLineProperties <span class="token operator">=</span> ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineProperties<span class="token punctuation">.</span><span class="token function">addNewRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineProperties<span class="token punctuation">.</span><span class="token function">addNewSolidFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSchemeClr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STSchemeColorVal<span class="token punctuation">.</span>ACCENT_1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 渲染数据</span>            ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewCat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewStrRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>sheetName <span class="token operator">+</span> <span class="token string">"!$A$1:$A$6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctRadarSer<span class="token punctuation">.</span><span class="token function">addNewVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNumRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setF</span><span class="token punctuation">(</span>sheetName <span class="token operator">+</span> <span class="token string">"!$B$2:$B$6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CTCatAx ctCatAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewCatAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewMajorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewMinorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctCatAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            ctCatAx.addNewCrosses().setVal(STCrosses.AUTO_ZERO);</span><span class="token comment" spellcheck="true">//            ctCatAx.addNewAuto().setVal(true);</span><span class="token comment" spellcheck="true">//            ctCatAx.addNewLblAlgn().setVal(STLblAlgn.CTR);</span><span class="token comment" spellcheck="true">//            ctCatAx.addNewLblOffset().setVal(100);</span><span class="token comment" spellcheck="true">//            ctCatAx.addNewNoMultiLvlLbl().setVal(false);</span>            <span class="token comment" spellcheck="true">// spPr</span><span class="token comment" spellcheck="true">//            CTShapeProperties ctShapeProperties = ctCatAx.addNewSpPr();</span><span class="token comment" spellcheck="true">//            ctShapeProperties.addNewNoFill();</span><span class="token comment" spellcheck="true">//            ctShapeProperties.addNewEffectLst();</span><span class="token comment" spellcheck="true">//            CTLineProperties ctLineProperties1 = ctShapeProperties.addNewLn();</span><span class="token comment" spellcheck="true">//            ctLineProperties1.setW(9525);</span><span class="token comment" spellcheck="true">//            ctLineProperties1.setCap(STLineCap.FLAT);</span><span class="token comment" spellcheck="true">//            ctLineProperties1.setCmpd(STCompoundLine.SNG);</span><span class="token comment" spellcheck="true">//            ctLineProperties1.setAlgn(STPenAlignment.CTR);</span><span class="token comment" spellcheck="true">//            CTSchemeColor ctSchemeColor = ctLineProperties1.addNewSolidFill().addNewSchemeClr();</span><span class="token comment" spellcheck="true">//            ctSchemeColor.setVal(STSchemeColorVal.TX_1);</span><span class="token comment" spellcheck="true">//            ctSchemeColor.addNewLumMod().setVal(15000);</span><span class="token comment" spellcheck="true">//            ctSchemeColor.addNewLumOff().setVal(85000);</span>            <span class="token comment" spellcheck="true">// txPr</span><span class="token comment" spellcheck="true">//            CTTextBody ctTextBody = ctCatAx.addNewTxPr();</span><span class="token comment" spellcheck="true">//            CTTextCharacterProperties ctTextCharacterProperties = ctTextBody.addNewP().addNewPPr().addNewDefRPr();</span><span class="token comment" spellcheck="true">//            ctTextCharacterProperties.setU(STTextUnderlineType.NONE);</span><span class="token comment" spellcheck="true">//            ctTextCharacterProperties.setStrike(STTextStrikeType.NO_STRIKE);</span><span class="token comment" spellcheck="true">//            ctTextCharacterProperties.setSz(900);</span><span class="token comment" spellcheck="true">//            ctTextCharacterProperties.setB(false);</span><span class="token comment" spellcheck="true">//            ctTextCharacterProperties.setI(false);</span><span class="token comment" spellcheck="true">//            ctTextCharacterProperties.setBaseline(0);</span><span class="token comment" spellcheck="true">//            ctTextCharacterProperties.setKern(1200);</span><span class="token comment" spellcheck="true">//            CTSchemeColor ctSchemeColor = ctTextCharacterProperties.addNewSolidFill().addNewSchemeClr();</span><span class="token comment" spellcheck="true">//            ctSchemeColor.setVal(STSchemeColorVal.TX_1);</span><span class="token comment" spellcheck="true">//            ctSchemeColor.addNewLumMod().setVal(65000);</span><span class="token comment" spellcheck="true">//            ctSchemeColor.addNewLumOff().setVal(35000);</span>            CTValAx ctValAx <span class="token operator">=</span> ctPlotArea<span class="token punctuation">.</span><span class="token function">addNewValAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123457</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewScaling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>MIN_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewAxPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STAxPos<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewCrossAx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewMinorTickMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>STTickMark<span class="token punctuation">.</span>NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewTickLblPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setVal</span><span class="token punctuation">(</span>NEXT_TO<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            ctValAx.addNewCrosses().setVal(STCrosses.AUTO_ZERO);</span><span class="token comment" spellcheck="true">//            ctValAx.addNewCrossBetween().setVal(STCrossBetween.BETWEEN);</span>            <span class="token comment" spellcheck="true">// 设置网格线</span>            CTShapeProperties ctShapeProperties <span class="token operator">=</span> ctValAx<span class="token punctuation">.</span><span class="token function">addNewMajorGridlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            CTLineProperties ctLineProperties1 <span class="token operator">=</span> ctShapeProperties<span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineProperties1<span class="token punctuation">.</span><span class="token function">setW</span><span class="token punctuation">(</span><span class="token number">9525</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineProperties1<span class="token punctuation">.</span><span class="token function">setCap</span><span class="token punctuation">(</span>STLineCap<span class="token punctuation">.</span>FLAT<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineProperties1<span class="token punctuation">.</span><span class="token function">setCmpd</span><span class="token punctuation">(</span>STCompoundLine<span class="token punctuation">.</span>SNG<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctLineProperties1<span class="token punctuation">.</span><span class="token function">setAlgn</span><span class="token punctuation">(</span>STPenAlignment<span class="token punctuation">.</span>CTR<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 值的纵坐标线，不显示</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewSpPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewLn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 值的纵坐标值，不显示</span>            ctValAx<span class="token punctuation">.</span><span class="token function">addNewTxPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewPPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewDefRPr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNewNoFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctChart<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream outputStream <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\user\\Desktop\\out.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workbook<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="三、XML结构"><a href="#三、XML结构" class="headerlink" title="三、XML结构"></a>三、XML结构</h2><p>以上生成的图表，归根结底是属于XML的一种，通过 <code>RadarChart</code> 的继承关系可以看到，它其实是 <code>XmlObject</code>的一种实现。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xml-fragment</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>char</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/chart<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>main</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.openxmlformats.org/drawingml/2006/main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>autoTitleDeleted</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>layout</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>layout</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>radarChart</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>radarStyle</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>marker<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>varyColors</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>idx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>order</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>schemeClr</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accent1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>solidFill</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>round</span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>cat</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>RadarChart!$A$1:$A$6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>strRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>cat</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>val</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>RadarChart!$B$2:$B$6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>f</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>numRef</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>val</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>ser</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showLegendKey</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showVal</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showCatName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showSerName</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showPercent</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>showBubbleSize</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>dLbls</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>radarChart</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>minorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>catAx</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axId</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123457<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>orientation</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minMax<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>scaling</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>delete</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>axPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span> <span class="token attr-name">w</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9525<span class="token punctuation">"</span></span> <span class="token attr-name">cap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span> <span class="token attr-name">cmpd</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sng<span class="token punctuation">"</span></span> <span class="token attr-name">algn</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctr<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>majorGridlines</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>majorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>minorTickMark</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>tickLblPos</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextTo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>noFill</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>ln</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>spPr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>txPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>pPr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>defRPr</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">main:</span>noFill</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>defRPr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>pPr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">main:</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>txPr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>crossAx</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>valAx</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">char:</span>plotArea</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">char:</span>plotVisOnly</span> <span class="token attr-name">val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>xml-fragment</span><span class="token punctuation">></span></span></code></pre><h2 id="四、工具类，我放在-POI生成原生图表-工具类-中"><a href="#四、工具类，我放在-POI生成原生图表-工具类-中" class="headerlink" title="四、工具类，我放在 POI生成原生图表-工具类 中"></a>四、工具类，我放在 <a href="www.baidu.com">POI生成原生图表-工具类</a> 中</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> POI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataMongoDB(一)</title>
      <link href="/2018/09/01/SpringData/Spring-Data-MongoDB%EF%BC%881%EF%BC%89/"/>
      <url>/2018/09/01/SpringData/Spring-Data-MongoDB%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h2><p>Spring MongoDB 与Spring Framewrok 提供的 JDBC 十分相似，在熟悉本篇文章之前，需要先熟悉 MongoDB 和Spring 的概念</p><p>Spring Data 使用了 Spring 框架的核心功能，包括：</p><ul><li>IOC容器 (IOC container)</li><li>类型转换系统 (type conversion system)</li><li>EL表达式 (expression language)</li><li>JMX集成</li><li>Dao异常层次结构</li></ul><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB作为一种 NOSQL 工具，非 RDMBS 设计范式，官方文档：<a href="https://docs.mongodb.com/manual/reference/operator/query/in/index.html" target="_blank" rel="noopener">https://docs.mongodb.com/manual/reference/operator/query/in/index.html</a></p><p>RDMBS设计范式：<a href="http://blog.51cto.com/echoroot/1953996" target="_blank" rel="noopener">http://blog.51cto.com/echoroot/1953996</a></p><h2 id="Spring-Data-MongoDB-2-0"><a href="#Spring-Data-MongoDB-2-0" class="headerlink" title="Spring Data MongoDB 2.0"></a>Spring Data MongoDB 2.0</h2><ul><li>升级至 java8</li><li>使用 Document API，而非 DBObject</li><li>支持聚合结果流 Stream</li><li>Kotlin 扩展</li><li>支持隔离 Update 操作</li><li>使用 Spring 的 @NonNullApi 和 @Nullable 保证 Null 安全</li></ul><h2 id="Spring-Data-MongoDB-支持的注解"><a href="#Spring-Data-MongoDB-支持的注解" class="headerlink" title="Spring Data MongoDB 支持的注解"></a>Spring Data MongoDB 支持的注解</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Document</span>   <span class="token operator">:</span> 文档标识，将 java 类与 Collection 文档对应<span class="token annotation punctuation">@Id</span>         <span class="token operator">:</span> 文档的唯一标识，在 mongodb 中为 ObjectID，生成规则：时间戳<span class="token operator">+</span>机器标识<span class="token operator">+</span>进程ID<span class="token operator">+</span>自增计数器<span class="token punctuation">(</span>确保同一时间内ID不会冲突<span class="token punctuation">)</span><span class="token annotation punctuation">@Field</span>      <span class="token operator">:</span> 属性注解<span class="token annotation punctuation">@Indexed</span>    <span class="token operator">:</span> 索引<span class="token annotation punctuation">@CompoundIndex</span>  <span class="token operator">:</span> 混合索引<span class="token annotation punctuation">@GeoSpatialIndexed</span>  <span class="token operator">:</span> 声明该字段为地理信息的索引<span class="token annotation punctuation">@Transient</span>  <span class="token operator">:</span> 映射忽略的字段 <span class="token punctuation">(</span>即不会保存到 mongodb<span class="token punctuation">)</span><span class="token annotation punctuation">@Query</span>      ：查询</code></pre><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>在使用 SpringDataMongoDB 之前，需要先声明对 SpringData 模块的依赖关系。</p><p>既然 SpringData 存储库抽象中的中央接口是 Repository 。 该接口的子类 CrudRepository 实现了实体类的 CRUD 功能，如果需要的话，也可以通过继承该接口来拓展 ：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CrudRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span>  <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>S <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> S <span class="token function">save</span><span class="token punctuation">(</span>S entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        Optional<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findById</span><span class="token punctuation">(</span>ID primaryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>   Iterable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">boolean</span> <span class="token function">existsById</span><span class="token punctuation">(</span>ID primaryKey<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// … more functionality omitted.</span><span class="token punctuation">}</span></code></pre><blockquote><p>除了 CrudRepository 之外，还有 JpaRepository 和 MongoRepository。在 CrudRepository 中，有许多抽象方法添加了额外的方法来简化对实体的分页访问。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** PagingAndSortingRepository 方法提供了分页和排序的功能*/</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span>  <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token punctuation">{</span>  Iterable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Sort sort<span class="token punctuation">)</span><span class="token punctuation">;</span>  Page<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>还有包含：删除查询、计数、查询等相关接口</p></blockquote><h2 id="定义自己的-Repository"><a href="#定义自己的-Repository" class="headerlink" title="定义自己的 Repository"></a>定义自己的 Repository</h2><p>声明扩展 Repository 或者其子接口之一的接口，并嵌入需要处理的对象和 ID 类型：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// UserRepository 默认继承了父类的 CRUD 方法</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 扩展的查询方法</span><span class="token punctuation">}</span></code></pre><h2 id="repository-方法的-Null-处理"><a href="#repository-方法的-Null-处理" class="headerlink" title="repository 方法的 Null 处理"></a>repository 方法的 Null 处理</h2><p>从 Spring Data 2.0 开始，返回单个聚合实例的 Repository 的 CRUD 方法 可以使用 Java8 中的Optional 来只是可能缺少的值，支持返回一下的包装类型：</p><ul><li>com.google.common.base.Optional</li><li>scala.Option</li><li>io.vavr.control.Option</li><li>javaslang.control.Option (不推荐)</li></ul><p>或者，不使用包装类型，直接返回查询结果为 Null。 使用 Optional 的好处在于保证了方法返回的对象永远不会为 Null，而是相应的 空表示。</p><h2 id="多-Spring-Data-模块的-Repository"><a href="#多-Spring-Data-模块的-Repository" class="headerlink" title="多 Spring Data 模块的 Repository"></a>多 Spring Data 模块的 Repository</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">MyRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token annotation punctuation">@NoRepositoryBean</span><span class="token keyword">interface</span> <span class="token class-name">MyBaseRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token punctuation">{</span>  …<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MyBaseRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// MyRepository 与 MyBaseRepository 都继承了 JpaRepository ，所以它们是有效的子类</span>  …<span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">AmbiguousRepository</span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span> …<span class="token punctuation">}</span><span class="token annotation punctuation">@NoRepositoryBean</span><span class="token keyword">interface</span> <span class="token class-name">MyBaseRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> ID<span class="token operator">></span> <span class="token punctuation">{</span>  …<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">AmbiguousUserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MyBaseRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span> Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 而且多个 SpringData 模块导致无法区分这些 Repository 应该绑定到哪个特定的 仓库</span>  …<span class="token punctuation">}</span></code></pre><h2 id="定义查询方法"><a href="#定义查询方法" class="headerlink" title="定义查询方法"></a>定义查询方法</h2><blockquote><p>仓库代理有两种方式导出指定的查询。</p><ul><li>从名字直接导出查询 ： 类似 findByName(String name);</li><li>手工定义的查询 : 类似 @query(“{ name : ?0}”)</li></ul></blockquote><blockquote><p>查询定义策略：<br>    通过 xml 文件中的 query-lookup-strategy 参数或者 Enable 注解中的 queryLookupStrategy 参数。</p><ul><li>CREATE 尝试从方法名中构造指定仓库的查询方法</li><li>USE_DECLARED_QUERY 尝试找到声明的查询，若无则抛出异常</li><li>CREATE_IF_NOT_FOUND 先查找声明的查询，如不能找到，将生成一个基于命名的查询（默认查询策略，一般不用变）</li></ul></blockquote><p>文章总结于：<a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#dependencies.spring-framework" target="_blank" rel="noopener">https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#dependencies.spring-framework</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java成神之路</title>
      <link href="/2017/05/26/java/Java%E6%88%90%E7%A5%9E%E4%B9%8B%E8%B7%AF/"/>
      <url>/2017/05/26/java/Java%E6%88%90%E7%A5%9E%E4%B9%8B%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Java成神-学习-之路"><a href="#Java成神-学习-之路" class="headerlink" title="Java成神(学习)之路"></a>Java成神(学习)之路</h1><h2 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><ol><li>JVM内存结构</li><li>堆、栈、方法区、直接内存、堆和栈区别</li><li>Java内存模型</li><li>内存可见性、重排序、顺序一致性、volatile、锁、final</li></ol><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ol><li>内存分配策略、垃圾收集器（G1）、GC算法、GC参数、对象存活的判定</li><li>JVM参数及调优</li></ol><h3 id="Java对象模型"><a href="#Java对象模型" class="headerlink" title="Java对象模型"></a>Java对象模型</h3><ol><li>oop-klass、对象头</li><li>HotSpot</li><li>即时编译器、编译优化</li></ol><h3 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h3><ol><li>classLoader、类加载过程、双亲委派（破坏双亲委派）、模块化（jboss modules、osgi、jigsaw）</li></ol><h3 id="虚拟机性能监控与故障处理工具"><a href="#虚拟机性能监控与故障处理工具" class="headerlink" title="虚拟机性能监控与故障处理工具"></a>虚拟机性能监控与故障处理工具</h3><ol><li>jps, jstack, jmap、jstat, jconsole, jinfo, jhat, javap, btrace、TProfiler</li></ol><h3 id="编译与反编译"><a href="#编译与反编译" class="headerlink" title="编译与反编译"></a>编译与反编译</h3><ol><li>javac 、javap 、jad 、CRF</li><li>Java基础知识</li></ol><h3 id="阅读源代码"><a href="#阅读源代码" class="headerlink" title="阅读源代码"></a>阅读源代码</h3><ol><li>String、Integer、Long、Enum、BigDecimal、ThreadLocal、ClassLoader &amp; URLClassLoader、ArrayList &amp; LinkedList、 HashMap &amp; LinkedHashMap &amp; TreeMap &amp; CouncurrentHashMap、HashSet &amp; LinkedHashSet &amp; TreeSet</li></ol><h3 id="Java中各种变量类型"><a href="#Java中各种变量类型" class="headerlink" title="Java中各种变量类型"></a>Java中各种变量类型</h3><ol><li>熟悉Java String的使用，熟悉String的各种函数</li><li>JDK 6和JDK 7中substring的原理及区别、</li><li>replaceFirst、replaceAll、replace区别、</li><li>String对“+”的重载、</li><li>String.valueOf和Integer.toString的区别、</li><li>字符串的不可变性</li><li>自动拆装箱</li><li>Integer的缓存机制</li></ol><h3 id="熟悉Java中各种关键字"><a href="#熟悉Java中各种关键字" class="headerlink" title="熟悉Java中各种关键字"></a>熟悉Java中各种关键字</h3><ol><li>transient、instanceof、volatile、synchronized、final、static、const原理及用法。</li></ol><h3 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h3><ol><li>常用集合类的使用、ArrayList和LinkedList和Vector的区别 、SynchronizedList和Vector的区别、</li><li>HashMap、HashTable、ConcurrentHashMap区别、Java 8中stream相关用法、apache集合处理工具类的使用、不同版本的JDK中HashMap的实现的区别以及原因</li></ol><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ol><li>枚举的用法、枚举与单例、Enum类</li></ol><h3 id="Java-IO-amp-Java-NIO，并学会使用"><a href="#Java-IO-amp-Java-NIO，并学会使用" class="headerlink" title="Java IO&amp;Java NIO，并学会使用"></a>Java IO&amp;Java NIO，并学会使用</h3><ol><li>bio、nio和aio的区别、三种IO的用法与原理、netty</li></ol><h3 id="Java反射与javassist"><a href="#Java反射与javassist" class="headerlink" title="Java反射与javassist"></a>Java反射与javassist</h3><ol><li>反射与工厂模式、 java.lang.reflect.*</li></ol><h3 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h3><ol><li>什么是序列化与反序列化、为什么序列化、序列化底层原理、序列化与单例模式、protobuf、为什么说序列化并不安全</li></ol><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ol><li>元注解、自定义注解、Java中常用注解使用、注解与反射的结合</li></ol><h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h3><ol><li>什么是Java消息服务、JMS消息传送模型</li><li>JMX</li><li>java.lang.management.<em>、 javax.management.</em></li></ol><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><ol><li>泛型与继承、类型擦除、泛型中K T V E ？ object等的含义、泛型各种用法</li></ol><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><ol><li>junit、mock、mockito、内存数据库（h2）</li></ol><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ol><li>java.lang.util.regex.*</li></ol><h3 id="常用的Java工具库"><a href="#常用的Java工具库" class="headerlink" title="常用的Java工具库"></a>常用的Java工具库</h3><ol><li>commons.lang, commons.*… guava-libraries netty</li><li>什么是API&amp;SPI</li></ol><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li>异常类型、正确处理异常、自定义异常</li></ol><h3 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h3><ol><li>时区、时令、Java中时间API</li></ol><h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><ol><li>解决乱码问题、常用编码方式</li></ol><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><ol><li>Java中语法糖原理、解语法糖</li></ol><h3 id="Java并发编程"><a href="#Java并发编程" class="headerlink" title="Java并发编程"></a>Java并发编程</h3><ol><li>什么是线程，与进程的区别</li><li>阅读源代码，并学会使用</li><li>Thread、Runnable、Callable、ReentrantLock、ReentrantReadWriteLock、Atomic*、Semaphore、CountDownLatch、、ConcurrentHashMap、Executors</li></ol><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ol><li>自己设计线程池、submit() 和 execute()</li></ol><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><ol><li>死锁、死锁如何排查、Java线程调度、线程安全和内存模型的关系</li><li>锁</li><li>CAS、乐观锁与悲观锁、数据库相关锁机制、分布式锁、偏向锁、轻量级锁、重量级锁、monitor、锁优化、锁消除、锁粗化、自旋锁、可重入锁、阻塞锁、死锁</li><li>死锁</li><li>volatile</li><li>happens-before、编译器指令重排和CPU指令重</li><li>synchronized</li><li>synchronized是如何实现的？synchronized和lock之间关系、不使用synchronized如何实现一个线程安全的单例</li><li>sleep 和 wait</li><li>wait 和 notify</li><li>notify 和 notifyAll</li><li>ThreadLocal</li><li>写一个死锁的程序</li><li>写代码来解决生产者消费者问题</li><li>守护线程</li><li>守护线程和非守护线程的区别以及用法 </li></ol><h2 id="二、-进阶篇"><a href="#二、-进阶篇" class="headerlink" title="二、 进阶篇"></a>二、 进阶篇</h2><h3 id="Java底层知识"><a href="#Java底层知识" class="headerlink" title="Java底层知识"></a>Java底层知识</h3><ol><li>字节码、class文件格式</li><li>CPU缓存，L1，L2，L3和伪共享</li><li>尾递归</li><li>位运算</li><li>用位运算实现加、减、乘、除、取余</li><li>设计模式</li><li>了解23种设计模式</li><li>会使用常用设计模式</li><li>单例、策略、工厂、适配器、责任链。</li><li>实现AOP</li><li>实现IOC</li><li>不用synchronized和lock，实现线程安全的单例模式</li><li>nio和reactor设计模式</li></ol><h3 id="网络编程知识"><a href="#网络编程知识" class="headerlink" title="网络编程知识"></a>网络编程知识</h3><ol><li>tcp、udp、http、https等常用协议</li><li>三次握手与四次关闭、流量控制和拥塞控制、OSI七层模型、tcp粘包与拆包</li><li>http/1.0 http/1.1 http/2之前的区别</li><li>Java RMI，Socket，HttpClient</li><li>cookie 与 session</li><li>cookie被禁用，如何实现session</li><li><p>用Java写一个简单的静态文件的HTTP服务器</p></li><li><p>实现客户端缓存功能，支持返回304 实现可并发下载一个文件 使用线程池处理客户端请求 使用nio处理客户端请求 支持简单的rewrite规则 上述功能在实现的时候需要满足“开闭原则”</p></li><li><p>了解nginx和apache服务器的特性并搭建一个对应的服务器</p></li><li>用Java实现FTP、SMTP协议</li><li>进程间通讯的方式</li><li>什么是CDN？如果实现？</li><li>什么是DNS？</li><li>反向代理</li><li>框架知识</li><li>Servlet线程安全问题</li><li>Servlet中的filter和listener</li><li>Hibernate的缓存机制</li><li>Hiberate的懒加载</li><li>Spring Bean的初始化</li><li>Spring的AOP原理</li><li>自己实现Spring的IOC</li><li>Spring MVC</li><li>Spring Boot2.0</li><li>Spring Boot的starter原理，自己实现一个starter</li><li>Spring Security</li><li>应用服务器知识</li><li>JBoss</li><li>tomcat</li><li>jetty</li><li>Weblogic</li><li>工具</li><li>git &amp; svn</li><li>maven &amp; gradle</li></ol><h2 id="三、-高级篇"><a href="#三、-高级篇" class="headerlink" title="三、 高级篇"></a>三、 高级篇</h2><h3 id="新技术"><a href="#新技术" class="headerlink" title="新技术"></a>新技术</h3><ol><li>Java 8</li><li>lambda表达式、Stream API、</li><li>Java 9</li><li>Jigsaw、Jshell、Reactive Streams</li><li>Java 10</li><li>局部变量类型推断、G1的并行Full GC、ThreadLocal握手机制</li><li>Spring 5</li></ol><h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><ol><li>Spring Boot 2.0</li><li>性能优化</li><li>使用单例、使用Future模式、使用线程池、选择就绪、减少上下文切换、减少锁粒度、数据压缩、结果缓存</li></ol><p>线上问题分析</p><ol><li>dump获取</li><li>线程Dump、内存Dump、gc情况</li><li>dump分析</li><li>分析死锁、分析内存泄露</li><li>自己编写各种outofmemory，stackoverflow程序</li><li>HeapOutOfMemory、 Young OutOfMemory、MethodArea OutOfMemory、ConstantPool OutOfMemory、DirectMemory OutOfMemory、Stack OutOfMemory Stack OverFlow</li><li>常见问题解决思路</li><li>内存溢出、线程死锁、类加载冲突</li><li>使用工具尝试解决以下问题，并写下总结</li><li>当一个Java程序响应很慢时如何查找问题、</li><li>当一个Java程序频繁FullGC时如何解决问题、</li><li>如何查看垃圾回收日志、</li><li>当一个Java应用发生OutOfMemory时该如何解决、</li><li>如何判断是否出现死锁、</li><li>如何判断是否存在内存泄露</li><li>编译原理知识</li><li>编译与反编译</li><li>Java代码的编译与反编译</li><li>Java的反编译工具</li><li>词法分析，语法分析（LL算法，递归下降算法，LR算法），语义分析，运行时环境，中间代码，代码生成，代码优化</li><li>操作系统知识</li><li>Linux的常用命令</li><li>进程同步</li><li>缓冲区溢出</li><li>分段和分页</li><li>虚拟内存与主存</li><li>数据库知识</li><li>MySql 执行引擎</li><li>MySQL 执行计划</li><li>如何查看执行计划，如何根据执行计划进行SQL优化</li></ol><h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><ol><li>事务</li><li>事务的隔离级别、事务能不能实现锁的功能</li><li>数据库锁</li><li>行锁、表锁、使用数据库锁实现乐观锁、</li><li>数据库主备搭建</li><li>binlog</li><li>内存数据库</li><li>h2</li><li>常用的nosql数据库</li><li>redis、memcached</li><li>分别使用数据库锁、NoSql实现分布式锁</li><li>性能调优</li><li>数据结构与算法知识</li><li>简单的数据结构</li><li>栈、队列、链表、数组、哈希表、</li></ol><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><ol><li>二叉树、字典树、平衡树、排序树、B树、B+树、R树、多路树、红黑树</li><li>排序算法</li><li>各种排序算法和时间复杂度</li><li>深度优先和广度优先搜索</li><li>全排列、贪心算法、KMP算法、hash算法、海量数据处理</li></ol><h3 id="大数据知识"><a href="#大数据知识" class="headerlink" title="大数据知识"></a>大数据知识</h3><ol><li>Zookeeper</li><li>基本概念、常见用法</li><li>Solr，Lucene，ElasticSearch</li><li>在linux上部署solr，solrcloud，，新增、删除、查询索引</li><li>Storm，流式计算，了解Spark，S4</li><li>在linux上部署storm，用zookeeper做协调，运行storm hello world，local和remote模式运行调试storm topology。</li><li>Hadoop，离线计算</li><li>HDFS、MapReduce</li><li>分布式日志收集flume，kafka，logstash</li><li>数据挖掘，mahout</li></ol><h3 id="网络安全知识"><a href="#网络安全知识" class="headerlink" title="网络安全知识"></a>网络安全知识</h3><ol><li>什么是XSS</li><li>XSS的防御</li><li>什么是CSRF</li><li>什么是注入攻击</li><li>SQL注入、XML注入、CRLF注入</li><li>什么是文件上传漏洞</li><li>加密与解密</li><li>MD5，SHA1、DES、AES、RSA、DSA</li><li>什么是DOS攻击和DDOS攻击</li><li>memcached为什么可以导致DDos攻击、什么是反射型DDoS</li><li>SSL、TLS，HTTPS</li><li>如何通过Hash碰撞进行DOS攻击</li><li>用openssl签一个证书部署到apache或nginx</li></ol><h2 id="四、架构篇"><a href="#四、架构篇" class="headerlink" title="四、架构篇"></a>四、架构篇</h2><h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><ol><li>数据一致性、服务治理、服务降级</li><li>分布式事务</li><li>2PC、3PC、CAP、BASE、</li><li>可靠消息最终一致性、最大努力通知、TCC</li><li>Dubbo</li><li>服务注册、服务发现，服务治理</li><li>分布式数据库</li><li>怎样打造一个分布式数据库、什么时候需要分布式数据库、mycat、otter、HBase</li><li>分布式文件系统</li><li>mfs、fastdfs</li><li>分布式缓存</li><li>缓存一致性、缓存命中率、缓存冗余</li><li>微服务</li><li>SOA、康威定律</li><li>ServiceMesh</li><li>Docker &amp; Kubernets</li><li>Spring Boot</li><li>Spring Cloud</li></ol><h3 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h3><ol><li>分库分表</li><li>CDN技术</li><li>消息队列</li><li>ActiveMQ</li></ol><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><ol><li>监控什么</li><li>CPU、内存、磁盘I/O、网络I/O等</li><li>监控手段</li><li>进程监控、语义监控、机器资源监控、数据波动</li><li>监控数据采集</li><li>日志、埋点</li><li>Dapper</li><li>负载均衡</li><li>tomcat负载均衡、Nginx负载均衡</li></ol><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><ol><li>DNS原理、DNS的设计</li><li>CDN</li><li>数据一致性</li></ol><h2 id="五、-扩展篇"><a href="#五、-扩展篇" class="headerlink" title="五、 扩展篇"></a>五、 扩展篇</h2><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><ol><li>IaaS、SaaS、PaaS、虚拟化技术、openstack、Serverlsess</li><li>搜索引擎</li><li>Solr、Lucene、Nutch、Elasticsearch</li><li>权限管理</li><li>Shiro</li><li>区块链</li><li>哈希算法、Merkle树、公钥密码算法、共识算法、Raft协议、Paxos 算法与 Raft 算法、拜占庭问题与算法、消息认证码与数字签名</li><li>比特币</li><li>挖矿、共识机制、闪电网络、侧链、热点问题、分叉</li><li>以太坊</li><li>超级账本</li><li>人工智能</li><li>数学基础、机器学习、人工神经网络、深度学习、应用场景。</li></ol><h3 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a>常用框架</h3><ol><li>TensorFlow、DeepLearning4J</li></ol><h3 id="其他语言"><a href="#其他语言" class="headerlink" title="其他语言"></a>其他语言</h3><ol><li>Groovy、Python、Go、NodeJs、Swift、Rust</li></ol><h2 id="六、-推荐书籍"><a href="#六、-推荐书籍" class="headerlink" title="六、 推荐书籍"></a>六、 推荐书籍</h2><ol><li>《深入理解Java虚拟机》</li><li>《Effective Java》</li><li>《深入分析Java Web技术内幕》</li><li>《大型网站技术架构》</li><li>《代码整洁之道》</li><li>《Head First设计模式》</li><li>《maven实战》</li><li>《区块链原理、设计与应用》</li><li>《Java并发编程实战》</li><li>《鸟哥的Linux私房菜》</li><li>《从Paxos到Zookeeper》</li><li>《架构即未来》</li></ol><p><a href="https://juejin.im/post/5ab46c9ef265da239b415ce1" target="_blank" rel="noopener">‘转载自掘金，Hollis_公众号Hollis’</a></p>]]></content>
      
      
      <categories>
          
          <category> Java成神之路 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
